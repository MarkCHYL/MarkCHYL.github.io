[{"title":"Android ANR发生的原因总结和解决办法","url":"/2020/08/06/Android-ANR%E5%8F%91%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0%E6%80%BB%E7%BB%93%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","content":"<h3 id=\"什么是ANR？\"><a href=\"#什么是ANR？\" class=\"headerlink\" title=\"什么是ANR？\"></a>什么是ANR？</h3><blockquote>\n<p>ANR的全称是application not responding，是指应用程序未响应，Android系统对于一些事件需要在一定的时间范围内完成，如果超过预定时间能未能得到有效响应或者响应时间过长，都会造成ANR。一般地，这时往往会弹出一个提示框，告知用户当前xxx未响应，用户可选择继续等待或者Force Close。</p>\n</blockquote>\n<hr>\n<h3 id=\"官方指定的产生ANR一般有以下类型：\"><a href=\"#官方指定的产生ANR一般有以下类型：\" class=\"headerlink\" title=\"官方指定的产生ANR一般有以下类型：\"></a>官方指定的产生ANR一般有以下类型：</h3><p>1：KeyDispatchTimeout（5秒）–主要类型<br>按键或触摸事件在特定时间无响应</p>\n<p>2：BroadcastTimeout（10秒）<br>BroadcastReceiver在特定时间无法处理完成</p>\n<p>3：ServiceTimeout（ 20秒）–小概率类型<br>服务在特定的时间无法处理完成</p>\n<hr>\n<h3 id=\"导致ANR的根本原因\"><a href=\"#导致ANR的根本原因\" class=\"headerlink\" title=\"导致ANR的根本原因\"></a>导致ANR的根本原因</h3><p>1.主线程执行了耗时操作，比如数据库操作或网络编程,I/O操作</p>\n<p>2.其他进程（就是其他程序）占用CPU导致本进程得不到CPU时间片，比如其他进程的频繁读写操作可能会导致这个问题。</p>\n<p>细分的话，导致ANR的原因有如下几点：<br>   1.耗时的网络访问<br>   2.大量的数据读写<br>   3.数据库操作<br>   4.硬件操作（比如camera)<br>   5.调用thread的join()方法、sleep()方法、wait()方法或者等待线程锁的时候<br>   6.service binder的数量达到上限<br>   7.system server中发生WatchDog ANR<br>   8.service忙导致超时无响应<br>   9.其他线程持有锁，导致主线程等待超时<br>   10.其它线程终止或崩溃导致主线程一直等待</p>\n<hr>\n<h3 id=\"调查并解决ANR\"><a href=\"#调查并解决ANR\" class=\"headerlink\" title=\"调查并解决ANR\"></a>调查并解决ANR</h3><ul>\n<li>1、首先分析log</li>\n<li>2、从trace.txt文件查看调用堆栈。-$ adb拉取data / anr / traces.txt。</li>\n<li>3、看代码</li>\n<li>4、仔细查看ANR的成因（iowait？block？memoryleak？）</li>\n</ul>\n<hr>\n<h3 id=\"如何避免ANR的发生\"><a href=\"#如何避免ANR的发生\" class=\"headerlink\" title=\"如何避免ANR的发生\"></a>如何避免ANR的发生</h3><p>1.避免在主线程执行耗时操作，所有耗时操作应新开一个子线程完成，然后再在主线程更新UI。</p>\n<p>2.BroadcastReceiver要执行耗时操作时应启动一个service，将耗时操作交给service来完成。</p>\n<p>3.避免在Intent Receiver里启动一个Activity，因为它会创建一个新的画面，并从当前用户正在运行的程序上抢夺焦点。如果你的应用程序在响应Intent广 播时需要向用户展示什么，你应该使用Notification Manager来实现。</p>\n","categories":["Android"],"tags":["Error","基础理论"]},{"title":"Android studio开启阿里巴巴资源仓库代理","url":"/2022/09/16/Android-studio%E5%BC%80%E5%90%AF%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E8%B5%84%E6%BA%90%E4%BB%93%E5%BA%93%E4%BB%A3%E7%90%86/","content":"<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    maven &#123;</span><br><span class=\"line\">        <span class=\"comment\">//解决 gradle.build 仓库更换为阿里云仓库后报错</span></span><br><span class=\"line\">        allowInsecureProtocol = <span class=\"keyword\">true</span></span><br><span class=\"line\">        <span class=\"comment\">//阿里云仓库</span></span><br><span class=\"line\">        url <span class=\"string\">&#x27;http://maven.aliyun.com/nexus/content/groups/public/&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   。。。。。。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["Android"]},{"title":"Android APK反编译 apktool使用教程","url":"/2019/09/26/Android-APK%E5%8F%8D%E7%BC%96%E8%AF%91-apktool%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><p>时间久了之前在熟悉的东西也会渐疏，好记性不如乱笔头。</p>\n<h2 id=\"工具介绍\"><a href=\"#工具介绍\" class=\"headerlink\" title=\"工具介绍\"></a>工具介绍</h2><ul>\n<li>apktool  </li>\n</ul>\n<p>​     作用：主要查看res文件下xml文件、AndroidManifest.xml和图片。（注意：如果直接解压.apk文件，xml文件打开全部是乱码）</p>\n<ul>\n<li>dex2jar</li>\n</ul>\n<p>​     作用：将apk反编译成<span class=\"exturl\" data-url=\"aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL2phdmFlZQ==\">Java<i class=\"fa fa-external-link-alt\"></i></span>源码（classes.dex转化成jar文件）</p>\n<ul>\n<li>jd-gui</li>\n</ul>\n<p>​     作用：查看APK中classes.dex转化成出的jar文件，即源码文件</p>\n<span id=\"more\"></span>\n\n<h2 id=\"新版本apktool用法：\"><a href=\"#新版本apktool用法：\" class=\"headerlink\" title=\"新版本apktool用法：\"></a>新版本apktool用法：</h2><p>1、下载和安装方法：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pYm90cGVhY2hlcy5naXRodWIuaW8vQXBrdG9vbC9pbnN0YWxsLw==\">https://ibotpeaches.github.io/Apktool/install/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20200326094455532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RpcmtzbWFsbGVy,size_16,color_FFFFFF,t_70\"></p>\n<p><strong>需要注意的是</strong><br>步骤一种的脚步，另存为apktool后，一定要把下载的apktool_xxxx.jar重命名为apktool.jar ，并且要和apktool脚本放在同一级目录下。</p>\n<p>2、使用方法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pYm90cGVhY2hlcy5naXRodWIuaW8vQXBrdG9vbC9kb2N1bWVudGF0aW9uLw==\">https://ibotpeaches.github.io/Apktool/documentation/<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><code>apktool d -f xxxx.apk</code></p>\n<p>3、反编译开始</p>\n<p>反编译：</p>\n<p><code>apktool d test.apk -o test</code></p>\n<p>回编译</p>\n<p><code>apktool b test -o new_test.apk</code></p>\n<h2 id=\"蚂蚁虽小也是肉，细心积累，慢慢提高自己，加油！\"><a href=\"#蚂蚁虽小也是肉，细心积累，慢慢提高自己，加油！\" class=\"headerlink\" title=\"蚂蚁虽小也是肉，细心积累，慢慢提高自己，加油！\"></a>蚂蚁虽小也是肉，细心积累，慢慢提高自己，加油！</h2>","categories":["Android"],"tags":["工具使用","反编译"]},{"title":"Android 安装APP 失败 INSTALL_FAILED_TEST_ONLY","url":"/2020/08/07/Android-%E5%AE%89%E8%A3%85APP-%E5%A4%B1%E8%B4%A5-INSTALL-FAILED-TEST-ONLY/","content":"<h3 id=\"android-studio-进行真机安装时失败，报错：\"><a href=\"#android-studio-进行真机安装时失败，报错：\" class=\"headerlink\" title=\"android studio 进行真机安装时失败，报错：\"></a>android studio 进行真机安装时失败，报错：</h3><blockquote>\n<p>Installation did not succeed.<br>The application could not be installed: INSTALL_FAILED_TEST_ONLY<br>Installation failed due to: ‘null’</p>\n</blockquote>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>在<code>gradle.properties 文件中</code>添加</p>\n<blockquote>\n<p>android.injected.testOnly=false</p>\n</blockquote>\n","categories":["Android"],"tags":["Error"]},{"title":"Android 搜索 把软键盘上的回车键改为搜索","url":"/2019/09/25/Android-%E6%90%9C%E7%B4%A2-%E6%8A%8A%E8%BD%AF%E9%94%AE%E7%9B%98%E4%B8%8A%E7%9A%84%E5%9B%9E%E8%BD%A6%E9%94%AE%E6%94%B9%E4%B8%BA%E6%90%9C%E7%B4%A2/","content":"<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><blockquote>\n<p>项目中需要自定义一个搜做的功能，但是我通过更具UI的显示，完全没法使用V7包下的SearchView控件，于是我使用EditView自己写的。<br><img data-src=\"https://thumbnail0.baidupcs.com/thumbnail/cede3f055d8aeb66477c40eb3af2066a?fid=3761439320-250528-957214977420267&time=1569398400&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-T/jYZusknxVB1gKzQcIJFFErJ/M=&expires=8h&chkv=0&chkbd=0&chkpc=&dp-logid=443423899171394619&dp-callid=0&size=c710_u400&quality=100&vuk=-&ft=video\"></p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"具体实现如下：\"><a href=\"#具体实现如下：\" class=\"headerlink\" title=\"具体实现如下：\"></a>具体实现如下：</h3><ul>\n<li><p>修改Editview属性：</p>\n<p><code>android:imeOptions=&quot;actionSearch&quot;   </code></p>\n<p>在该Editview获得焦点的时候将“回车”键改为“搜索”</p>\n<p>android:singleLine=”true”     </p>\n<p>不然回车【搜索】会换行。</p>\n</li>\n<li><p>EditView编写监听按下控件监听，监听确认键的按下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">etSearchstr.setOnKeyListener(new View.OnKeyListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onKey(View v, int keyCode, KeyEvent event) &#123;</span><br><span class=\"line\">                if (keyCode &#x3D;&#x3D; KeyEvent.KEYCODE_ENTER) &#123;</span><br><span class=\"line\">                    &#x2F;&#x2F; 先隐藏键盘</span><br><span class=\"line\">                    ((InputMethodManager) getSystemService(INPUT_METHOD_SERVICE)).hideSoftInputFromWindow(GoodsListActivity.this.getCurrentFocus()</span><br><span class=\"line\">                            .getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);</span><br><span class=\"line\">                    &#x2F;&#x2F;进行搜索操作的方法，在该方法中可以加入mEditSearchUser的非空判断</span><br><span class=\"line\">                    refresh.autoRefresh();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125; </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["Android"],"tags":["Android"]},{"title":"Activity的生命周期","url":"/2018/12/17/Activity%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","content":"<p><img data-src=\"http://hi.csdn.net/attachment/201109/1/0_1314838777He6C.gif\" alt=\"image\"></p>\n<h4 id=\"1-启动Activity：系统会先调用onCreate方法，这是生命周期第一个方法，然后调用onStart方法，最后调用onResume，Activity进入运行状态。\"><a href=\"#1-启动Activity：系统会先调用onCreate方法，这是生命周期第一个方法，然后调用onStart方法，最后调用onResume，Activity进入运行状态。\" class=\"headerlink\" title=\"1.启动Activity：系统会先调用onCreate方法，这是生命周期第一个方法，然后调用onStart方法，最后调用onResume，Activity进入运行状态。\"></a>1.启动Activity：系统会先调用onCreate方法，这是生命周期第一个方法，然后调用onStart方法，最后调用onResume，Activity进入运行状态。</h4><span id=\"more\"></span>\n<p>onCreate方法：一般做一些初始化工作，比如setContentView去加载布局资源，初始化Activity所需的数据。</p>\n<p>onStart方法：表示Activity正在启动，已经可见，但是无法和用户交互。<br>/Users/mark/Downloads/Activity的生命周期.md<br>onResume方法：Activity已经可见并且开始活动，已经出现在前台。</p>\n<h4 id=\"2-当前Activity被其他Activity覆盖其上或被锁屏：\"><a href=\"#2-当前Activity被其他Activity覆盖其上或被锁屏：\" class=\"headerlink\" title=\"2.当前Activity被其他Activity覆盖其上或被锁屏：\"></a>2.当前Activity被其他Activity覆盖其上或被锁屏：</h4><p>（可以理解为没有完全遮挡界面的）</p>\n<p>系统会调用onPause方法，暂停当前Activity的执行。</p>\n<h4 id=\"3-当前Activity由被覆盖状态回到前台或解锁屏：\"><a href=\"#3-当前Activity由被覆盖状态回到前台或解锁屏：\" class=\"headerlink\" title=\"3.当前Activity由被覆盖状态回到前台或解锁屏：\"></a>3.当前Activity由被覆盖状态回到前台或解锁屏：</h4><p>系统会调用onResume方法，再次进入运行状态。</p>\n<h4 id=\"4-当前Activity转到新的Activity界面或按Home键回到主屏，自身退居后台：\"><a href=\"#4-当前Activity转到新的Activity界面或按Home键回到主屏，自身退居后台：\" class=\"headerlink\" title=\"4.当前Activity转到新的Activity界面或按Home键回到主屏，自身退居后台：\"></a>4.当前Activity转到新的Activity界面或按Home键回到主屏，自身退居后台：</h4><p>系统会先调用onPause方法，然后调用onStop方法，进入停滞状态。</p>\n<h4 id=\"5-用户后退回到此Activity：\"><a href=\"#5-用户后退回到此Activity：\" class=\"headerlink\" title=\"5.用户后退回到此Activity：\"></a>5.用户后退回到此Activity：</h4><p>系统会先调用onRestart方法，</p>\n<p>然后调用onStart方法，</p>\n<p>最后调用onResume方法，</p>\n<p>再次进入运行状态。</p>\n<h4 id=\"6-用户退出当前Activity：系统先调用onPause方法，然后调用onStop方法，最后调用onDestory方法，结束当前Activity。\"><a href=\"#6-用户退出当前Activity：系统先调用onPause方法，然后调用onStop方法，最后调用onDestory方法，结束当前Activity。\" class=\"headerlink\" title=\"6.用户退出当前Activity：系统先调用onPause方法，然后调用onStop方法，最后调用onDestory方法，结束当前Activity。\"></a>6.用户退出当前Activity：系统先调用onPause方法，然后调用onStop方法，最后调用onDestory方法，结束当前Activity。</h4><p>但是知道这些还不够，我们必须亲自试验一下才能深刻体会，融会贯通。</p>\n<hr>\n<p>Activity四种启动模式的区别：standard    singleTop  singleTask   singleInstance</p>\n<p>standard：每次激活Activity时(startActivity)，都创建Activity实例，并放入任务栈； </p>\n<p>singleTop：如果某个Activity自己激活自己并且Activity处于栈顶，则不需要创 建，其余情况都要创建Activity实例；</p>\n<p>singleTask：如果要激活的那个Activity在任务栈中存在该实例，则不需要创建，只需要把 此Activity放入栈顶，即把该Activity以上的Activity实例都pop，并调用其onNewIntent；</p>\n<p>singleInstance：应用1的任务栈中创建了MainActivity实例，如果应用2也要激活 MainActivity，则不需要创建，两应用共享该Activity实例。</p>\n<hr>\n<p>onSaveInstanceState的调用遵循一个重要原则，即当系统“未经你许可”时销毁了你的 activity，则onSaveInstanceState会被系统调用，这是系统的责任，因为它必须要提供一 个机会让你保存的数据。<br>至于onRestoreInstanceState方法，需要注意的是， onSaveInstanceState方法和onRestoreInstanceState方法“不一定”是成对的被调用 的。 </p>\n<p>onRestoreInstanceState被调用的前提是，activity A“确实”被系统销毁了，而如果仅仅 是停留在有这种可能性的情况下，则该方法不会被调用，例如，当正在显示activity A的时 候，用户按下HOME键回到主界面，然后用户紧接着又返回到activity A，这种情况下 activity A一般不会因为内存的原因被系统销毁<br>故activity A的onRestoreInstanceState方 法不会被执行。</p>\n<p> 另外，onRestoreInstanceState的bundle参数也会传递到onCreate方法中，你也可以选择 在onCreate方法中做数据还原。</p>\n<p>切换横竖屏的生命周期：</p>\n<p>1、不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，<br>切横屏时会执行一次，切竖屏时会执行两次</p>\n<p>2、设置Activity的android:configChanges=”orientation”时，切屏还是会重新调<br>用各个生命周期，切横、竖屏时只会执行一次</p>\n<p>3、设置Activity的android:configChanges=”orientation|keyboardHidden”时，<br>切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</p>\n<h4 id=\"Activity运行时按下HOME键-跟被完全覆盖是一样的-：\"><a href=\"#Activity运行时按下HOME键-跟被完全覆盖是一样的-：\" class=\"headerlink\" title=\"Activity运行时按下HOME键(跟被完全覆盖是一样的)：\"></a>Activity运行时按下HOME键(跟被完全覆盖是一样的)：</h4><hr>\n<h2 id=\"–-gt-onPause–-gt-onPauseonSaveInstanceState–-gt-onStop-–-gt-onRestart–-gt-onStart—-gt-onResume\"><a href=\"#–-gt-onPause–-gt-onPauseonSaveInstanceState–-gt-onStop-–-gt-onRestart–-gt-onStart—-gt-onResume\" class=\"headerlink\" title=\"–&gt; onPause–&gt; onPauseonSaveInstanceState–&gt; onStop  –&gt; onRestart–&gt;onStart—&gt;onResume\"></a>–&gt; onPause–&gt; onPauseonSaveInstanceState–&gt; onStop  –&gt; onRestart–&gt;onStart—&gt;onResume</h2><h4 id=\"Activity未被完全覆盖只是失去焦点：onPause—-gt-onResume（我没复现过这个，待考证）\"><a href=\"#Activity未被完全覆盖只是失去焦点：onPause—-gt-onResume（我没复现过这个，待考证）\" class=\"headerlink\" title=\"Activity未被完全覆盖只是失去焦点：onPause—&gt;onResume（我没复现过这个，待考证）\"></a>Activity未被完全覆盖只是失去焦点：onPause—&gt;onResume（我没复现过这个，待考证）</h4><h4 id=\"A跳转到B，然后按-back回退到A，A的生命周期：\"><a href=\"#A跳转到B，然后按-back回退到A，A的生命周期：\" class=\"headerlink\" title=\"A跳转到B，然后按 back回退到A，A的生命周期：\"></a>A跳转到B，然后按 back回退到A，A的生命周期：</h4><hr>\n<h2 id=\"–-gt-onCreate-–-gt-onStart-–-gt-onResume-–-gt-onPause-–-gt-onSaveInstanceState-–-gt-onStop-然后回退–-gt-onRestart-–-gt-onStart-–-gt-onResume\"><a href=\"#–-gt-onCreate-–-gt-onStart-–-gt-onResume-–-gt-onPause-–-gt-onSaveInstanceState-–-gt-onStop-然后回退–-gt-onRestart-–-gt-onStart-–-gt-onResume\" class=\"headerlink\" title=\"–&gt;onCreate –&gt;onStart –&gt;onResume –&gt;onPause –&gt;onSaveInstanceState –&gt;onStop 然后回退–&gt;onRestart –&gt;onStart –&gt;onResume \"></a>–&gt;onCreate –&gt;onStart –&gt;onResume –&gt;onPause –&gt;onSaveInstanceState –&gt;onStop 然后回退–&gt;onRestart –&gt;onStart –&gt;onResume </h2>","categories":["Android"],"tags":["基础理论"]},{"title":"Android中APT技术介绍","url":"/2022/09/16/Android%E4%B8%ADAPT%E6%8A%80%E6%9C%AF%E4%BB%8B%E7%BB%8D/","content":"<h2 id=\"Android中APT技术介绍\"><a href=\"#Android中APT技术介绍\" class=\"headerlink\" title=\"Android中APT技术介绍\"></a>Android中APT技术介绍</h2><p>[TOC]</p>\n<h3 id=\"APT是什么\"><a href=\"#APT是什么\" class=\"headerlink\" title=\"APT是什么\"></a>APT是什么</h3><p><code>APT</code> 全称 <code>Annotation Processing Tool</code>，即注解处理器，是javac的一种处理注释的工具，它对源代码文件进行检测找出其中的Annotation，并根据注解自动生成代码，帮助开发者减少了很多重复代码的编写。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>很多著名的框架用到APT的思想，通过注解编译期间自动生成代码，简化使用</p>\n<ol>\n<li><code>Butterknife</code></li>\n<li><code>Dragger</code></li>\n<li><code>Room</code></li>\n</ol>\n<p>另外，还有是运行时注解，例如</p>\n<ol>\n<li><code>Retrofit</code></li>\n</ol>\n<h3 id=\"APT有什么用-（好处）\"><a href=\"#APT有什么用-（好处）\" class=\"headerlink\" title=\"APT有什么用 （好处）\"></a>APT有什么用 （好处）</h3><p>可以在编译时生成额外的.java文件，在程序运行的时候调用相关方法，可以达到减少重复代码的效果。它的好处：提高开发效率，使得项目更容易维护和扩展，同时几乎不影响性能。</p>\n<h3 id=\"APT原理-（为什么）\"><a href=\"#APT原理-（为什么）\" class=\"headerlink\" title=\"APT原理 （为什么）\"></a>APT原理 （为什么）</h3><p>通过APT（Annotation Processing Tool）技术，即注解处理器，在编译时扫描并处理注解，注解处理器最终生成处理注解逻辑的.java文件。</p>\n<h3 id=\"APT实践-（怎么做）\"><a href=\"#APT实践-（怎么做）\" class=\"headerlink\" title=\"APT实践 （怎么做）\"></a>APT实践 （怎么做）</h3><ol>\n<li>创建自定义注解@interface；</li>\n<li>创建并注册注解处理器AbstractProcesso，生成处理注解逻辑的.java文件；</li>\n<li>封装一个供外部调用的API，用的是反射技术，具体来说就是调用第二步中生成的代码中的方法；</li>\n<li>在业务代码中使用，比如Activity、Fragment、Adapter</li>\n</ol>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iNWJlNmI4OTZhMWE=\">Android编译时注解–入门篇（AbstractProcessor、APT）<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3h4MzI2NjY0MTYyL2FydGljbGUvZGV0YWlscy82ODQ5MDA1OQ==\">你必须知道的APT、annotationProcessor、android-apt、Provided、自定义注解<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzAxMjgzMzQwMzAx\">Android 注解系列之APT工具<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hiNzA3OTM0NzI4L2FydGljbGUvZGV0YWlscy81MjIxMzA4Ng==\">Android 利用 APT 技术在编译期生成代码<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpYW96aGl5dWFuL2FydGljbGUvZGV0YWlscy8xMTcwNDUxMjU=\">Android注解处理器APT技术简介<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n","categories":["Android"],"tags":["Android","APT"]},{"title":"Android如何进行技术选型（案列：Navigation组件和ARouter为例）","url":"/2022/09/16/Android%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%EF%BC%88%E6%A1%88%E5%88%97%EF%BC%9ANavigation%E7%BB%84%E4%BB%B6%E5%92%8CARouter%E4%B8%BA%E4%BE%8B%EF%BC%89/","content":"<h2 id=\"案列：Navigation组件和ARouter为例\"><a href=\"#案列：Navigation组件和ARouter为例\" class=\"headerlink\" title=\"案列：Navigation组件和ARouter为例\"></a>案列：Navigation组件和ARouter为例</h2><p>[TOC]</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbWFya3Nob3cvaGlyb3V0ZXI=\">我的Demo：<i class=\"fa fa-external-link-alt\"></i></span>涵盖了两大路由的基础使用</p>\n<h3 id=\"如何做好技术选型？\"><a href=\"#如何做好技术选型？\" class=\"headerlink\" title=\"如何做好技术选型？\"></a>如何做好技术选型？</h3><p><img data-src=\"https://markchyl.cn/img/OPlayer_2022-07-12_18-19-20.jpg\"></p>\n<h3 id=\"什么是路由？\"><a href=\"#什么是路由？\" class=\"headerlink\" title=\"什么是路由？\"></a>什么是路由？</h3><ul>\n<li>页面间跳转关系映射，可以通过字符串、别名等方式实现跳转<h3 id=\"为什么介入路由？Intent不好吗？\"><a href=\"#为什么介入路由？Intent不好吗？\" class=\"headerlink\" title=\"为什么介入路由？Intent不好吗？\"></a>为什么介入路由？Intent不好吗？</h3></li>\n</ul>\n<p><strong>Intent</strong></p>\n<ul>\n<li>跳转过程无法控制，一旦调用了startActivity(Intent)便交由系统执行，中间过程无法插手</li>\n<li>跳转失败无法捕获、降级，出现问题直接抛出异常</li>\n<li>显示Intent<br>  显示Intent中因为存在直接的类依赖关系，导致耦合严重</li>\n<li>隐式Intent<br>隐式Intent中会出现规则集中式的管理，导致协作困难，都需要在Manifest中进行配置，导致扩展性比较差<h3 id=\"对比两大路由组件的功能对照表\"><a href=\"#对比两大路由组件的功能对照表\" class=\"headerlink\" title=\"对比两大路由组件的功能对照表\"></a>对比两大路由组件的功能对照表</h3></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Navigation</th>\n<th>ARouter</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>跳转行为</td>\n<td>通过页面的action跳转，支持Activity，Fragment，Dialog</td>\n<td>支持标准URL跳转</td>\n</tr>\n<tr>\n<td>模块间通信</td>\n<td>不支持，需要将所有页面定义在一个资源文件里</td>\n<td>@Route注解配置，根据Path获取对应的接口实现</td>\n</tr>\n<tr>\n<td>路由节点注册</td>\n<td>统一在navigation_mobile.xml中注册</td>\n<td>@Route注解</td>\n</tr>\n<tr>\n<td>路由节点的生成方式</td>\n<td>加载navigation_mobile.xml生成NavGraph导航视图</td>\n<td>按照组划分</td>\n</tr>\n<tr>\n<td>拦截器</td>\n<td>不支持</td>\n<td>支持全部定义拦截器，可以自定义拦截顺序</td>\n</tr>\n<tr>\n<td>转场动画</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>降级策略</td>\n<td>不支持</td>\n<td>支持全局降级和局部降级</td>\n</tr>\n<tr>\n<td>参数自动注入</td>\n<td>不支持</td>\n<td>@Autowired注解实现</td>\n</tr>\n<tr>\n<td>外部跳转控制（h5打开app页面）</td>\n<td>deeplink页面直达</td>\n<td>需要配置入口Activity，支持的uri需要在Manifest中配置</td>\n</tr>\n</tbody></table>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><strong>ARouter主要是用于Activity路由的框架，采用的是APT技术，可用于组件化改造。而Navigation主要是用于Fragment路由导航的框架。</strong></p>\n<blockquote>\n<p>可以说，这两个虽然都是用于路由导航，但是用途是不一样。如果你的应用主要以Acticity为主的话，建议使用ARouter；如果你的页面主要以Fragment为主，Activity只是作为容器的话，那么建议你使用Navigation。当然，你也可以两个都用，这完全取决于你的项目实际情况，不冲突的。</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHAueWlueGlhbmcuY29tL3NoYXJkL3M1MC9ubC8yMjEwOTE5Mi81NmZlMzY5My04ZWI0LTQ1NzQtYTU1Yi1hNDI4NTFlNGU4OWMv\">Android中APT技术介绍<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["Android","架构师"]},{"title":"Android 的事件分发机制","url":"/2020/12/30/Android-%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/","content":"<p>Android 事件分发总是遵循 Activity =&gt; ViewGroup =&gt; View 的传递顺序；<br>从按下开始依次从Activity开始处理，然后向下分发到ViewGroup，再到最下面的View。</p>\n<p>一般情况下，事件列都是从用户按下（ACTION_DOWN）的那一刻产生的，<br>负责对事件进行分发的方法主要有三个，分别是：</p>\n<ul>\n<li>dispatchTouchEvent()</li>\n<li>onTouchEvent()</li>\n<li>onInterceptTouchEvent()</li>\n</ul>\n<p>事件：事件就是Event<br>事件类型分为四种</p>\n<ul>\n<li>DOWN是按下</li>\n<li>UP是抬起</li>\n<li>MOVE是滑动</li>\n<li>CANCEL是取消事件</li>\n</ul>\n<p>它们并不存在于所有负责分发的组件中，其具体情况总结于下面的表格中：<br>dispatchTouchEvent,onTouchEvent方法存在于上文的三个组件中。而onInterceptTouchEvent为ViewGroup独有。<br>ViewGroup类中，实际是没有onTouchEvent方法的，但是由于ViewGroup继承自View，而View拥有onTouchEvent方法，故ViewGroup的对象也是可以调用onTouchEvent方法的。</p>\n","categories":["Android"],"tags":["基础理论"]},{"title":"Android常见的三种弹框","url":"/2019/08/06/Android%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E5%BC%B9%E6%A1%86/","content":"<p>再简单的东西时间长了，用的次数少了，会容易忘记。反之再复杂的东西其实也是由普普通通的东西实现的。<br>**<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1Njk4Nzc0L2FydGljbGUvZGV0YWlscy83OTc3OTIzOA==\">感谢这位博主<i class=\"fa fa-external-link-alt\"></i></span>总结**。<br>Android在开发中经常会遇到有弹框的需求。经常使用的有Dialog 弹框，Window弹框，Activity伪弹框这三种。</p>\n<span id=\"more\"></span>\n\n<p>我这今天主要是记录下Dialog，简单的交互：<br>Dialog继承Object,异步调用，不会阻塞UI线程。以下是对他的整体框架：</p>\n<p><img data-src=\"https://img-blog.csdn.net/2018040116510588\" alt=\"图片来自网上\" title=\"图片来自网上\"></p>\n<p>我今天使用的就是AlertDialog，以下其API方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">setTitle ：为对话框设置标题</span><br><span class=\"line\">setIcon ：为对话框设置图标</span><br><span class=\"line\">setMessage：为对话框设置内容</span><br><span class=\"line\">setView ： 给对话框设置自定义样式</span><br><span class=\"line\">setItems ：设置对话框要显示的一个list，一般用于显示几个命令时</span><br><span class=\"line\">setMultiChoiceItems ：用来设置对话框显示一系列的复选框</span><br><span class=\"line\">setSingleChoiceItems ：用来设置对话框显示一系列的单选框</span><br><span class=\"line\">setNeutralButton    ：普通按钮</span><br><span class=\"line\">setPositiveButton   ：给对话框添加&quot;Yes&quot;按钮</span><br><span class=\"line\">setNegativeButton ：对话框添加&quot;No&quot;按钮</span><br><span class=\"line\">create ： 创建对话框</span><br><span class=\"line\">show ：显示对话框</span><br></pre></td></tr></table></figure>\n\n<p> 下面我贴一下我自己的代码：<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private void showDialog(SlibingMenuActivity mActivity, String message, int i) &#123;</span><br><span class=\"line\">       AlertDialog.Builder dialog &#x3D; new AlertDialog.Builder(mActivity);</span><br><span class=\"line\">       dialog.setTitle(&quot;温馨提示：&quot;);</span><br><span class=\"line\">       dialog.setMessage(message);</span><br><span class=\"line\">       dialog.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class=\"line\">               Toast.makeText(mActivity, &quot;您点击了取消&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       dialog.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void onClick(DialogInterface dialog, int which) &#123;</span><br><span class=\"line\">               if (i &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">                   ClockOn();&#x2F;&#x2F;上班</span><br><span class=\"line\">               &#125; else if (i &#x3D;&#x3D; 1) &#123;</span><br><span class=\"line\">                   ClockOff();</span><br><span class=\"line\">               &#125; else if (i &#x3D;&#x3D; 2) &#123;</span><br><span class=\"line\">                   logout();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\">       dialog.create();</span><br><span class=\"line\">       dialog.show();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"1-只显示标题和内容\"><a href=\"#1-只显示标题和内容\" class=\"headerlink\" title=\"1.只显示标题和内容\"></a>1.只显示标题和内容</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">AlertDialog alertDialog1 &#x3D; new AlertDialog.Builder(this)</span><br><span class=\"line\">        .setTitle(&quot;这是标题&quot;)&#x2F;&#x2F;标题</span><br><span class=\"line\">        .setMessage(&quot;这是内容&quot;)&#x2F;&#x2F;内容</span><br><span class=\"line\">        .setIcon(R.mipmap.ic_launcher)&#x2F;&#x2F;图标</span><br><span class=\"line\">        .create();</span><br><span class=\"line\">alertDialog1.show();</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img-blog.csdn.net/20180401170308265\"></p>\n<h2 id=\"2-有多个按钮\"><a href=\"#2-有多个按钮\" class=\"headerlink\" title=\"2.有多个按钮\"></a>2.有多个按钮</h2><blockquote>\n<p>setPositiveButton  设置一个确定按钮</p>\n</blockquote>\n<blockquote>\n<p>setNegativeButton  设置一个取消按钮</p>\n</blockquote>\n<blockquote>\n<p>setNeutralButton   设置一个普通按钮</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">这三个按钮可以随意组合使用不冲突。</span><br><span class=\"line\">AlertDialog alertDialog2 &#x3D; new AlertDialog.Builder(this)</span><br><span class=\"line\">        .setTitle(&quot;这是标题&quot;)</span><br><span class=\"line\">        .setMessage(&quot;有多个按钮&quot;)</span><br><span class=\"line\">        .setIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">        .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加&quot;Yes&quot;按钮</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;这是确定按钮&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">        .setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加取消</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;这是取消按钮&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .setNeutralButton(&quot;普通按钮&quot;, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加普通按钮</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;这是普通按钮按钮&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .create();</span><br><span class=\"line\">alertDialog2.show();</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img-blog.csdn.net/20180401170521672\">\n </p>\n<h2 id=\"3-一个列表\"><a href=\"#3-一个列表\" class=\"headerlink\" title=\"3.一个列表\"></a>3.一个列表</h2><blockquote>\n<p>setItems  里面写列表数据</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">final String[] items3 &#x3D; new String[]&#123;&quot;苍老湿&quot;, &quot;小泽老湿&quot;, &quot;波多野结衣老湿&quot;, &quot;吉泽明步老湿&quot;&#125;;&#x2F;&#x2F;创建item</span><br><span class=\"line\">AlertDialog alertDialog3 &#x3D; new AlertDialog.Builder(this)</span><br><span class=\"line\">        .setTitle(&quot;选择您喜欢的老湿&quot;)</span><br><span class=\"line\">        .setIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">        .setItems(items3, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加列表</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;点的是：&quot; + items3[i], Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .create();</span><br><span class=\"line\">alertDialog3.show();</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img-blog.csdn.net/20180401170703518\"></p>\n<h2 id=\"4-单选列表\"><a href=\"#4-单选列表\" class=\"headerlink\" title=\"4.单选列表\"></a>4.单选列表</h2><blockquote>\n<p>setSingleChoiceItems  单选框列表</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">final String[] items4 &#x3D; new String[]&#123;&quot;苍老湿&quot;, &quot;小泽老湿&quot;, &quot;波多野结衣老湿&quot;, &quot;吉泽明步老湿&quot;&#125;;&#x2F;&#x2F;创建item</span><br><span class=\"line\">AlertDialog alertDialog4 &#x3D; new AlertDialog.Builder(this)</span><br><span class=\"line\">        .setTitle(&quot;选择您喜欢的老湿&quot;)</span><br><span class=\"line\">        .setIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">        .setSingleChoiceItems(items4, 0, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加单选框</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                index &#x3D; i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加&quot;Yes&quot;按钮</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;这是确定按钮&quot; + &quot;点的是：&quot; + items4[index], Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">        .setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加取消</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;这是取消按钮&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .create();</span><br><span class=\"line\">alertDialog4.show();</span><br></pre></td></tr></table></figure>\n<p> </p>\n<h2 id=\"5-多选列表\"><a href=\"#5-多选列表\" class=\"headerlink\" title=\"5.多选列表\"></a>5.多选列表</h2><blockquote>\n<p>setMultiChoiceItems 多选框</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">final String[] items5 &#x3D; new String[]&#123;&quot;苍老湿&quot;, &quot;小泽老湿&quot;, &quot;波多野结衣老湿&quot;, &quot;吉泽明步老湿&quot;&#125;;&#x2F;&#x2F;创建item</span><br><span class=\"line\">final boolean[] booleans &#x3D; &#123;true, true, false, false&#125;;</span><br><span class=\"line\">AlertDialog alertDialog5 &#x3D; new AlertDialog.Builder(this)</span><br><span class=\"line\">        .setTitle(&quot;选择您喜欢的老湿&quot;)</span><br><span class=\"line\">        .setIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">        .setMultiChoiceItems(items5, booleans, new DialogInterface.OnMultiChoiceClickListener() &#123;&#x2F;&#x2F;创建多选框</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i, boolean b) &#123;</span><br><span class=\"line\">                booleans[i] &#x3D; b;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .setPositiveButton(&quot;确定&quot;, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加&quot;Yes&quot;按钮</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                StringBuilder stringBuilder &#x3D; new StringBuilder();</span><br><span class=\"line\">                for (int a &#x3D; 0; a &lt; booleans.length; a++) &#123;</span><br><span class=\"line\">                    if (booleans[a]) &#123;</span><br><span class=\"line\">                        stringBuilder.append(items5[a] + &quot; &quot;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;这是确定按钮&quot; + &quot;点的是：&quot; + stringBuilder.toString(), Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">        .setNegativeButton(&quot;取消&quot;, new DialogInterface.OnClickListener() &#123;&#x2F;&#x2F;添加取消</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;这是取消按钮&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .create();</span><br><span class=\"line\">alertDialog5.show();</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img-blog.csdn.net/20180401170947418\">\n </p>\n<h3 id=\"6-setAdapter的用法\"><a href=\"#6-setAdapter的用法\" class=\"headerlink\" title=\"6.setAdapter的用法\"></a>6.setAdapter的用法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">final String[] items6 &#x3D; new String[]&#123;&quot;苍老湿&quot;, &quot;小泽老湿&quot;, &quot;波多野结衣老湿&quot;, &quot;吉泽明步老湿&quot;&#125;;&#x2F;&#x2F;创建item</span><br><span class=\"line\">AlertDialog alertDialog6 &#x3D; new AlertDialog.Builder(this)</span><br><span class=\"line\">        .setTitle(&quot;选择您喜欢的老湿&quot;)</span><br><span class=\"line\">        .setIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">        .setAdapter(new ArrayAdapter&lt;String&gt;(AlertDialogActivity.this, R.layout.item, R.id.tv, items6), new DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(DialogInterface dialogInterface, int i) &#123;</span><br><span class=\"line\">                Toast.makeText(AlertDialogActivity.this, &quot;点的是：&quot; + items6[i], Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .create();</span><br><span class=\"line\">alertDialog6.show();</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img-blog.csdn.net/20180401171051313\">\n </p>\n<h2 id=\"7-自定义view的用法\"><a href=\"#7-自定义view的用法\" class=\"headerlink\" title=\"7.自定义view的用法\"></a>7.自定义view的用法</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">final AlertDialog.Builder alertDialog7 &#x3D; new AlertDialog.Builder(this);</span><br><span class=\"line\">View view1 &#x3D; View.inflate(this, R.layout.activity_alter_dialog_setview, null);</span><br><span class=\"line\">final EditText et &#x3D; view1.findViewById(R.id.et);</span><br><span class=\"line\">Button bu &#x3D; view1.findViewById(R.id.button);</span><br><span class=\"line\">alertDialog7</span><br><span class=\"line\">        .setTitle(&quot;Login&quot;)</span><br><span class=\"line\">        .setIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">        .setView(view1)</span><br><span class=\"line\">        .create();</span><br><span class=\"line\">final AlertDialog show &#x3D; alertDialog7.show();</span><br><span class=\"line\">bu.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onClick(View view) &#123;</span><br><span class=\"line\">        Toast.makeText(AlertDialogActivity.this, &quot;电话&quot; + et.getText().toString(), Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        show.dismiss();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><img data-src=\"https://img-blog.csdn.net/20180401211644887\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1Njk4Nzc0L2FydGljbGUvZGV0YWlscy83OTc3OTIzOA==\">原文链接：<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["Android"]},{"title":"Android7.0至Android8.0适配记录","url":"/2018/12/17/Android7-0%E8%87%B3Android8-0%E9%80%82%E9%85%8D%E8%AE%B0%E5%BD%95/","content":"<h2 id=\"Android7-0至Android8-0适配记录\"><a href=\"#Android7-0至Android8-0适配记录\" class=\"headerlink\" title=\"Android7.0至Android8.0适配记录\"></a>Android7.0至Android8.0适配记录</h2><h4 id=\"一五年的老项目，里面存在过时的API众多，导致高版本的编译时运行时报错，而我这次做的适配遇到的困难重要有三个\"><a href=\"#一五年的老项目，里面存在过时的API众多，导致高版本的编译时运行时报错，而我这次做的适配遇到的困难重要有三个\" class=\"headerlink\" title=\"一五年的老项目，里面存在过时的API众多，导致高版本的编译时运行时报错，而我这次做的适配遇到的困难重要有三个\"></a>一五年的老项目，里面存在过时的API众多，导致高版本的编译时运行时报错，而我这次做的适配遇到的困难重要有三个</h4><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><span id=\"more\"></span>\n<ul>\n<li><h3 id=\"广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知。\"><a href=\"#广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知。\" class=\"headerlink\" title=\"广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知。\"></a>广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知。</h3></li>\n<li><h3 id=\"8-0系统的手机上，全面的界面不能填充完整。\"><a href=\"#8-0系统的手机上，全面的界面不能填充完整。\" class=\"headerlink\" title=\"8.0系统的手机上，全面的界面不能填充完整。\"></a>8.0系统的手机上，全面的界面不能填充完整。</h3></li>\n<li><h3 id=\"由于项目里用到的网络框架jar是XUtils，许久没做维护的第三方的jar包，HttpClient-和-HttpConnection-已在高版本的API直接和我们拜拜了。\"><a href=\"#由于项目里用到的网络框架jar是XUtils，许久没做维护的第三方的jar包，HttpClient-和-HttpConnection-已在高版本的API直接和我们拜拜了。\" class=\"headerlink\" title=\"由于项目里用到的网络框架jar是XUtils，许久没做维护的第三方的jar包，HttpClient 和 HttpConnection 已在高版本的API直接和我们拜拜了。\"></a>由于项目里用到的网络框架jar是XUtils，许久没做维护的第三方的jar包，HttpClient 和 HttpConnection 已在高版本的API直接和我们拜拜了。</h3></li>\n</ul>\n<h3 id=\"下面我真对上面自己的问题记录下我的处理：\"><a href=\"#下面我真对上面自己的问题记录下我的处理：\" class=\"headerlink\" title=\"下面我真对上面自己的问题记录下我的处理：\"></a>下面我真对上面自己的问题记录下我的处理：</h3><h2 id=\"第一、-8-0系统的手机上，全面的界面不能填充完整\"><a href=\"#第一、-8-0系统的手机上，全面的界面不能填充完整\" class=\"headerlink\" title=\"第一、 8.0系统的手机上，全面的界面不能填充完整\"></a>第一、 8.0系统的手机上，全面的界面不能填充完整</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;meta-data</span><br><span class=\"line\">       android:name&#x3D;&quot;android.max_aspect&quot;</span><br><span class=\"line\">       android:value&#x3D;&quot;2.4&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"第二、-广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知\"><a href=\"#第二、-广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知\" class=\"headerlink\" title=\"第二、 广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知\"></a>第二、 广播接收者（BroadCastReceiver）无法正常己收到广播去发起通知</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z6a2Y5MjI1L2FydGljbGUvZGV0YWlscy84MTExOTc4MA==\">关于Android 8.0后notification通知声音无法关闭或开启的问题<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"第三、-HttpClient-和-HttpConnection的强制使用Utils的低版本API\"><a href=\"#第三、-HttpClient-和-HttpConnection的强制使用Utils的低版本API\" class=\"headerlink\" title=\"第三、 HttpClient 和 HttpConnection的强制使用Utils的低版本API\"></a>第三、 HttpClient 和 HttpConnection的强制使用Utils的低版本API</h2><h4 id=\"这个我在网上找到一个配置方法，但是还是编译失败，所以弃用，起码现在编译成功\"><a href=\"#这个我在网上找到一个配置方法，但是还是编译失败，所以弃用，起码现在编译成功\" class=\"headerlink\" title=\"这个我在网上找到一个配置方法，但是还是编译失败，所以弃用，起码现在编译成功\"></a>这个我在网上找到一个配置方法，但是还是编译失败，所以弃用，起码现在编译成功</h4><p>在app中的build文件中添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">useLibrary &#39;org.apache.http.legacy&#39;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":["适配"]},{"title":"Android 通用流行框架大全","url":"/2020/08/07/Android-%E9%80%9A%E7%94%A8%E6%B5%81%E8%A1%8C%E6%A1%86%E6%9E%B6%E5%A4%A7%E5%85%A8/","content":"<blockquote>\n<p>1.缓存</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>DiskLruCache</td>\n<td>Java实现基于LRU的磁盘缓存</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>2.图片加载</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Android Universal Image Loader</td>\n<td>一个强大的加载，缓存，展示图片的库</td>\n</tr>\n<tr>\n<td>Picasso</td>\n<td>一个强大的图片下载与缓存的库</td>\n</tr>\n<tr>\n<td>Fresco</td>\n<td>一个用于管理图像和他们使用的内存的库</td>\n</tr>\n<tr>\n<td>Glide</td>\n<td>一个图片加载和缓存的库</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>3.图片处理</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Picasso-transformations</td>\n<td>一个为Picasso提供多种图片变换的库</td>\n</tr>\n<tr>\n<td>Glide-transformations</td>\n<td>一个为Glide提供多种图片变换的库</td>\n</tr>\n<tr>\n<td>Android-gpuimage</td>\n<td>基于OpenGL的Android过滤器</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>4.网络请求</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Android Async HTTP</td>\n<td>Android异步HTTP库</td>\n</tr>\n<tr>\n<td>AndroidAsync</td>\n<td>异步Socket，HTTP(客户端+服务器)，WebSocket，和socket.io库。基于NIO而不是线程。</td>\n</tr>\n<tr>\n<td>OkHttp</td>\n<td>一个Http与Http/2的客户端</td>\n</tr>\n<tr>\n<td>Retrofit</td>\n<td>类型安全的Http客户端</td>\n</tr>\n<tr>\n<td>Volley</td>\n<td>Google推出的Android异步网络请求框架和图片加载框架</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>5.网络解析</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Gson</td>\n<td>一个Java序列化/反序列化库，可以将JSON和java对象互相转换</td>\n</tr>\n<tr>\n<td>Jackson</td>\n<td>Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</td>\n</tr>\n<tr>\n<td>Fastjson</td>\n<td>Java上一个快速的JSON解析器/生成器</td>\n</tr>\n<tr>\n<td>HtmlPaser</td>\n<td>一种用来解析单个独立html或嵌套html的方式</td>\n</tr>\n<tr>\n<td>Jsoup</td>\n<td>一个以最好的DOM，CSS和jQuery解析html的库</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>6.数据库</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OrmLite</td>\n<td>JDBC和Android的轻量级ORM java包</td>\n</tr>\n<tr>\n<td>Sugar</td>\n<td>用超级简单的方法处理Android数据库</td>\n</tr>\n<tr>\n<td>GreenDAO</td>\n<td>一种轻快地将对象映射到SQLite数据库的ORM解决方案</td>\n</tr>\n<tr>\n<td>ActiveAndroid</td>\n<td>以活动记录方式为Android SQLite提供持久化</td>\n</tr>\n<tr>\n<td>SQLBrite</td>\n<td>SQLiteOpenHelper 和ContentResolver的轻量级包装</td>\n</tr>\n<tr>\n<td>Realm</td>\n<td>移动数据库：一个SQLite和ORM的替换品</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>7.依赖注入</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ButterKnife</td>\n<td>将Android视图和回调方法绑定到字段和方法上</td>\n</tr>\n<tr>\n<td>Dagger2</td>\n<td>一个Android和java快速依赖注射器。</td>\n</tr>\n<tr>\n<td>AndroidAnotations</td>\n<td>快速安卓开发。易于维护</td>\n</tr>\n<tr>\n<td>RoboGuice</td>\n<td>Android平台的Google Guice</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>8.图表</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>WilliamChart</td>\n<td>创建图表的Android库</td>\n</tr>\n<tr>\n<td>HelloCharts</td>\n<td>兼容到API8的Android图表库</td>\n</tr>\n<tr>\n<td>MPAndroidChart</td>\n<td>一个强大的Android图表视图/图形库</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>9.后台处理</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Tape</td>\n<td>一个轻快的，事务性的，基于文件的FIFO的库</td>\n</tr>\n<tr>\n<td>Android Priority Job Queue</td>\n<td>一个专门为Android轻松调度任务的工作队列</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>10.事件总线</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>EventBus</td>\n<td>安卓优化的事件总线，简化了活动、片段、线程、服务等的通信</td>\n</tr>\n<tr>\n<td>Otto</td>\n<td>一个基于Guava的增强的事件总线</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>11.响应式编程</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RxJava</td>\n<td>JVM上的响应式扩展</td>\n</tr>\n<tr>\n<td>RxJavaJoins</td>\n<td>为RxJava提供Joins操作</td>\n</tr>\n<tr>\n<td>RxAndroid</td>\n<td>Android上的响应式扩展，在RxJava基础上添加了Android线程调度</td>\n</tr>\n<tr>\n<td>RxBinding</td>\n<td>提供用RxJava绑定Android UI的API</td>\n</tr>\n<tr>\n<td>Agera</td>\n<td>Android上的响应式编程</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>12.Log框架</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logger</td>\n<td>简单，漂亮，强大的Android日志工具</td>\n</tr>\n<tr>\n<td>Hugo</td>\n<td>在调试版本上注解的触发方法进行日志记录</td>\n</tr>\n<tr>\n<td>Timber</td>\n<td>一个小的，可扩展的日志工具</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>13.测试框架</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Mockito</td>\n<td>Java编写的Mocking单元测试框架</td>\n</tr>\n<tr>\n<td>Robotium</td>\n<td>Android UI 测试</td>\n</tr>\n<tr>\n<td>Robolectric</td>\n<td>Android单元测试框架</td>\n</tr>\n<tr>\n<td>Android自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等</td>\n<td></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>14.调试框架</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Stetho</td>\n<td>调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>15.性能优化</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>LeakCanary</td>\n<td>内存泄漏检测工具</td>\n</tr>\n<tr>\n<td>ACRA</td>\n<td>Android应用程序崩溃报告</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hbmRyb2lkY2hpbmEubmV0LzQ5MjAuaHRtbA==\">转自安卓开发中文站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","categories":["Android"],"tags":["框架","图片"]},{"title":"Android开发中的常见错误：Duplicate class","url":"/2023/02/21/Android%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%EF%BC%9ADuplicate-class/","content":"<h2 id=\"android开发Duplicate-class编译出现类重复问题的定位以及解决方法\"><a href=\"#android开发Duplicate-class编译出现类重复问题的定位以及解决方法\" class=\"headerlink\" title=\"android开发Duplicate class编译出现类重复问题的定位以及解决方法\"></a>android开发Duplicate class编译出现类重复问题的定位以及解决方法</h2><blockquote>\n<p>Task :app:checkReleaseDuplicateClasses FAILED</p>\n</blockquote>\n<blockquote>\n<p>Duplicate class com.google.common.util.concurrent.ListenableFuture found in modules jetified-guava-20.0 (com.google.guava:guava:20.0) and jetified-listenablefuture-1.0 (com.google.guava:listenablefuture:1.0)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 解决方法：</span><br><span class=\"line\"></span><br><span class=\"line\">    1. Navigation -&gt; Search Everywhere，勾选Include non-project items进行全局搜索</span><br><span class=\"line\">    2. 比如搜索com.google.guava就可以搜索出所有的有关的依赖库</span><br><span class=\"line\">    3. .&#x2F;gradlew app:dependencies查看找出依赖库之间的关系(在gradle中执行)</span><br><span class=\"line\">    4. 找到有关的依赖库xxx:xx:x</span><br></pre></td></tr></table></figure>\n<pre><code>    implementation(&quot;xxx:xx:x&quot;) &#123;\n        exclude group: &#39;com.google.guava&#39;\n    &#125;\n    或者android配置区域配置全部库排查如下：\n    configurations.all &#123;\n        exclude group: &#39;com.google.guava&#39;, module:&#39;listenablefuture&#39;\n    &#125;\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### zsh: permission denied: .&#x2F;gradlew</span><br></pre></td></tr></table></figure></code></pre>\n<p>运行: chmod +x gradlew<br>```</p>\n","categories":["Android"],"tags":["bug"]},{"title":"Android根据字符串加载Activity和res目录下图片","url":"/2021/01/15/Android%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8A%A0%E8%BD%BDActivity%E5%92%8Cres%E7%9B%AE%E5%BD%95%E4%B8%8B%E5%9B%BE%E7%89%87/","content":"<h3 id=\"根据传入的字符串跳转Activity\"><a href=\"#根据传入的字符串跳转Activity\" class=\"headerlink\" title=\"根据传入的字符串跳转Activity\"></a>根据传入的字符串跳转Activity</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Intent intent &#x3D; new Intent(context,Class.forName(&quot;com.packname.Activity&quot;));</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n<h3 id=\"根据传入的字符加载资源\"><a href=\"#根据传入的字符加载资源\" class=\"headerlink\" title=\"根据传入的字符加载资源\"></a>根据传入的字符加载资源</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">int icon &#x3D; getResources().getIdentifier(“imageid”, &quot;drawable&quot;,getPackageName());</span><br></pre></td></tr></table></figure>\n<p>优化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static int getDrawableId(Context context, String var) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            int imageId &#x3D; context.getResources().getIdentifier(var, &quot;drawable&quot;, context.getPackageName());</span><br><span class=\"line\">            return imageId;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            return 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>getIdentifier的函数签名如下：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public int getIdentifier (String name, String defType, String defPackage)</span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["Android"]},{"title":"Android动态更换APP图标及名称","url":"/2020/01/13/Android%E5%8A%A8%E6%80%81%E6%9B%B4%E6%8D%A2APP%E5%9B%BE%E6%A0%87%E5%8F%8A%E5%90%8D%E7%A7%B0/","content":"<p>实现之前觉得万分难，我查阅了很多博客.<br>报错—–应用未安装<br>Stop，停下来我先抽支烟，喝杯茶，仔细看看别人的介绍。再次感谢这个博主的博客<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L296aHVpbWVuZzEyMy9hcnRpY2xlL2RldGFpbHMvOTI3MzQ4MjU=\">倚栏静望<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n<p><strong>实现的目的和标题一样，动态的实现app的启动图标和应用的名字</strong></p>\n<h3 id=\"下面我先贴出我的重要代码\"><a href=\"#下面我先贴出我的重要代码\" class=\"headerlink\" title=\"下面我先贴出我的重要代码\"></a>下面我先贴出我的重要代码</h3><ul>\n<li>在<em>AndroidManifest.xml</em>文件中添加:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;application</span><br><span class=\"line\">     android:allowBackup&#x3D;&quot;true&quot;</span><br><span class=\"line\">     android:icon&#x3D;&quot;@mipmap&#x2F;ic_launcher&quot;</span><br><span class=\"line\">     android:label&#x3D;&quot;@string&#x2F;app_name&quot;</span><br><span class=\"line\">     android:roundIcon&#x3D;&quot;@mipmap&#x2F;ic_launcher_round&quot;</span><br><span class=\"line\">     android:supportsRtl&#x3D;&quot;true&quot;</span><br><span class=\"line\">     android:theme&#x3D;&quot;@style&#x2F;AppTheme&quot;</span><br><span class=\"line\">     tools:ignore&#x3D;&quot;GoogleAppIndexingWarning&quot;&gt;</span><br><span class=\"line\">     &lt;activity android:name&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">         &lt;intent-filter&gt;</span><br><span class=\"line\">             &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">             &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class=\"line\">         &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">     &lt;&#x2F;activity&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     &lt;activity-alias</span><br><span class=\"line\">         android:name&#x3D;&quot;.mark&quot;</span><br><span class=\"line\">         android:enabled&#x3D;&quot;false&quot;</span><br><span class=\"line\">         android:icon&#x3D;&quot;@mipmap&#x2F;mark_launcher&quot;</span><br><span class=\"line\">         android:label&#x3D;&quot;@string&#x2F;app_name1&quot;</span><br><span class=\"line\">         android:roundIcon&#x3D;&quot;@mipmap&#x2F;mark_launcher_round&quot;</span><br><span class=\"line\">         android:targetActivity&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">         &lt;intent-filter&gt;</span><br><span class=\"line\">             &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class=\"line\">             &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class=\"line\">         &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">     &lt;&#x2F;activity-alias&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     &lt;activity-alias</span><br><span class=\"line\">         android:name&#x3D;&quot;.chyl&quot;</span><br><span class=\"line\">         android:enabled&#x3D;&quot;false&quot;</span><br><span class=\"line\">         android:icon&#x3D;&quot;@mipmap&#x2F;chyl_launcher&quot;</span><br><span class=\"line\">         android:label&#x3D;&quot;@string&#x2F;app_name2&quot;</span><br><span class=\"line\">         android:roundIcon&#x3D;&quot;@mipmap&#x2F;chyl_launcher_round&quot;</span><br><span class=\"line\">         android:targetActivity&#x3D;&quot;.MainActivity&quot;&gt;</span><br><span class=\"line\">         &lt;intent-filter&gt;</span><br><span class=\"line\">             &lt;action android:name&#x3D;&quot;android.intent.action.MAIN&quot; &#x2F;&gt;</span><br><span class=\"line\">             &lt;category android:name&#x3D;&quot;android.intent.category.LAUNCHER&quot; &#x2F;&gt;</span><br><span class=\"line\">         &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">     &lt;&#x2F;activity-alias&gt;</span><br><span class=\"line\"> &lt;&#x2F;application&gt;</span><br></pre></td></tr></table></figure></li>\n<li>在 MainActivity中编写切换代码：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">   * &#x3D;1、第一图标状态 &#x3D;2 第二图标状态 &#x3D;3、不换图标</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">  fun changeAppName(tag: Int) &#123;</span><br><span class=\"line\">      val mark_tag &#x3D; &quot;com.cares.appicon.mark&quot;</span><br><span class=\"line\">      val chyl_tag &#x3D; &quot;com.cares.appicon.chyl&quot;</span><br><span class=\"line\">      </span><br><span class=\"line\">      val pm: PackageManager &#x3D; packageManager</span><br><span class=\"line\"></span><br><span class=\"line\">      when (tag) &#123;</span><br><span class=\"line\">          1 -&gt; &#123;</span><br><span class=\"line\">              &#x2F;&#x2F;取消掉默认的应用icon</span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  componentName, PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\">              &#x2F;&#x2F;然后执行</span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  ComponentName(</span><br><span class=\"line\">                      baseContext,</span><br><span class=\"line\">                      mark_tag</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          2 -&gt; &#123;</span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  ComponentName(baseContext, mark_tag),</span><br><span class=\"line\">                  PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  ComponentName(</span><br><span class=\"line\">                      baseContext,</span><br><span class=\"line\">                      packageName + &quot;.MainActivity&quot;</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          3 -&gt; &#123;</span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  componentName, PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\"></span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  ComponentName(</span><br><span class=\"line\">                      baseContext,</span><br><span class=\"line\">                      chyl_tag</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\"></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          4 -&gt; &#123;</span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  ComponentName(baseContext, chyl_tag),</span><br><span class=\"line\">                  PackageManager.COMPONENT_ENABLED_STATE_DISABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\">              pm.setComponentEnabledSetting(</span><br><span class=\"line\">                  ComponentName(</span><br><span class=\"line\">                      baseContext,</span><br><span class=\"line\">                      packageName + &quot;.MainActivity&quot;</span><br><span class=\"line\">                  ),</span><br><span class=\"line\">                  PackageManager.COMPONENT_ENABLED_STATE_ENABLED,</span><br><span class=\"line\">                  PackageManager.DONT_KILL_APP</span><br><span class=\"line\">              )</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解释下里面的重要词：\"><a href=\"#解释下里面的重要词：\" class=\"headerlink\" title=\"解释下里面的重要词：\"></a>解释下里面的重要词：</h3>activity-alias功能</li>\n</ul>\n<p>activity-alias作为一个已存在Activity的别名，则应该可以通过该别名标签声明快速打开目标Activity。因此activity-alias可用来设置某个Activity的快捷入口，可以放在桌面上或者通过该别名被其他组件快速调起。该标签元素支持一些属性及intent-filter、meta-data等配置，因此可以触发一些跟目标Activity不同的功能逻辑，虽然打开的是同一个Activity。举个简单的例子，如之前需要先打开主界面，然后才能点击进入某个Activity，如果使用activity-alias为该Activity配置一个快捷入口，甚至可以为其在桌面生成一个图标，然后点击桌面图标可直接进入该Activity，该功能可满足某些需要快速到达功能界面的需求。</p>\n<p>语法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;activity-alias android:enabled&#x3D;[&quot;true&quot; | &quot;false&quot;]</span><br><span class=\"line\">                android:exported&#x3D;[&quot;true&quot; | &quot;false&quot;]</span><br><span class=\"line\">                android:icon&#x3D;&quot;drawable resource&quot;</span><br><span class=\"line\">                android:label&#x3D;&quot;string resource&quot;</span><br><span class=\"line\">                android:name&#x3D;&quot;string&quot;</span><br><span class=\"line\">                android:permission&#x3D;&quot;string&quot;</span><br><span class=\"line\">                android:targetActivity&#x3D;&quot;string&quot; &gt;</span><br><span class=\"line\">    . . .</span><br><span class=\"line\">&lt;&#x2F;activity-alias&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>android:enable<br>该属性用来决定目标Activity可否通过别名被系统实例化，默认为true。需要注意的是application也有enable属性，只用当它们同时为true时，activity-alias的enable才生效。</li>\n<li>android:exported<br>该属性为true的话，则目标Activity可被其他应用调起，如为false则只能被应用自身调起。其默认值根据activity-alias是否包含intent-filter元素决定，如果有的话，则默认为true；没有的话则为false。其实也很好理解，如果有intent-filter，则目标Activity可以匹配隐式Intent，因此可被外部应用唤起；如果没有intent-filter，则目标Activity要被调起的话必须知道其精确类名，因为只有应用本身才知道精确类名，所以此时默认为false。</li>\n<li>android:icon<br>该属性就比较好玩了，允许自定义icon，可以不同于应用本身在桌面的icon。如果需要在桌面上创建快捷入口，也许产品会要求换个不同的icon。</li>\n<li>android:label<br>该属性类似于android:icon，图标都换了，换个名称也合情合理吧，此属性就是为此而生的。</li>\n<li>android:name<br>该属性可以为任意字符串，但最好符合类名命名规范。activity元素的name属性实质上都会指向一个具体的Activity类，而activity-alias的name属性仅作为一个唯一标识而已。</li>\n<li>android:permission<br>该属性指明了通过别名声明调起目标Activity所必需的权限。</li>\n<li>android:targetActivity<br>该属性指定了目标Activity，即通过activity-alias调起的Activity是哪个，此属性其实类似于activity标签中的name属性，需要规范的Activity包名类名。</li>\n</ul>\n","categories":["Android"],"tags":["Android"]},{"title":"Android消息传递机制总结(五)","url":"/2020/10/19/Android%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93-%E4%BA%94/","content":"<p>长连接推送 ——— WebSocket，XMPP等。</p>\n<h3 id=\"5-长连接推送\"><a href=\"#5-长连接推送\" class=\"headerlink\" title=\"5.长连接推送\"></a>5.长连接推送</h3><p>Websocket<br>支持客户端和服务器端的双向通信，而且协议的头部又没有HTTP的Header那么大，于是，Websocket就诞生了！</p>\n<span id=\"more\"></span>\n\n<p>Websocket是应用层第七层上的一个应用层协议，它必须依赖 HTTP 协议进行一次握手 ，握手成功后，数据就直接从 TCP 通道传输，与 HTTP 无关了。</p>\n<p>Websocket的数据传输是frame形式传输的，比如会将一条消息分为几个frame，按照先后顺序传输出去。这样做会有几个好处：</p>\n<p>1 大数据的传输可以分片传输，不用考虑到数据大小导致的长度标志位不足够的情况。</p>\n<p>2 和http的chunk一样，可以边生成数据边传递消息，即提高传输效率。</p>\n<p>XMPP中定义了三个角色，客户端，服务器，网关。通信能够在这三者的任意两个之间双向发生。服务器同时承担了客户端信息记录，连接管理和信息的路由功能。网关承担着与异构即时通信系统的互联互通，异构系统可以包括SMS（短信），MSN，ICQ等。基本的网络形式是单客户端通过TCP/IP连接到单服务器，然后在之上传输XML。</p>\n<p>QQ是使用类似XMPP协议的UDP协议进行发送和接收消息的。当你的机器安装了QQ以后，实际上，你既是服务端（Server），又是客户端（Client）。当你登录QQ时，你的QQ作为Client连接到腾讯公司的主服务器上，当你看谁在线时，你的QQ又一次作为Client从QQ Server上读取在线网友名单。当你和你的QQ伙伴进行聊天时，如果你和对方的连接比较稳定，你和他的聊天内容都是以UDP的形式，在计算机之间传 送。如果你和对方的连接不是很稳定，QQ服务器将为你们的聊天内容进行中转。其他的即时通信软件原理与此大同小异。</p>\n<p>所以基于WebSocke和XMPP都可以开发出IM社交聊天类的app</p>\n","categories":["Android"],"tags":["消息通信"]},{"title":"Android事件分发机制完全解,从源码的角度分析理解","url":"/2020/12/30/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6%E5%AE%8C%E5%85%A8%E8%A7%A3-%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9A%84%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90%E7%90%86%E8%A7%A3/","content":"","categories":["Android"],"tags":["基础理论"]},{"title":"Android消息传递机制总结(三)","url":"/2020/10/10/Android%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93%E4%B8%89/","content":"<p>第三方通信 ——— EventBus，rxBus</p>\n<h3 id=\"3-第三方通信\"><a href=\"#3-第三方通信\" class=\"headerlink\" title=\"3. 第三方通信\"></a>3. 第三方通信</h3><p>EventBus主要角色:</p>\n<blockquote>\n<p>Event 传递的事件对象<br> Subscriber  事件的订阅者<br> Publisher  事件的发布者<br> ThreadMode 定义函数在何种线程中执行</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>定义一个事件类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class DataEvent &#123;</span><br><span class=\"line\">    private int count;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getCount() &#123;</span><br><span class=\"line\">        return count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void setCount(int count) &#123;</span><br><span class=\"line\">        this.count &#x3D; count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;订阅</span><br><span class=\"line\"></span><br><span class=\"line\">EventBus.getDefault().register(this);&#x2F;&#x2F;订阅</span><br><span class=\"line\"></span><br><span class=\"line\"> &#x2F;&#x2F;解除订阅</span><br><span class=\"line\"></span><br><span class=\"line\">EventBus.getDefault().unregister(this);&#x2F;&#x2F;解除订阅</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;发布事件</span><br><span class=\"line\"></span><br><span class=\"line\">EventBus.getDefault().post(new DataEvent());</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;订阅事件处理</span><br><span class=\"line\"></span><br><span class=\"line\">    @Subscribe(threadMode &#x3D; ThreadMode.MAIN) &#x2F;&#x2F;在ui线程执行</span><br><span class=\"line\">    public void onDataEvent(DataEvent event) &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;event----&gt;&quot; + event.getCount());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ThreadMode总共四个：\"><a href=\"#ThreadMode总共四个：\" class=\"headerlink\" title=\"ThreadMode总共四个：\"></a>ThreadMode总共四个：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">NAIN UI主线程</span><br><span class=\"line\">BACKGROUND 后台线程</span><br><span class=\"line\">POSTING 和发布者处在同一个线程</span><br><span class=\"line\">ASYNC 异步线程</span><br></pre></td></tr></table></figure>\n<h4 id=\"事件的优先级类似广播的优先级，优先级越高优先获得消息\"><a href=\"#事件的优先级类似广播的优先级，优先级越高优先获得消息\" class=\"headerlink\" title=\"事件的优先级类似广播的优先级，优先级越高优先获得消息\"></a>事件的优先级类似广播的优先级，优先级越高优先获得消息</h4> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Subscribe(threadMode &#x3D; ThreadMode.MAIN,priority &#x3D; 100) &#x2F;&#x2F;在ui线程执行 优先级100</span><br><span class=\"line\">   public void onDataEvent(DataEvent event) &#123;</span><br><span class=\"line\">       Log.e(TAG, &quot;event----&gt;&quot; + event.getCount());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"终止事件往下传递\"><a href=\"#终止事件往下传递\" class=\"headerlink\" title=\"终止事件往下传递\"></a>终止事件往下传递</h4><p>发送有序广播可以终止广播的继续往下传递，EventBus也实现了此功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().cancelEventDelivery(event) ;&#x2F;&#x2F;优先级高的订阅者可以终止事件往下传递</span><br></pre></td></tr></table></figure>\n<h4 id=\"EventBus黏性事件\"><a href=\"#EventBus黏性事件\" class=\"headerlink\" title=\"EventBus黏性事件\"></a>EventBus黏性事件</h4><p>何为黏性事件呢？简单讲，就是在发送事件之后再订阅该事件也能收到该事件，跟黏性广播类似。</p>\n<p>本身粘性广播用的就比较少，为了方便理解成订阅在发布事件之后，但同样可以收到事件。订阅/解除订阅和普通事件一样，但是处理订阅函数有所不同，需要注解中添加sticky = true</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  @Subscribe(threadMode &#x3D; ThreadMode.MAIN,sticky &#x3D; true) &#x2F;&#x2F;在ui线程执行</span><br><span class=\"line\">    public void onDataEvent(DataEvent event) &#123;</span><br><span class=\"line\">        Log.e(TAG, &quot;event----&gt;&quot; + event.getCount());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;发送粘性事件</span><br><span class=\"line\"></span><br><span class=\"line\">  EventBus.getDefault().postSticky(new DataEvent());</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;对于粘性广播我们都比较清楚属于常驻广播，对于EventBus粘性事件也类似，我们如果不再需要该粘性事件我们可以移除</span><br><span class=\"line\"></span><br><span class=\"line\">  EventBus.getDefault().removeStickyEvent(new DataEvent());</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;或者调用移除所有粘性事件</span><br><span class=\"line\"></span><br><span class=\"line\">  EventBus.getDefault().removeAllStickyEvents();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>RXBus：如果项目中用了rxjava的话可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FuZHJvaWRLbmlmZS9SeEJ1cw==\">https://github.com/AndroidKnife/RxBus<i class=\"fa fa-external-link-alt\"></i></span> 自己封装一个。</p>\n<h3 id=\"下一章长链接推送\"><a href=\"#下一章长链接推送\" class=\"headerlink\" title=\"下一章长链接推送\"></a><span class=\"exturl\" data-url=\"aHR0cDovL21hcmtjaHlsLmNuLzIwMjAvMTAvMTIvQW5kcm9pZCVFNiVCNiU4OCVFNiU4MSVBRiVFNCVCQyVBMCVFOSU4MCU5MiVFNiU5QyVCQSVFNSU4OCVCNiVFNiU4MCVCQiVFNyVCQiU5My0lRTUlOUIlOUIv\">下一章长链接推送<i class=\"fa fa-external-link-alt\"></i></span></h3>","categories":["Android"],"tags":["消息通信"]},{"title":"Android消息传递机制总结(二)","url":"/2020/10/10/Android%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93%E4%BA%8C/","content":"<p>组件间通信 ——— BroadcastReceiver，接口回调等。</p>\n<h3 id=\"2-组件间通信\"><a href=\"#2-组件间通信\" class=\"headerlink\" title=\"2.组件间通信\"></a>2.组件间通信</h3><p>BroadcastReceiver广播就不再介绍， 广播传递本身是有安全隐患的，需要设置权限，每一个Activity都要定义、注册，解注册广播无形中加大了工作量和维护成本。已经不适应用在组件间通信。</p>\n<span id=\"more\"></span>\n<p>接口回调： 和观察者模式大致一样。<br>实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class DataSynManager &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;监听集合</span><br><span class=\"line\">    private LinkedList&lt;IDataSynListener&gt; autoListeners &#x3D; new LinkedList&lt;&gt;();</span><br><span class=\"line\">    &#x2F;&#x2F;单例引用</span><br><span class=\"line\">    private static DataSynManager mInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 获取单例引用</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public static DataSynManager getInstance() &#123;</span><br><span class=\"line\">        if (mInstance &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            synchronized (DataSynManager.class) &#123;</span><br><span class=\"line\">                if (mInstance &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                    mInstance &#x3D; new DataSynManager();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return mInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 添加同步数据监听</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param listener</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public void registerDataSynListener(IDataSynListener listener) &#123;</span><br><span class=\"line\">        if (autoListeners &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            autoListeners &#x3D; new LinkedList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (!autoListeners.contains(listener)) &#123;</span><br><span class=\"line\">            autoListeners.add(listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 移除同步数据监听</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param listener</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public void unRegisterSynListener(IDataSynListener listener) &#123;</span><br><span class=\"line\">        if (autoListeners &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if (autoListeners.contains(listener)) &#123;</span><br><span class=\"line\">            autoListeners.remove(listener);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 执行数据同步</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param count</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public void doDataSyn(final int count) &#123;</span><br><span class=\"line\">        if (autoListeners &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">            autoListeners &#x3D; new LinkedList&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        new Handler().post(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                for (IDataSynListener dataSynListener :</span><br><span class=\"line\">                        autoListeners) &#123;</span><br><span class=\"line\">                    dataSynListener.onDataSyn(count);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * 清除所有监听者</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    public void release() &#123;</span><br><span class=\"line\">        if (autoListeners !&#x3D; null) &#123;</span><br><span class=\"line\">            autoListeners.clear();</span><br><span class=\"line\">            autoListeners &#x3D; null;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public interface IDataSynListener &#123;</span><br><span class=\"line\">        void onDataSyn(int count);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;添加监听</span><br><span class=\"line\">DataSynManager.getInstance().registerDataSynListener(dataSynListener);</span><br><span class=\"line\">&#x2F;&#x2F;移除监听</span><br><span class=\"line\">DataSynManager.getInstance().unRegisterDataSynListener(dataSynListener&#x2F;&#x2F;个监听);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">DataSynManager.IDataSynListener dataSynListener&#x3D;new DataSynManager.IDataSynListener() &#123;</span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public void onDataSyn(int count) &#123;</span><br><span class=\"line\">            &#x2F;&#x2F;接下来执行同步操作</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;;</span><br><span class=\"line\">&#x2F;&#x2F;发送事件</span><br><span class=\"line\">DataSynManager.getInstance().doDa(5);</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21hcmtjaHlsLmNuLzIwMjAvMTAvMTAvQW5kcm9pZCVFNiVCNiU4OCVFNiU4MSVBRiVFNCVCQyVBMCVFOSU4MCU5MiVFNiU5QyVCQSVFNSU4OCVCNiVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCOCU4OS8=\">3. 第三方通信 ——— EventBus，rxBus<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["消息通信"]},{"title":"Android消息传递机制总结(一)","url":"/2020/10/09/Android%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93(%E4%B8%80%EF%BC%89/","content":"<h4 id=\"安卓业务层的核心灵魂就是层层的消息传递，今天就来总结一下andorid的应用层的各种消息传递。\"><a href=\"#安卓业务层的核心灵魂就是层层的消息传递，今天就来总结一下andorid的应用层的各种消息传递。\" class=\"headerlink\" title=\"安卓业务层的核心灵魂就是层层的消息传递，今天就来总结一下andorid的应用层的各种消息传递。\"></a>安卓业务层的核心灵魂就是层层的消息传递，今天就来总结一下andorid的应用层的各种消息传递。</h4><p>1.线程间通讯 ——— Handler，HandlerThread等。<br>2.组件间通信 ——— BroadcastReceiver，接口回调等。<br>3. 第三方通信 ——— EventBus，rxBus<br>4.进程间通信 ——— Content Provider ，Broadcast ，AIDL等。<br>5.长连接推送 ——— WebSocket，XMPP等。</p>\n<h3 id=\"1-线程间通信\"><a href=\"#1-线程间通信\" class=\"headerlink\" title=\"1.线程间通信\"></a>1.线程间通信</h3><p>Android通过Handler消息机制来实现线程之间的通讯。</p>\n<span id=\"more\"></span>\n\n<h4 id=\"Handler机制主要角色\"><a href=\"#Handler机制主要角色\" class=\"headerlink\" title=\"Handler机制主要角色\"></a>Handler机制主要角色</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Message：消息，其中包含了消息ID，消息处理对象以及处理的数据等，由MessageQueue统一列队，终由Handler处理。 </span><br><span class=\"line\">Handler：处理者，负责Message的发送及处理。使用Handler时，需要实现handleMessage(Message msg)方法来对特定的Message进行处理，例如更新UI等。 </span><br><span class=\"line\">MessageQueue：消息队列，用来存放Handler发送过来的消息，并按照FIFO规则执行。当然，存放Message并非实际意义的保存，而是将Message以链表的方式串联起来的，等待Looper的抽取。 </span><br><span class=\"line\">Looper：消息泵，不断地从MessageQueue中抽取Message执行。因此，一个MessageQueue需要一个Looper。</span><br><span class=\"line\">Thread：线程，负责调度整个消息循环，即消息循环的执行场所。</span><br></pre></td></tr></table></figure>\n<h4 id=\"Handler机制主要运用\"><a href=\"#Handler机制主要运用\" class=\"headerlink\" title=\"Handler机制主要运用\"></a>Handler机制主要运用</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sendEmptyMessage(int);&#x2F;&#x2F;发送一个空的消息</span><br><span class=\"line\">sendMessage(Message);&#x2F;&#x2F;发送消息，消息中可以携带参数</span><br><span class=\"line\">sendMessageAtTime(Message, long);&#x2F;&#x2F;未来某一时间点发送消息</span><br><span class=\"line\">sendMessageDelayed(Message, long);&#x2F;&#x2F;延时Nms发送消息</span><br><span class=\"line\"></span><br><span class=\"line\">post(Runnable);&#x2F;&#x2F;提交计划任务马上执行</span><br><span class=\"line\">postAtTime(Runnable, long);&#x2F;&#x2F;提交计划任务在未来的时间点执行</span><br><span class=\"line\">postDelayed(Runnable, long);&#x2F;&#x2F;提交计划任务延时Nms执行</span><br></pre></td></tr></table></figure>\n<h4 id=\"主进程定义Handler\"><a href=\"#主进程定义Handler\" class=\"headerlink\" title=\"主进程定义Handler\"></a>主进程定义Handler</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private Handler mHandler &#x3D; new Handler() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">       public void handleMessage(@NonNull Message msg) &#123;</span><br><span class=\"line\">           super.handleMessage(msg);</span><br><span class=\"line\">           switch (msg.what) &#123;</span><br><span class=\"line\">               case 0:</span><br><span class=\"line\">                   &#x2F;&#x2F;完成主界面更新,拿到数据</span><br><span class=\"line\">                   String data &#x3D; (String) msg.obj;</span><br><span class=\"line\">                   tvTest.setText(data);</span><br><span class=\"line\">                   break;</span><br><span class=\"line\">               default:</span><br><span class=\"line\">                   break;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"子线程执行耗时操作然后发消息，通知Handler完成UI更新\"><a href=\"#子线程执行耗时操作然后发消息，通知Handler完成UI更新\" class=\"headerlink\" title=\"子线程执行耗时操作然后发消息，通知Handler完成UI更新\"></a>子线程执行耗时操作然后发消息，通知Handler完成UI更新</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">private void getDataFromNet() &#123;</span><br><span class=\"line\">        new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">              &#x2F;&#x2F;需要数据传递，用下面方法；</span><br><span class=\"line\">                Message msg &#x3D; new Message();</span><br><span class=\"line\">                msg.obj &#x3D; &quot;网络数据&quot;;&#x2F;&#x2F;可以是基本类型，可以是对象，可以是List、map等；</span><br><span class=\"line\">                mHandler.sendMessage(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>Handler机制扩展：</p>\n<p>Activity.runOnUiThread(Runnable)<br>View.post(Runnable)<br>以上也可以从子线程切换到主线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">runOnUiThread(new Runnable() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void run() &#123;</span><br><span class=\"line\">               tvTest2.setText(&quot;runOnUiThread&quot;);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"HandlerThread：\"><a href=\"#HandlerThread：\" class=\"headerlink\" title=\"HandlerThread：\"></a>HandlerThread：</h4><p>HandlerThread本质上就是一个普通Thread,只不过内部建立了Looper.<br>HandlerThread用法实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;创建一个线程,线程名字：handler-thread</span><br><span class=\"line\">       mHThread &#x3D; new HandlerThread(&quot;handler-thread&quot;);</span><br><span class=\"line\">       &#x2F;&#x2F;开启一个线程</span><br><span class=\"line\">       mHThread.start();</span><br><span class=\"line\">       &#x2F;&#x2F;在这个线程中创建一个handler对象 主要这个handler是在子线程中循环接受消息的</span><br><span class=\"line\">       handler &#x3D; new Handler(mHThread.getLooper()) &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void handleMessage(@NonNull Message msg) &#123;</span><br><span class=\"line\">               super.handleMessage(msg);</span><br><span class=\"line\">               &#x2F;&#x2F;这个方法是运行在 handler-thread 线程中的 ，可以执行耗时操作</span><br><span class=\"line\">               Log.d(&quot;handler &quot;, &quot;消息： &quot; + msg.what + &quot;  线程： &quot; + Thread.currentThread().getName());</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;&#x2F;在主线程给handler发送消息</span><br><span class=\"line\">       handler.sendEmptyMessage(1);</span><br><span class=\"line\"></span><br><span class=\"line\">       new Thread(new Runnable() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void run() &#123;</span><br><span class=\"line\">               &#x2F;&#x2F;在子线程给handler发送数据</span><br><span class=\"line\">               handler.sendEmptyMessage(2);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">       @Override</span><br><span class=\"line\">   protected void onDestroy() &#123;</span><br><span class=\"line\">       super.onDestroy();</span><br><span class=\"line\">       &#x2F;&#x2F;释放资源</span><br><span class=\"line\">       mHThread.quit();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Looper的quit方法或quitSafely方法\"><a href=\"#Looper的quit方法或quitSafely方法\" class=\"headerlink\" title=\"Looper的quit方法或quitSafely方法\"></a>Looper的quit方法或quitSafely方法</h4><p>相同点：<br>将不在接受新的事件加入消息队列。</p>\n<p>不同点<br>当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。</p>\n<p>当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。</p>\n<p>无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。</p>\n<p>需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。</p>\n<p>我在直播推流中应用了HandlerThread，每编码组装出来一帧视频就发送一个handler消息，然后HandlerThread线程接收消息数据并用libRtmp推倒服务器。此时可以监控队列中有多少消息在循环，可以监听进出队列的比例，如果超出一定的范围说明网络不好，需要执行丢帧策略。</p>\n<h3 id=\"Handler-面试八问\"><a href=\"#Handler-面试八问\" class=\"headerlink\" title=\"Handler 面试八问\"></a>Handler 面试八问</h3><ul>\n<li><p>为什么主线程不会因为 <code>Looper.loop()</code> 里的循环卡死？</p>\n<blockquote>\n<p>主线程确实是通过<code>Looper.loop()</code> 进入了循环状态，因为这样主线程才不会像我们一般创建的线程一样，当可执行代码执行完后，线程生命周期就终止了。<br>  在主线程的<code>MessageQueue</code> 没有消息时，便阻塞在<code>MeqsageQueue.next()</code> 中的<code>nativePollOnce()</code>方法里，此时主线程会释放 <code>CPU</code>资源进入休眠状态，直到新消息达到。所以主线程大多数时候都是处于休眠状态，并不会消耗大量<code>CPU</code>资源。<br>  这里采用的<code>linux</code>的<code>epoll</code> 机制，是一种 <code>IO</code> 多路复用机制，可以同时监控多个文件描述符，当某个文件描述符就绪(读或写就绪)，则立刻通知相应程序进行读或写操作拿到最新的消息，进而唤醒等待的线程。</p>\n</blockquote>\n</li>\n<li><p><code>post</code>和<code>sendMessage</code>两类发送消息的方法有什么区别?</p>\n<blockquote>\n<p><code>post</code>一类的方法发送的是 <code>Runnable</code>对象，但是其最后还是会被封装成<code>Message</code> 对象，将<code>Runnable</code> 对象赋值给 <code>Message</code> 对象中的<code>callback</code>变量，然后交由 <code>sendMessageAtTime() </code>方法发送出去。在处理消息时，会在<code>dispatchMessage()</code>方法里首先被<code>handleCallback(msg)</code>方法执行，实际上就是执行 <code>Message</code> 对象里面的 <code>Runnable</code> 对象的run 方法。<br>  而<code>sendMessage</code> 一类的方法发送的直接是<code>Message</code>对象，处理消息时，在 <code>dispatchMessage</code>里优先级会低于<code>handleCallback(msg)</code>方法，是通过自己重写的<code>handleMessage(msg)</code> 方法执行。</p>\n</blockquote>\n</li>\n<li><p>为什么要通过 <code>Message.obtain()</code> 方法获取 Message 对象?</p>\n<blockquote>\n<p><code>obtain </code>方法可以从全局消息池中得到一个空的<code> Message</code>对象，这样可以有效节省系统资源。同时，通过各种<code>obtain</code>重载方法还可以得到一些<code>Message</code>的拷贝，或对<code>Message</code>对象进行一些初始化。</p>\n</blockquote>\n</li>\n<li><p>Handler实现发送延迟消息的原理是什么?</p>\n<blockquote>\n<p>我们常用<code>postDelayed()</code>与<code>sendMessageDelayed()</code> 来发送延迟消息，其实最终都是将延迟时间转为确定时间，然后通过<code>sendMessageAtTime()</code> -&gt; <code>enqueueMessage</code> -&gt;<br>  <code>queue.enqueueMessage</code>这一系列方法将消息插入到<code>MessageQueue</code>中。所以并不是先延迟再发送消息，而是直接发送消息，再借助<code>MessageQueue</code>的设计来实现消息的延迟处理。<br>  消息延迟处理的原理涉及<code>MessageQueue</code>的两个静态方法 <code>MessageQueue.next()</code>和<br>  <code>MessageQueue.enqueueMessage()</code>。通过<code>Native</code>方法阻塞线程一定时间，等到消息的执行时间到后再取出消息执行。</p>\n</blockquote>\n</li>\n<li><p>同步屏障 <code>SyncBarrier</code>是什么?有什么作用?</p>\n<blockquote>\n<p>在一般情况下，同步和异步消息处理起来没有什么不同。只有在设置了同步屏障后才会有差异。同步屏障从代码层面上看是一个<code>Message</code> 对象，但是其<code>target</code>属性为<code>null</code>，用以区分普通消息。在<code>MessageQueue.next()</code>中如果当前消息是一个同步屏障，则跳过后面所有的同步消息，找到第一个异步消息来处理。<br>  但是开发者调用不了。在<code>ViewRootlmpl</code>的UI测绘流程有体现</p>\n</blockquote>\n</li>\n<li><p><code>IdleHandler</code> 是什么?有什么作用?</p>\n<blockquote>\n<p>当消息队列没有消息时调用或者如果队列中仍有待处理的消息，但都未到执行时间时，也会调用此方法。用以监听主线程空闲状态。</p>\n</blockquote>\n</li>\n<li><p>为什么非静态类的<code>Handler</code>导致内存泄漏?如何解决?</p>\n<blockquote>\n<p>首先，非静态的内部类、匿名内部类、局部内部类都会隐式的持有其外部类的引用。也就是说在 <code>Activity</code>中创建的,Handler会因此持有<code>Activity</code>的引用。<br>  当我们在主线程使用<code>Handler</code>的时候，Handler会默认绑定这个线程的<code>Looper</code>对象，并关联其<code>MessageQueue，Handler</code>发出的所有消息都会加入到这个<code>MessageQueue</code>中。<code>Looper</code>对象的生命周期贯穿整个主线程的生命周期，所以当Looper对象中的MessageQueue里还有未处理完的<code> Message</code>时，因为每个<code>Message</code>都持有<code>Handler</code>的引用，所以<code>Handler</code>无法被回收，自然其持有引用的外部类<code>Activity</code>也无法回收，造成泄漏。<br>  <strong>使用静态内部类+弱引用的方式</strong></p>\n</blockquote>\n</li>\n<li><p>如何让在子线程中弹出toast</p>\n<blockquote>\n<p>调用<code>Looper.prepare</code>以及<code>Looperloop()</code>，但是切记线程任务执行完，需要手动调用<code>Looper.quitSafely()</code>否则线程不会结束。</p>\n</blockquote>\n</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL21hcmtjaHlsLmNuLzIwMjAvMTAvMTAvQW5kcm9pZCVFNiVCNiU4OCVFNiU4MSVBRiVFNCVCQyVBMCVFOSU4MCU5MiVFNiU5QyVCQSVFNSU4OCVCNiVFNiU4MCVCQiVFNyVCQiU5MyVFNCVCQSU4Qy8=\">下一章: 组件间通信<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["消息通信"]},{"title":"Android混淆","url":"/2020/11/07/Android%E6%B7%B7%E6%B7%86/","content":"<blockquote>\n<p>代码混淆（Obfuscated code）亦称花指令，是将计算机程序的代码，转换成一种功能上等价，但是难于阅读和理解的形式的行为。</p>\n</blockquote>\n<blockquote>\n<p>为什么要加代码混淆?<br>不想开源应用，为了加大反编译的成本,但是并不能彻底防止反编译</p>\n</blockquote>\n<h3 id=\"开启混淆\"><a href=\"#开启混淆\" class=\"headerlink\" title=\"开启混淆\"></a>开启混淆</h3><ul>\n<li>通常我们需要找到项目路径下app目录下的build.gradle文件</li>\n<li>找到minifyEnabled这个配置,然后设置为true即可.<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">release&#123;</span><br><span class=\"line\">           minifyEnabled true&#x2F;&#x2F;是否启动混淆 ture:打开   false:关闭</span><br><span class=\"line\">           proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\nproguard-rules.pro文件的作用</li>\n<li>只要在工程应用目录的gradle文件中设置minifyEnabled:true即可。然后我们就可以到proguard-rules.pro文件中加入我们的混淆规则了<span id=\"more\"></span>\n<h3 id=\"proguard是什么\"><a href=\"#proguard是什么\" class=\"headerlink\" title=\"proguard是什么?\"></a>proguard是什么?</h3></li>\n<li>Proguard是一个集文件压缩,优化,混淆和校验等功能的工具</li>\n<li>它检测并删除无用的类,变量,方法和属性</li>\n<li>它优化字节码并删除无用的指令.</li>\n<li>它通过将类名,变量名和方法名重命名为无意义的名称实现混淆效果.</li>\n<li>最后它还校验处理后的代码</li>\n</ul>\n<h3 id=\"混淆的常见配置\"><a href=\"#混淆的常见配置\" class=\"headerlink\" title=\"混淆的常见配置\"></a>混淆的常见配置</h3><ul>\n<li>Proguard关键字</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Proguard关键字</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dontwarn</td>\n<td>dontwarn是一个和keep可以说是形影不离,尤其是处理引入的library时.</td>\n</tr>\n<tr>\n<td>keep</td>\n<td>保留类和类中的成员，防止被混淆或移除</td>\n</tr>\n<tr>\n<td>keepnames</td>\n<td>保留类和类中的成员，防止被混淆，成员没有被引用会被移除</td>\n</tr>\n<tr>\n<td>keepclassmembers</td>\n<td>只保留类中的成员，防止被混淆或移除</td>\n</tr>\n<tr>\n<td>keepclassmembernames</td>\n<td>只保留类中的成员，防止被混淆，成员没有引用会被移除</td>\n</tr>\n<tr>\n<td>keepclasseswithmembers</td>\n<td>保留类和类中的成员，防止被混淆或移除，保留指明的成员</td>\n</tr>\n<tr>\n<td>keepclasseswithmembernames</td>\n<td>保留类和类中的成员，防止被混淆，保留指明的成员，成员没有引用会被移除</td>\n</tr>\n</tbody></table>\n<p>如：<br>(1)保留某个包下面的类以及子包<br><code>-keep public class com.droidyue.com.widget.**</code></p>\n<p>(2)保留所有类中使用otto的public方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Otto</span><br><span class=\"line\">-keepclassmembers class ** &#123;</span><br><span class=\"line\">    @com.squareup.otto.Subscribe public *;</span><br><span class=\"line\">    @com.squareup.otto.Produce public *;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(3)保留Contants类的BOOK_NAME属性</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">-keepclassmembers class com.example.admin.proguardsample.Constants &#123;</span><br><span class=\"line\">     public static java.lang.String BOOK_NAME;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>(4)dontwarn：<br>引入的library可能存在一些无法找到的引用和其他问题,在build时可能会发出警告,如果我们不进行处理,通常会导致build中止.因此为了保证build继续,我们需要使用dontwarn处理这些我们无法解决的library的警告.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#比如关闭Twitter sdk的警告,我们可以这样做</span><br><span class=\"line\">-dontwarn com.twitter.sdk.**</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Proguard通配符</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Proguard通配符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&lt;field&gt;</code></td>\n<td>匹配类中的所有字段</td>\n</tr>\n<tr>\n<td><code>&lt;method&gt;</code></td>\n<td>匹配类中所有的方法</td>\n</tr>\n<tr>\n<td><code>&lt;init&gt;</code></td>\n<td>匹配类中所有的构造函数</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配任意长度字符，不包含包名分隔符(.)</td>\n</tr>\n<tr>\n<td>**</td>\n<td>匹配任意长度字符，包含包名分隔符(.)</td>\n</tr>\n<tr>\n<td>***</td>\n<td>匹配任意参数类型</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n","categories":["Android"],"tags":["混淆"]},{"title":"Android面试知识点汇总（一）","url":"/2021/09/06/Android%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<h3 id=\"一、Activity启动模式\"><a href=\"#一、Activity启动模式\" class=\"headerlink\" title=\"一、Activity启动模式\"></a>一、Activity启动模式</h3><ul>\n<li>1、standard 标准模式</li>\n<li>2、singleTop 栈顶复用模式 （例如：推送点击消息页面）</li>\n<li>3、singleTask 栈内复用模式 （例如： 首页）</li>\n<li>4、singleInstance 单例模式 （单独位于一个任务栈中，例如：拨打电话页面）</li>\n<li><ol start=\"5\">\n<li>singleInstancePerTask android12的时候新加入</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"二、序列化-Serializable-和-Parcelable\"><a href=\"#二、序列化-Serializable-和-Parcelable\" class=\"headerlink\" title=\"二、序列化 Serializable 和 Parcelable\"></a>二、序列化 Serializable 和 Parcelable</h3><ul>\n<li>Serializable： Java 序列化方式，适用于存储和网络传输，serializableUID 用于确定反序列化和类版本是否一致，不一致时反序列化失败</li>\n<li>Parcelable: Android 序列化方式，适用于组件通信数据传输，性能高</li>\n</ul>\n<p>Java中的序列化方式Serializable效率比较低，重要是以下原因：</p>\n<ul>\n<li>1、Serializable在序列化过程中会创建大量的临时变量，这样会造成大量的GC</li>\n<li>2、Serializable使用了大量的反射，而反射操作耗时</li>\n<li>3、Serializable使用了大量的IO操作，也影响耗时</li>\n</ul>\n<p>所以Android重新设计了一种序列化的方式，结合Binder的方式，对上述三点进行了优化，一定程度上提高了序列化和返序列化的效率。</p>\n<h3 id=\"三、进程知识点\"><a href=\"#三、进程知识点\" class=\"headerlink\" title=\"三、进程知识点\"></a>三、进程知识点</h3><h4 id=\"IPC进程通信\"><a href=\"#IPC进程通信\" class=\"headerlink\" title=\"IPC进程通信\"></a><strong>IPC进程通信</strong></h4><ul>\n<li>Intent、Bundle：要求传输数据能被序列化，实现 Parcelable、 Serializable，适用于四大组件通信</li>\n<li>文件共享：适用于交换简单的数据实时性不高的场景</li>\n<li>AIDL：AIDL 接口实质上是系统提供给我们可以方便实现Binder的工具</li>\n<li>Messenger：基于 AIDL 实现，服务端的串行处理，主要用于传递消息，适用于低并发一对多的通信</li>\n<li>ContentProvider： 基于 Binder 实现，适用于一对多的进程间的数据共享。（通讯录、短信等）</li>\n<li>Socket：TCP、UDP，适用于网络数据交换</li>\n</ul>\n<h4 id=\"进程保活\"><a href=\"#进程保活\" class=\"headerlink\" title=\"进程保活\"></a><strong>进程保活</strong></h4><p>  进程被杀的原因：</p>\n<ul>\n<li><p>切换到后台内存不足时被杀</p>\n</li>\n<li><p>切换到后台厂商省电机制杀死</p>\n</li>\n<li><p>用户主动清理</p>\n<p>保活方式：</p>\n</li>\n<li><p>1、 Activity提权：挂一个 1像素 Activity将进程优先级提高到前台进程</p>\n</li>\n<li><p>2、 Service提权： 启动一个前台服务，（API&gt;18会有正在运行的通知栏）</p>\n</li>\n<li><p>3、 广播拉活。（监听 开机 等系统广播）</p>\n</li>\n<li><p>4、 Service拉活</p>\n</li>\n<li><p>5、 JobScheduler 定时任务拉活。（Android 高版本不行）</p>\n</li>\n<li><p>6、 双进程保活</p>\n</li>\n<li><p>7、 监听其他大厂广播 （如tx baidu 全家桶互相拉活）</p>\n</li>\n</ul>\n<h3 id=\"4、内存泄露\"><a href=\"#4、内存泄露\" class=\"headerlink\" title=\"4、内存泄露\"></a>4、内存泄露</h3><ul>\n<li>构造单列的时候尽量别用Activity的引用；</li>\n<li>静态引用时注意应用对象的置空或者少用静态引用；</li>\n<li>使用静态内部类+软引用代替非静态内部类；</li>\n<li>即使取消广播或者观察者注册、耗时任务、属性动画在Activity销毁时记得cancel；</li>\n<li>文件流、Cursor等资源操作即使关闭；</li>\n<li>Activity销毁时WebView的移除和销毁。</li>\n</ul>\n<h3 id=\"5、Android进程间的通信\"><a href=\"#5、Android进程间的通信\" class=\"headerlink\" title=\"5、Android进程间的通信\"></a>5、Android进程间的通信</h3><ul>\n<li>bundle：由于Activity、service、receiver都是可以通过 Intent 来携带Bundle数据传输的，所以我们在一个进程中通过Intent将携带数据的Bundle发送到另一个进程的组件；（bundle只能传输三种数据类型，一是键值对的形式，二是键为String的类型，三是值为Parcelable类型）</li>\n<li>ContentProvider： contentprovicer是安卓四大组件之一，以表格 的形式来存储数据，提供给外界，及ContentProvider 可以跨进程访问其他应用程序中的数据。</li>\n<li>文件：两个进程可以到同一个文件去交流数据，我们不仅可以保存文本文件，还可以将对象持久化到文件中，从另一个文件恢复。要注意的是，当并发读/写时可能出现并发的问题。</li>\n<li>Broadcast：Broadcast可以想Android系统中所有的应用程序发送广播，需要跨进程通信的应用程序可以监听这些广播。</li>\n<li>AIDL： AIDL通过定义服务端暴露的接口，以提供给客户端来通用，AIDL使用服务器可以并行处理。</li>\n<li>Messenger：Messenger封装了AIDL之后只能串行运行，所以Messenger一般作用消息传递</li>\n<li>Socket：</li>\n</ul>\n<h3 id=\"6、Android-线程通信\"><a href=\"#6、Android-线程通信\" class=\"headerlink\" title=\"6、Android 线程通信\"></a>6、Android 线程通信</h3><blockquote>\n<p>Handler 和 AsyncTask （AsyncTask：异步任务，内部封装了Handler）</p>\n</blockquote>\n<p>Handler线程间通信<br>作用：</p>\n<blockquote>\n<p>线程之间的消息通信</p>\n</blockquote>\n<p>流程：</p>\n<blockquote>\n<p>主线程默认实现了Looper （调用loop.prepare方法 向sThreadLocal中set一个新的looper对象， looper构造方法中又创建了MsgQueue） 手动创建Handler ，调用 sendMessage 或者 post (runable) 发送Message 到 msgQueue ，如果没有Msg 这添加到表头，有数据则判断when时间 循环next 放到合适的 msg的next 后。Looper.loop不断轮训Msg，将msg取出 并分发到Handler 或者 post提交的 Runable 中处理，并重置Msg 状态位。回到主线程中 重写 Handler 的 handlerMessage 回调的msg 进行主线程绘制逻辑。</p>\n</blockquote>\n<p>问题：</p>\n<p>1、Handler 同步屏障机制：通过发送异步消息，在msg.next 中会优先处理异步消息，达到优先级的作用。</p>\n<p>2、Looper.loop 为什么不会卡死：为了app不挂掉，就要保证主线程一直运行存在，使用死循环代码阻塞在msgQueue.next()中的nativePollOnce()方法里 ，主线程就会挂起休眠释放cpu，线程就不会退出。Looper死循环之前，在ActivityThread.main()中就会创建一个 Binder 线程（ApplicationThread），接收系统服务AMS发送来的事件。当系统有消息产生（其实系统每 16ms 会发送一个刷新 UI 消息唤醒）会通过epoll机制 向pipe管道写端写入数据 就会发送消息给 looper 接收到消息后处理事件，保证主线程的一直存活。只有在主线程中处理超时才会让app崩溃 也就是ANR。</p>\n<p>3、Messaage复用：将使用完的Message清除附带的数据后, 添加到复用池中 ,当我们需要使用它时,直接在复用池中取出对象使用,而不需要重新new创建对象。复用池本质还是Message 为node 的单链表结构。所以推荐使用Message.obation获取 对象。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZHlDRW5zZFVvLUFHaHFlQ3pOMEU1dw==\">剩余链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["面试"],"tags":["面试"]},{"title":"Android消息传递机制总结(四)","url":"/2020/10/12/Android%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93-%E5%9B%9B/","content":"<p>进程间通信 ——— Content Provider ，Broadcast ，AIDL等。</p>\n<h3 id=\"4-进程间通信\"><a href=\"#4-进程间通信\" class=\"headerlink\" title=\"4.进程间通信\"></a>4.进程间通信</h3><h4 id=\"Content-Provider\"><a href=\"#Content-Provider\" class=\"headerlink\" title=\"Content Provider\"></a>Content Provider</h4><p>Android应用程序可以使用文件或SqlLite数据库来存储数据。Content Provider提供了一种在多个应用程序之间数据共享的方式（跨进程共享数据）。应用程序可以利用Content Provider完成下面的工作</p>\n<ol>\n<li>查询数据</li>\n<li>修改数据</li>\n<li>添加数据</li>\n<li>删除数据<span id=\"more\"></span>\n虽然Content Provider也可以在同一个应用程序中被访问，但这么做并没有什么意义。Content Provider存在的目的向其他应用程序共享数据和允许其他应用程序对数据进行增、删、改操作。<br>Android系统本身提供了很多Content Provider，例如，音频、视频、联系人信息等等。我们可以通过这些Content Provider获得相关信息的列表。这些列表数据将以Cursor对象返回。因此，从Content Provider返回的数据是二维表的形式。<h4 id=\"广播（Broadcast）\"><a href=\"#广播（Broadcast）\" class=\"headerlink\" title=\"广播（Broadcast）\"></a>广播（Broadcast）</h4>广播是一种被动跨进程通讯的方式。当某个程序向系统发送广播时，其他的应用程序只能被动地接收广播数据。这就象电台进行广播一样，听众只能被动地收听，而不能主动与电台进行沟通。<br>在应用程序中发送广播比较简单。只需要调用sendBroadcast方法即可。该方法需要一个Intent对象。通过Intent对象可以发送需要广播的数据。<h4 id=\"AIDL-Service\"><a href=\"#AIDL-Service\" class=\"headerlink\" title=\"AIDL Service\"></a>AIDL Service</h4>这是我个人比较推崇的方式，因为它相比Broadcast而言，虽然实现上稍微麻烦了一点，但是它的优势就是不会像广播那样在手机中的广播较多时会有明显的时延，甚至有广播发送不成功的情况出现。<br>注意普通的Service并不能实现跨进程操作，实际上普通的Service和它所在的应用处于同一个进程中，而且它也不会专门开一条新的线程，因此如果在普通的Service中实现在耗时的任务，需要新开线程。<br>要实现跨进程通信，需要借助AIDL(Android Interface Definition Language)。Android中的跨进程服务其实是采用C/S的架构，因而AIDL的目的就是实现通信接口。<br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wL2QxZmFjNmNjZWU5OA==\">AIDL具体使用可参考<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ol>\n<h3 id=\"什么是AIDL？\"><a href=\"#什么是AIDL？\" class=\"headerlink\" title=\"什么是AIDL？\"></a>什么是AIDL？</h3><p>AIDL:Android Interface Definition Language,即Android接口定义语言。</p>\n<p>Android系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信。为了使其他的应用程序也可以访问本应用程序提供的服务，Android系统采用了远程过程调用（Remote Procedure Call，RPC）方式来实现。与很多其他的基于RPC的解决方案一样，Android使用一种接口定义语言（Interface Definition Language，IDL）来公开服务的接口。我们知道4个Android应用程序组件中的3个（Activity、BroadcastReceiver和ContentProvider）都可以进行跨进程访问，另外一个Android应用程序组件Service同样可以。因此，可以将这种可以跨进程访问的服务称为AIDL（Android Interface Definition Language）服务。</p>\n<h3 id=\"AIDL的使用\"><a href=\"#AIDL的使用\" class=\"headerlink\" title=\"AIDL的使用\"></a>AIDL的使用</h3><p>因为是两个APP交互么，所以当然要两个APP啦，我们在第一个工程目录右键<br><img data-src=\"https://upload-images.jianshu.io/upload_images/2099385-d68440c5786c6047.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/659/format/webp\"><br>输入名称后，sutido就帮我们创建了一个AIDL文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; IMyAidlInterface.aidl</span><br><span class=\"line\">package cc.abto.demo;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Declare any non-default types here with import statements</span><br><span class=\"line\"></span><br><span class=\"line\">interface IMyAidlInterface &#123;</span><br><span class=\"line\">    &#x2F;**</span><br><span class=\"line\">     * Demonstrates some basic types that you can use as parameters</span><br><span class=\"line\">     * and return values in AIDL.</span><br><span class=\"line\">     *&#x2F;</span><br><span class=\"line\">    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,</span><br><span class=\"line\">            double aDouble, String aString);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面就是studio帮我生成的aidl文件。basicTypes这个方法可以无视，看注解知道这个方法只是告诉你在AIDL中你可以使用的基本类型（int, long, boolean, float, double, String），因为这里是要跨进程通讯的，所以不是随便你自己定义的一个类型就可以在AIDL使用的，这些后面会说。我们在AIDL文件中定义一个我们要提供给第二个APP使用的接口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">interface IMyAidlInterface &#123;</span><br><span class=\"line\">   String getName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义好之后，就可以sycn project一下，然后新建一个service。在service里面创建一个内部类，继承你刚才创建的AIDL的名称里的Stub类,并实现接口方法,在onBind返回内部类的实例。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class MyService extends Service</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public MyService()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public IBinder onBind(Intent intent)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return new MyBinder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class MyBinder extends IMyAidlInterface.Stub</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        @Override</span><br><span class=\"line\">        public String getName() throws RemoteException</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            return &quot;test&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，将我们的AIDL文件拷贝到第二个项目，然后sycn project一下工程。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/2099385-585fbc5fb15906e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/314/format/webp\"><br><strong>这边的包名要跟第一个项目的一样哦，这之后在Activity中绑定服务。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private IMyAidlInterface iMyAidlInterface;</span><br><span class=\"line\">    ServiceConnection conn;</span><br><span class=\"line\">    private static final String TAG &#x3D; &quot;MainActivity&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Intent intent &#x3D; new Intent();</span><br><span class=\"line\">        intent.setAction(&quot;com.mark.aidldemo1&quot;);</span><br><span class=\"line\">        intent.setPackage(&quot;com.mark.aidldemo1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        conn &#x3D; new ServiceConnection() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onServiceConnected(ComponentName name, IBinder service) &#123;</span><br><span class=\"line\">                iMyAidlInterface &#x3D; IMyAidlInterface.Stub.asInterface(service);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onServiceDisconnected(ComponentName name) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        bindService(intent, conn, BIND_AUTO_CREATE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onStop() &#123;</span><br><span class=\"line\">        unbindService(conn);</span><br><span class=\"line\">        super.onStop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void doTest(View view) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (iMyAidlInterface!&#x3D;null) &#123;</span><br><span class=\"line\">                Toast.makeText(this, iMyAidlInterface.getName(), Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (RemoteException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这边我们通过隐式意图来绑定service，在onServiceConnected方法中通过IMyAidlInterface.Stub.asInterface(service)获取iMyAidlInterface对象，然后在onClick中调用iMyAidlInterface.getName()。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/2099385-0bc46eaf6923f712.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/564/format/webp\"></p>\n<h3 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h3><p>如果我要在AIDL中使用自定义的类型，要怎么做呢。首先我们的自定义类型要实现Parcelable接口，下面的代码中创建了一个User类并实现Parcelable接口。这边就不对Parcelable进行介绍了，不熟悉的童鞋自行查找资料，总之我们这边可以借助studio的Show Intention Action（也就是Eclipse中的Quick Fix，默认是alt+enter键）帮我们快速实现Parcelable接口。<br><img data-src=\"https://upload-images.jianshu.io/upload_images/2099385-575c252bdc2790f1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/615/format/webp\"></p>\n<p>接下新建一个aidl文件，名称为我们自定义类型的名称，这边是User.aidl。在User.aidl申明我们的自定义类型和它的完整包名，注意这边parcelable是小写的，不是Parcelable接口，一个自定类型需要一个这样同名的AIDL文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">package com.mark.aidldemo1;</span><br><span class=\"line\">parcelable User;</span><br></pre></td></tr></table></figure>\n<p>然后再在我们的AIDL接口中导入我们的AIDL类型。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import com.mark.aidldemo1.User;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; Declare any non-default types here with import statements</span><br><span class=\"line\"></span><br><span class=\"line\">interface IMyAidlInterface &#123;</span><br><span class=\"line\">   String getName();</span><br><span class=\"line\">   User getUserName();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后定义接口方法，sycn project后就可以在service中做具体实现了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class MyBinder extends IMyAidlInterface.Stub</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     ........</span><br><span class=\"line\"></span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      public User getUserName() throws RemoteException &#123;</span><br><span class=\"line\">          return new User(&quot;Mark&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>最后将我们的AIDL文件和自定义类型的java一并拷贝到第二个项目，注意包名都要一样哦</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2099385-63e992963f1bd552.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/246/format/webp\"><br>然后就可以在Activity中使用该自定义类型的AIDL接口了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F;...</span><br><span class=\"line\">    public void onClick(View view)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        try</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            Toast.makeText(MainActivity.this, iMyAidlInterface.getUserName().getName(), Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        catch (RemoteException e)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>AIDL只是Android中众多进程间通讯方式中的一种方式,<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbWFya3Nob3cvbXNnLWlwYw==\">我的代码<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"下一章长链接推送\"><a href=\"#下一章长链接推送\" class=\"headerlink\" title=\"下一章长链接推送\"></a><span class=\"exturl\" data-url=\"aHR0cDovL21hcmtjaHlsLmNuLzIwMjAvMTAvMTkvQW5kcm9pZCVFNiVCNiU4OCVFNiU4MSVBRiVFNCVCQyVBMCVFOSU4MCU5MiVFNiU5QyVCQSVFNSU4OCVCNiVFNiU4MCVCQiVFNyVCQiU5My0lRTQlQkElOTQv\">下一章长链接推送<i class=\"fa fa-external-link-alt\"></i></span></h3>","categories":["Android"],"tags":["消息通信","AIDL"]},{"title":"Error:注: 某些输入文件使用或覆盖了已过时的 API。 注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。","url":"/2019/12/12/Error-%E6%B3%A8-%E6%9F%90%E4%BA%9B%E8%BE%93%E5%85%A5%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%88%96%E8%A6%86%E7%9B%96%E4%BA%86%E5%B7%B2%E8%BF%87%E6%97%B6%E7%9A%84-API%E3%80%82-%E6%B3%A8-%E6%9C%89%E5%85%B3%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF-%E8%AF%B7%E4%BD%BF%E7%94%A8-Xlint-deprecation-%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91%E3%80%82/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RvbmcxOTkwMDQxNS9hcnRpY2xlL2RldGFpbHMvNTI4ODI1Mjk/dXRtX3NvdXJjZT1ibG9neGd3ejM=\">原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>Error:注: 某些输入文件使用或覆盖了已过时的 API。<br>注: 有关详细信息, 请使用 -Xlint:deprecation 重新编译。<br>注: 某些输入文件使用了未经检查或不安全的操作。<br>注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。<br>FAILURE: Build failed with an exception.<br>最近项目出现的一些问题可以在build中加入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    gradle.projectsEvaluated &#123;</span><br><span class=\"line\">        tasks.withType(JavaCompile) &#123;</span><br><span class=\"line\">            options.compilerArgs &lt;&lt; &quot;-Xlint:unchecked&quot; &lt;&lt; &quot;-Xlint:deprecation&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["Error"]},{"title":"Dart的基础知识学习","url":"/2018/12/17/Dart%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/","content":"<h3 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h3><pre><code>    Google和其他地方的开发人员使用Dart为iOS，Android和网络创建高质量，关键任务的应用程序。Dart具有针对客户端开发的功能，非常适合移动和Web应用程序。\n    Dart对于许多现有的开发人员来说都很熟悉，这要归功于它不出异的面向对象和语法。如果您已经了解C ++，C＃或Java，那么只需几天就可以使用Dart。\n    Dart编译为ARM和x86代码，因此Dart移动应用程序可以在iOS，Android及更高版本上本机运行。对于Web应用程序，Dart会转换为JavaScript。\n    Dart提供优化的提前编译，以在移动设备和Web上实现可预测的高性能和快速启动。</code></pre>\n<hr>\n <span id=\"more\"></span>\n<h3 id=\"工具：\"><a href=\"#工具：\" class=\"headerlink\" title=\"工具：\"></a>工具：</h3><p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEB2e99b7c66fa25ec939b46b986618bc0e?method=download&shareKey=6e3cd2073bc556b731b1d3a68a1c6acf\" alt=\"https://note.youdao.com/yws/api/personal/file/WEB2e99b7c66fa25ec939b46b986618bc0e?method=download&amp;shareKey=6e3cd2073bc556b731b1d3a68a1c6acf\"></p>\n<h5 id=\"无需安装就可以验证编译代码运行。\"><a href=\"#无需安装就可以验证编译代码运行。\" class=\"headerlink\" title=\"无需安装就可以验证编译代码运行。\"></a>无需安装就可以验证编译代码运行。</h5><p>DartPad是一种很好的，无需下载的方法来学习Dart语法和试验Dart语言功能。它支持Dart的核心库，但dart：io等VM库除外。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXJ0cGFkLmRhcnRsYW5nLm9yZy8=\">链接<i class=\"fa fa-external-link-alt\"></i></span><br>IDE和编辑器<br>这些常用的IDE存在Dart插件。<br><img data-src=\"https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1105042996,1878674339&fm=58&bpow=496&bpoh=405\"><br> Android Studio<br> <img data-src=\"https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=330314814,3181569317&fm=58&bpow=310&bpoh=270\" alt=\"3aaf76a25ee53fd2b4c50db1cc857576.svg+xml\"><br>  IntelliJ IDEA （和其他JetBrains IDE）<br>  <img data-src=\"http://cms-bucket.nosdn.127.net/catchpic/9/9a/9aa087361923a8896e8c0f5f6dd22b05.jpg?imageView&thumbnail=550x0\"><br>   Visual Studio代码</p>\n<hr>\n<h3 id=\"HelloWorld：\"><a href=\"#HelloWorld：\" class=\"headerlink\" title=\"HelloWorld：\"></a>HelloWorld：</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">void main() &#123;</span><br><span class=\"line\">  print(&#39;Hello, World!&#39;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><pre><code>    未初始化的变量默认值是 null。即使变量是数字 类型默认值也是 null，因为在 Dart 中一切都是对象，数字类型 也不例外</code></pre>\n","categories":["Flutter"],"tags":["Flutter"]},{"title":"Charles抓包工具在mac上如何配置","url":"/2019/12/18/Charles%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E5%9C%A8mac%E4%B8%8A%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE/","content":"<h4 id=\"配置：\"><a href=\"#配置：\" class=\"headerlink\" title=\"配置：\"></a>配置：</h4><ul>\n<li>电脑：MacBook Pro (13-inch, 2017, Two Thunderbolt 3 ports)</li>\n<li>手机：安卓手机4.4版本（是定制的）</li>\n<li>Charles版本：v4.5.5</li>\n<li>手机与macbook需要连接同一网段的网络，macbook可以是有线，手机连wifi，也可以两者连接同一个wifi。</li>\n</ul>\n<hr>\n<h3 id=\"第一、电脑上安装Charles\"><a href=\"#第一、电脑上安装Charles\" class=\"headerlink\" title=\"第一、电脑上安装Charles\"></a>第一、电脑上安装Charles</h3><p>官网下载安装：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS9kb3dubG9hZC8=\">官网地址<i class=\"fa fa-external-link-alt\"></i></span><br>下载后安装</p>\n<h3 id=\"第二、设置charles代理\"><a href=\"#第二、设置charles代理\" class=\"headerlink\" title=\"第二、设置charles代理\"></a>第二、设置charles代理</h3><p>打开charles/proxy/proxy-settings，设置一个端口号，默认的8888就可以。<br><img data-src=\"../img/accxv-s218u.jpg\"></p>\n<h3 id=\"第三、手机安装charles证书\"><a href=\"#第三、手机安装charles证书\" class=\"headerlink\" title=\"第三、手机安装charles证书\"></a>第三、手机安装charles证书</h3><p>需要安装charles的证书。点击help/SSL proxying</p>\n<p><img data-src=\"../img/aa1g5-ewu90.jpg\"><br>查询macbook的ip地址，并在手机连接的wifi上手动设置代理，代理主机名为ip地址，代理端口号为8888，会弹出一个框，显示的意思是手机上的wify需要设置代理。</p>\n<h3 id=\"第三、手机设置代理\"><a href=\"#第三、手机设置代理\" class=\"headerlink\" title=\"第三、手机设置代理\"></a>第三、手机设置代理</h3><p>查询macbook的ip地址，并在手机连接的wifi上手动设置代理，代理主机名为ip地址，代理端口号为8888，这时候用手机访问网页，charles会弹出下列框，说明charles已经开始对手机抓包了，点击允许。</p>\n<p><img data-src=\"../img/a1evd-z9c3a.jpg\"></p>\n<p>然后在手机浏览器中访问手机<span class=\"exturl\" data-url=\"aHR0cDovL2NoYXJsZXNwcm94eS5jb20vZ2V0c3NsJUVGJUJDJThDJUU1JUFFJTg5JUU4JUEzJTg1JUU1JThEJUIzJUU1JThGJUFGJUVGJUJDJThD\">http://charlesproxy.com/getssl，安装即可，<i class=\"fa fa-external-link-alt\"></i></span><br><img data-src=\"../img/a921v-hyhye.jpg\"></p>\n<p>好了，现在就可以流畅的抓取手机上的各种http/https请求了，想要学习更多charles工具方法.</p>\n<p>本人不做推广，只是供自己即好友参考做的笔记<br>感谢开发员：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC81MGY4NDRjOWJlYWY=\">小小的开发人员<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["工具使用"],"tags":["工具使用"]},{"title":"Error: CocoaPods's specs repository is too out-of-date to satisfy dependencies","url":"/2023/05/30/Error-CocoaPods-s-specs-repository-is-too-out-of-date-to-satisfy-dependencies/","content":"<ol>\n<li>flutter clean</li>\n<li>delete /ios/Pods</li>\n<li>delete /ios/Podfile.lock</li>\n<li>flutter pub get</li>\n<li>from inside ios folder: pod install</li>\n<li>flutter run</li>\n</ol>\n","categories":["Flutter"],"tags":["Error"]},{"title":"FFmpeg 命令使用的自学文档","url":"/2024/12/31/FFmpeg-%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8%E7%9A%84%E8%87%AA%E5%AD%A6%E6%96%87%E6%A1%A3/","content":"<p>以下是关于 FFmpeg 命令使用的自学文档，涵盖了基础命令、常用功能以及示例，适合自学使用。</p>\n<h2 id=\"FFmpeg-简介\"><a href=\"#FFmpeg-简介\" class=\"headerlink\" title=\"FFmpeg 简介\"></a>FFmpeg 简介</h2><blockquote>\n<p>FFmpeg 是一个开源的多媒体处理工具，支持音视频的编解码、转码、复用、解复用、流媒体处理等功能。</p>\n</blockquote>\n<p>官方网站：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mZm1wZWcub3JnLw==\">https://ffmpeg.org<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n\n<h2 id=\"安装-FFmpeg\"><a href=\"#安装-FFmpeg\" class=\"headerlink\" title=\"安装 FFmpeg\"></a>安装 FFmpeg</h2><h3 id=\"1-下载与安装\"><a href=\"#1-下载与安装\" class=\"headerlink\" title=\"1. 下载与安装\"></a>1. 下载与安装</h3><ul>\n<li><p><strong>Windows：</strong></p>\n<ol>\n<li>下载预编译的 FFmpeg 二进制文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mZm1wZWcub3JnL2Rvd25sb2FkLmh0bWw=\">https://ffmpeg.org/download.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>解压后将路径添加到系统环境变量中。</li>\n</ol>\n</li>\n<li><p><strong>Linux：</strong></p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>macOS：</strong></p>\n<p>  使用 Homebrew 安装：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"基本命令格式\"><a href=\"#基本命令格式\" class=\"headerlink\" title=\"基本命令格式\"></a>基本命令格式</h2><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg [全局选项] -i 输入文件 [输出选项] 输出文件</span><br></pre></td></tr></table></figure>\n\n<p><strong>常用参数：</strong></p>\n<pre><code>•    -i：指定输入文件。\n•    -y：覆盖输出文件（如果已存在）。\n•    -t：设置处理的时长。\n•    -ss：设置起始时间（格式：hh:mm:ss）。\n•    -vf：设置视频滤镜。\n•    -af：设置音频滤镜。\n•    -c:v：指定视频编码器。\n•    -c:a：指定音频编码器。\n•    -b:v：设置视频码率。\n•    -b:a：设置音频码率。\n•    -r：设置帧率。\n•    -s：设置视频分辨率（例如 1920x1080）。</code></pre>\n<h3 id=\"常用功能示例\"><a href=\"#常用功能示例\" class=\"headerlink\" title=\"常用功能示例\"></a>常用功能示例</h3><h4 id=\"1-查看文件信息\"><a href=\"#1-查看文件信息\" class=\"headerlink\" title=\"1. 查看文件信息\"></a>1. 查看文件信息</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-视频格式转换\"><a href=\"#2-视频格式转换\" class=\"headerlink\" title=\"2. 视频格式转换\"></a>2. 视频格式转换</h4><p>将 MP4 转为 AVI：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 output.avi</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-裁剪与截取视频\"><a href=\"#3-裁剪与截取视频\" class=\"headerlink\" title=\"3. 裁剪与截取视频\"></a>3. 裁剪与截取视频</h4><p>截取从 00:01:00 开始的 10 秒：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -ss 00:01:00 -t 10 output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-添加水印\"><a href=\"#4-添加水印\" class=\"headerlink\" title=\"4. 添加水印\"></a>4. 添加水印</h4><p>文字水印：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -vf <span class=\"string\">&quot;drawtext=text=&#x27;水印文本&#x27;:x=10:y=10:fontsize=24:fontcolor=white&quot;</span> -c:a copy output.mp4</span><br></pre></td></tr></table></figure>\n\n<p>图片水印（右下角）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -i watermark.png -filter_complex <span class=\"string\">&quot;overlay=W-w-10:H-h-10&quot;</span> -c:a copy output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-提取音频\"><a href=\"#5-提取音频\" class=\"headerlink\" title=\"5. 提取音频\"></a>5. 提取音频</h4><p>从视频中提取音频为 MP3：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -q:a 0 -map a output.mp3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-合并音频与视频\"><a href=\"#6-合并音频与视频\" class=\"headerlink\" title=\"6. 合并音频与视频\"></a>6. 合并音频与视频</h4><p>将音频 audio.mp3 与视频 video.mp4 合并：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i video.mp4 -i audio.mp3 -c:v copy -c:a aac output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-压缩视频\"><a href=\"#7-压缩视频\" class=\"headerlink\" title=\"7. 压缩视频\"></a>7. 压缩视频</h4><p>通过调整视频码率压缩：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -b:v 1000k -b:a 128k output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-改变分辨率\"><a href=\"#8-改变分辨率\" class=\"headerlink\" title=\"8. 改变分辨率\"></a>8. 改变分辨率</h4><p>调整分辨率为 1280x720：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -vf scale=1280:720 output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-改变帧率\"><a href=\"#9-改变帧率\" class=\"headerlink\" title=\"9. 改变帧率\"></a>9. 改变帧率</h4><h4 id=\"设置帧率为-30fps：\"><a href=\"#设置帧率为-30fps：\" class=\"headerlink\" title=\"设置帧率为 30fps：\"></a>设置帧率为 30fps：</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -r 30 output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-视频旋转\"><a href=\"#10-视频旋转\" class=\"headerlink\" title=\"10. 视频旋转\"></a>10. 视频旋转</h4><p>旋转 90 度：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -vf <span class=\"string\">&quot;transpose=1&quot;</span> output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-视频拼接\"><a href=\"#11-视频拼接\" class=\"headerlink\" title=\"11. 视频拼接\"></a>11. 视频拼接</h4><p>多个视频拼接成一个：</p>\n<ol>\n<li>创建一个 file_list.txt 文件：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">file <span class=\"string\">&#x27;video1.mp4&#x27;</span></span><br><span class=\"line\">file <span class=\"string\">&#x27;video2.mp4&#x27;</span></span><br><span class=\"line\">file <span class=\"string\">&#x27;video3.mp4&#x27;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>执行命令：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -f concat -safe 0 -i file_list.txt -c copy output.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FFmpeg-滤镜基础\"><a href=\"#FFmpeg-滤镜基础\" class=\"headerlink\" title=\"FFmpeg 滤镜基础\"></a>FFmpeg 滤镜基础</h3><h4 id=\"1-视频滤镜\"><a href=\"#1-视频滤镜\" class=\"headerlink\" title=\"1. 视频滤镜\"></a>1. 视频滤镜</h4><ul>\n<li>scale：调整视频分辨率。</li>\n<li>crop：裁剪视频（crop=width:height:x:y）。</li>\n<li>overlay：叠加图片。</li>\n<li>drawtext：添加文字水印。</li>\n</ul>\n<h4 id=\"2-音频滤镜\"><a href=\"#2-音频滤镜\" class=\"headerlink\" title=\"2. 音频滤镜\"></a>2. 音频滤镜</h4><ul>\n<li>volume：调整音量（volume=2.0 表示音量加倍）。</li>\n<li>aecho：添加回声效果。</li>\n</ul>\n<h3 id=\"进阶技巧\"><a href=\"#进阶技巧\" class=\"headerlink\" title=\"进阶技巧\"></a>进阶技巧</h3><h4 id=\"1-多线程加速\"><a href=\"#1-多线程加速\" class=\"headerlink\" title=\"1. 多线程加速\"></a>1. 多线程加速</h4><p>指定线程数（如 4 个线程）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -threads 4 output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-静音视频\"><a href=\"#2-静音视频\" class=\"headerlink\" title=\"2. 静音视频\"></a>2. 静音视频</h4><p>移除音频：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -an output.mp4</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-处理多路音频\"><a href=\"#3-处理多路音频\" class=\"headerlink\" title=\"3. 处理多路音频\"></a>3. 处理多路音频</h4><p>保留特定音频流（如第一个音轨）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -i input.mp4 -map 0:v -map 0:a:0 output.mp4</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><h4 id=\"1-如何处理错误-Unknown-encoder？\"><a href=\"#1-如何处理错误-Unknown-encoder？\" class=\"headerlink\" title=\"1. 如何处理错误 Unknown encoder？\"></a>1. 如何处理错误 Unknown encoder？</h4><p>安装相关编码器或编译支持对应的格式。</p>\n<h4 id=\"2-输出文件大小为-0？\"><a href=\"#2-输出文件大小为-0？\" class=\"headerlink\" title=\"2. 输出文件大小为 0？\"></a>2. 输出文件大小为 0？</h4><p>检查命令中是否遗漏 -i 或输入路径错误。</p>\n<p>学习资料<br>    •    FFmpeg 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mZm1wZWcub3JnL2RvY3VtZW50YXRpb24uaHRtbA==\">https://ffmpeg.org/documentation.html<i class=\"fa fa-external-link-alt\"></i></span><br>    •    FFmpeg 过滤器指南：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9mZm1wZWcub3JnL2ZmbXBlZy1maWx0ZXJzLmh0bWw=\">https://ffmpeg.org/ffmpeg-filters.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>总结</p>\n<p>FFmpeg 是一款强大的多媒体工具，掌握其常用功能后，可以快速处理音视频内容。本自学文档旨在帮助你快速入门和应用。对于更复杂的场景，建议深入研究官方文档和社区资源！</p>\n","categories":["音视频"],"tags":["FFmpeg"]},{"title":" Description : Could not find the specified file.  Suggestion : Check that the path you have specified is correct.","url":"/2019/12/27/Description-Could-not-find-the-specified-file-Suggestion-Check-that-the-path-you-have-specified-is-correct/","content":"<p>记录下我使用 CornerStone 利用SVN 进行版本代码管理。我已经快两个月没提交代码啦，今天一提交发现好多问题，各种报错。<br>譬如这类错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Description : Could not find the specified file.  Suggestion : Check that the path you have specified is correct.   Technical Information &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;        Error : V4FileNotFoundError   Exception : ZSVNNoSuchEntryException  Causal Information </span><br></pre></td></tr></table></figure>\n<p> 解决办法：<br> 我在missing选项中删除错误的就OK了，提交前全选 =&gt;删除，重新手动编辑提交，重新提交前执行一下  clean。</p>\n","categories":["svn"],"tags":["Error"]},{"title":"Flutter如何打包安卓apk包","url":"/2019/11/14/Flutter%E5%A6%82%E4%BD%95%E6%89%93%E5%8C%85%E5%AE%89%E5%8D%93apk%E5%8C%85/","content":"<p>作为安卓原生开发多年的我，也是第一次接触这种方式配置打包信息。原谅我的无知。</p>\n<h3 id=\"一、在项目根目录下新建-key-properties-文件\"><a href=\"#一、在项目根目录下新建-key-properties-文件\" class=\"headerlink\" title=\"一、在项目根目录下新建 key.properties 文件\"></a>一、在项目根目录下新建 key.properties 文件</h3><p>配置签名的基本信息</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">storePassword&#x3D;chenyunlin</span><br><span class=\"line\">keyPassword&#x3D;chenyunlin</span><br><span class=\"line\">keyAlias&#x3D;Mark</span><br><span class=\"line\">storeFile&#x3D;&#x2F;Users&#x2F;mark&#x2F;Desktop&#x2F;Document&#x2F;keyStore&#x2F;MarkKey.jks</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、配置到app目录下的-build-gradle-文件\"><a href=\"#二、配置到app目录下的-build-gradle-文件\" class=\"headerlink\" title=\"二、配置到app目录下的 build.gradle 文件\"></a>二、配置到app目录下的 build.gradle 文件</h3><p>在安卓目录下添加如下配置：导入配置 key.properties 的路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def keystorePropertiesFile &#x3D; rootProject.file(&quot;key.properties&quot;)</span><br><span class=\"line\">def keystoreProperties &#x3D; new Properties()</span><br><span class=\"line\">keystoreProperties.load(new FileInputStream(keystorePropertiesFile))</span><br><span class=\"line\">android&#123;</span><br><span class=\"line\">    ······</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置签名的信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ····</span><br><span class=\"line\">      signingConfigs &#123;</span><br><span class=\"line\">        release &#123;</span><br><span class=\"line\">            keyAlias keystoreProperties[&#39;keyAlias&#39;]</span><br><span class=\"line\">            keyPassword keystoreProperties[&#39;keyPassword&#39;]</span><br><span class=\"line\">            storeFile file(keystoreProperties[&#39;storeFile&#39;])</span><br><span class=\"line\">            storePassword keystoreProperties[&#39;storePassword&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        debug &#123;</span><br><span class=\"line\">            keyAlias keystoreProperties[&#39;keyAlias&#39;]</span><br><span class=\"line\">            keyPassword keystoreProperties[&#39;keyPassword&#39;]</span><br><span class=\"line\">            storeFile file(keystoreProperties[&#39;storeFile&#39;])</span><br><span class=\"line\">            storePassword keystoreProperties[&#39;storePassword&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ····</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样下来安卓的配置信息配置完成。<br>下面修改buildType是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">buildTypes &#123;</span><br><span class=\"line\">       release &#123;</span><br><span class=\"line\">           &#x2F;&#x2F; Signing with the debug keys for now, so &#96;flutter run --release&#96; works.</span><br><span class=\"line\">           signingConfig signingConfigs.release</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       debug &#123;</span><br><span class=\"line\">           &#x2F;&#x2F; Signing with the debug keys for now, so &#96;flutter run --release&#96; works.</span><br><span class=\"line\">           signingConfig signingConfigs.debug</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、切换到Terminal中\"><a href=\"#三、切换到Terminal中\" class=\"headerlink\" title=\"三、切换到Terminal中\"></a>三、切换到Terminal中</h3><p>输入 <code>Flutter build apk</code>,请静待程序运行完成。</p>\n","categories":["Flutter"],"tags":["Flutter"]},{"title":"Flutter解决启动白屏","url":"/2019/11/14/Flutter%E8%A7%A3%E5%86%B3%E5%90%AF%E5%8A%A8%E7%99%BD%E5%B1%8F/","content":"<h3 id=\"为什么启动会出现白屏？\"><a href=\"#为什么启动会出现白屏？\" class=\"headerlink\" title=\"为什么启动会出现白屏？\"></a>为什么启动会出现白屏？</h3><p>由于Android启动的时候要进行一系列初始化，如检查权限，开启进程，绑定application，startActivity。<br>这些初始化会稍微需要一点点时间，比如一秒钟。白屏持续的时间长短当然也和设备有关，设备越差白屏持续时间越长。</p>\n<span id=\"more\"></span>\n<h3 id=\"如何解决？\"><a href=\"#如何解决？\" class=\"headerlink\" title=\"如何解决？\"></a>如何解决？</h3><p>我这里使用第三方的插件进行解决。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wdWIuZmx1dHRlci1pby5jbi9wYWNrYWdlcy9mbHV0dGVyX3NwbGFzaF9zY3JlZW4=\">flutter_splash_screen<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>其使用方法看他的文档。</p>\n<h3 id=\"记录下配置的时候遇到的问题？\"><a href=\"#记录下配置的时候遇到的问题？\" class=\"headerlink\" title=\"记录下配置的时候遇到的问题？\"></a>记录下配置的时候遇到的问题？</h3><p>导包总是报错，先手敲代码，再导包。支持自定义启动布局。<br>安卓的配置步骤多点。<br><strong>下面是我安卓配置：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import org.devio.flutter.splashscreen.SplashScreen;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">public class MainActivity extends FlutterActivity &#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    SplashScreen.show(this, true);&#x2F;&#x2F; here</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\">    GeneratedPluginRegistrant.registerWith(this);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;&#x2F;注册自己的 Plugin 插件</span><br><span class=\"line\">    resisterSelfPlugin();</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>至于额为什么字体显示红色，别紧张，运行没得问题的。<br>其他的配置看官方文档。<br>添加<br><code>launch_screen.xml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;RelativeLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:scaleType&#x3D;&quot;centerCrop&quot;</span><br><span class=\"line\">        android:src&#x3D;&quot;@mipmap&#x2F;screen_full&quot; &#x2F;&gt;</span><br><span class=\"line\">&lt;&#x2F;RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>下面是我 IOS 配置：</strong></p>\n<ul>\n<li>导入启动图片<br><img data-src=\"https://github.com/MarkCHYL/BLOG/blob/master/marksource/images/WechatIMG309.png?raw=true\"></li>\n<li>配置启动图片<br><img data-src=\"https://github.com/MarkCHYL/BLOG/blob/master/marksource/images/WechatIMG310.png?raw=true\"></li>\n</ul>\n","categories":["Flutter"],"tags":["Flutter"]},{"title":"Git使用教程之本地仓库的基本操","url":"/2020/08/17/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B%E4%B9%8B%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D/","content":"<p>Git 的安装就不再次啰嗦了：<br><code>sudo apt-get install git</code></p>\n<h3 id=\"1-创建代码仓库\"><a href=\"#1-创建代码仓库\" class=\"headerlink\" title=\"1.创建代码仓库\"></a>1.创建代码仓库</h3><h4 id=\"Step-1：先配置下身份，这样在提交代码的时候Git就可以知道是谁提交的，命令如下：\"><a href=\"#Step-1：先配置下身份，这样在提交代码的时候Git就可以知道是谁提交的，命令如下：\" class=\"headerlink\" title=\"Step 1：先配置下身份，这样在提交代码的时候Git就可以知道是谁提交的，命令如下：\"></a>Step 1：先配置下身份，这样在提交代码的时候Git就可以知道是谁提交的，命令如下：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;MarkCHYL&quot;</span><br><span class=\"line\">git config --global user.email &quot;2285581945@qq.com&quot;</span><br></pre></td></tr></table></figure>\n<p>检查下配置是否成功：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mark@Markxiansheng blog % git config --global user.name </span><br><span class=\"line\">MarkCHYL</span><br><span class=\"line\">mark@Markxiansheng blog % git config --global user.email</span><br><span class=\"line\">2285581945@qq.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2：找个地方创建我们的代码仓库\"><a href=\"#Step-2：找个地方创建我们的代码仓库\" class=\"headerlink\" title=\"Step 2：找个地方创建我们的代码仓库\"></a>Step 2：找个地方创建我们的代码仓库</h4><blockquote>\n<p>git init</p>\n</blockquote>\n<p>继续输入：ls - al可以看到下目录下有个.git的文件夹就是他了</p>\n<h3 id=\"2-提交本地代码\"><a href=\"#2-提交本地代码\" class=\"headerlink\" title=\"2.提交本地代码\"></a>2.提交本地代码</h3><p>创建完代码仓库，接下来说下如何提交代码.先用add命令把要提交的内容都加进来，然后commit才是真的去执行提交操作!</p>\n<blockquote>\n<p>git add readme.md</p>\n<p>git commit -m “First Commit”</p>\n</blockquote>\n<p>不过如果我们改动的文件很多的话，我们可以<code>git add .</code>一次添加全部.</p>\n<h3 id=\"3-查看修改内容\"><a href=\"#3-查看修改内容\" class=\"headerlink\" title=\"3.查看修改内容\"></a>3.查看修改内容</h3><p>使用<code>git status</code>可以查看 修改的部分<br>但是还没有提交，如果我们想看下具体更改了什么，我们可以用到git diff命令，另外，按Q可以退回命令行输入！</p>\n<h3 id=\"4-查看提交记录\"><a href=\"#4-查看提交记录\" class=\"headerlink\" title=\"4.查看提交记录\"></a>4.查看提交记录</h3><blockquote>\n<p>git log</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">commit 19fb3091a83d7d5cc463fa9df67964ab95a2a404 (HEAD -&gt; master)</span><br><span class=\"line\">Author: MarkCHYL &lt;2285581945@qq.com&gt;</span><br><span class=\"line\">Date:   Mon Aug 17 15:57:11 2020 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    First Commit</span><br></pre></td></tr></table></figure>\n<p>依次是：</p>\n<ul>\n<li>此次提交对应的版本号</li>\n<li>提交人：姓名 邮箱</li>\n<li>提交的时间</li>\n<li>提交版本修改的内容：就是我们commit -m “xxx”里的xxx</li>\n</ul>\n<h3 id=\"5-撤销未提交的修改\"><a href=\"#5-撤销未提交的修改\" class=\"headerlink\" title=\"5.撤销未提交的修改\"></a>5.撤销未提交的修改</h3><p>比如我们刚提交了一个版本，然后又乱七八糟地写了一堆东西，突然发现不小心误删了一些东西，然后ctrl + s保存了，这个时候是不是欲哭无泪，不过有Git，只需一个checkout命令即可撤销更改，当然是你还没add的情况，比如我们在MainActivity里随便添加一条语句，然后ctrl + s保存代码！</p>\n<blockquote>\n<p>git diff<br>会得到输出结果</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">diff --git a&#x2F;readme.md b&#x2F;readme.md</span><br><span class=\"line\">index e69de29..58940c4 100644</span><br><span class=\"line\">--- a&#x2F;readme.md</span><br><span class=\"line\">+++ b&#x2F;readme.md</span><br><span class=\"line\">@@ -0,0 +1 @@</span><br><span class=\"line\">+鄙人日常笔记记录</span><br><span class=\"line\">\\ No newline at end of file</span><br></pre></td></tr></table></figure>\n<p>这里可以看到我们改的内容，我们可以回去把这句代码删掉，但是如果改的有上千行你怎么改， 于是乎这个时候我们可以使用</p>\n<blockquote>\n<p>git checkout git checkout /Users/mark/Desktop/Document/blog/readme.md</p>\n</blockquote>\n<p>当然，如果我们已经add了的话，那么checkout是没任何作用的，我们要先取消添加才可以撤回提交，使用下述指令：</p>\n<blockquote>\n<p>git reset HEAD /Users/mark/Desktop/Document/blog/readme.md</p>\n</blockquote>\n<blockquote>\n<p>git checkout /Users/mark/Desktop/Document/blog/readme.md</p>\n</blockquote>\n<h3 id=\"6-版本回退\"><a href=\"#6-版本回退\" class=\"headerlink\" title=\"6.版本回退\"></a>6.版本回退</h3><p>第五点我们教了大家撤销未提交的修改，但加入提交了，我们想回退到之前的某一个版本怎么办? 第四点中我们可以通过git log查看我们的提交记录，我们需要从这里获取一个版本号， 一般我们只需要前七位字符就够了；另外在Git中，用HEAD代表当前版本，上一个版本就是HEAD^， 再上一个版本就是HEAD^^依次类推！我们先Git Log看下版本历史先！</p>\n<p>我们回到前一个提交的版本吧，依次键入下述指令：</p>\n<blockquote>\n<p>git reset –hard HEAD</p>\n<p>git reset –hard HEAD^</p>\n<p>git log</p>\n</blockquote>\n<p> 可以看到我们已经回退到了前一个版本了，当然你可以直接这样写：</p>\n<blockquote>\n<p>git reset –hard ad2080c</p>\n</blockquote>\n<p> 就是这么简单！回退后，你突然后悔了，想回退回新的那个版本， 可是遗憾的是，你键入git log却发现没有了最新的那个版本号，这怎么办呢… 没事，Git中给你提供了这颗”后悔药”，Git记录着你输入的每一条指令呢！键入：</p>\n<blockquote>\n<p>git reflog</p>\n</blockquote>\n<p> 你会发现，版本号就在这里：<br> 然后执行：</p>\n<blockquote>\n<p>git reset –hard ad2080c</p>\n</blockquote>\n","categories":["工具使用"],"tags":["工具使用"]},{"title":"Glide添加请求头","url":"/2020/08/31/Glide%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B4/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hNDI1YjVjYTg5ZGQ=\">原文来自<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GlideUrl glideUrl &#x3D; new GlideUrl(url, new Headers() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public Map&lt;String, String&gt; getHeaders() &#123;</span><br><span class=\"line\">               Map&lt;String, String&gt; header &#x3D; new HashMap&lt;&gt;();</span><br><span class=\"line\">               &#x2F;&#x2F;不一定都要添加，具体看原站的请求信息</span><br><span class=\"line\">               header.put(&quot;Referer&quot;, &quot;http:&#x2F;&#x2F;www.baidu.com&quot;);</span><br><span class=\"line\">               return header;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      Glide.with(context).load(url).into(imageView);</span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["Android","工具使用"]},{"title":"GreenDao数据库框架的基础学习","url":"/2018/12/17/GreenDao%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/","content":"<p>GreenDao很早就想看看了，最近由于业务需求的变化，我就开始学习下简单的增、删、改、查。</p>\n<hr>\n<h2 id=\"资料参考：\"><a href=\"#资料参考：\" class=\"headerlink\" title=\"资料参考：\"></a>资料参考：</h2><ul>\n<li>首先这是官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dyZWVucm9ib3QvZ3JlZW5kYW8=\">https://github.com/greenrobot/greendao<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>参考博客为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2p0YWlnd2gvcC82Mzk0Mjg4Lmh0bWw=\">https://www.cnblogs.com/wjtaigwh/p/6394288.html<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>慕课网上的视频教程（有点老了，个人觉得）</li>\n</ul>\n<hr>\n<span id=\"more\"></span>\n<h3 id=\"一、咱们先来学习下GreenDao的Api属性：\"><a href=\"#一、咱们先来学习下GreenDao的Api属性：\" class=\"headerlink\" title=\"一、咱们先来学习下GreenDao的Api属性：\"></a>一、咱们先来学习下GreenDao的Api属性：</h3><blockquote>\n<p><strong>GreenDao是使用ORM（Object RelationShop Mapping）对象关系映射，就是通过GreenDao将数据库和Bean关联起来有以下优点：</strong></p>\n</blockquote>\n<ul>\n<li>存取速度快</li>\n<li>支持数据库加密</li>\n<li>轻量级</li>\n<li>激活实体</li>\n<li>支持缓存</li>\n<li>代码自动生成<h3 id=\"二、代码的接入配置\"><a href=\"#二、代码的接入配置\" class=\"headerlink\" title=\"二、代码的接入配置\"></a>二、代码的接入配置</h3><ul>\n<li>app项目目录下build文件中添加<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">apply plugin: &#39;org.greenrobot.greendao&#39;</span><br><span class=\"line\">Android&#123;</span><br><span class=\"line\">   &#x2F;&#x2F;greendao配置</span><br><span class=\"line\">    greendao&#123;</span><br><span class=\"line\">       &#x2F;&#x2F;版本号，升级时可配置</span><br><span class=\"line\">       schemaVersion 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation &#39;org.greenrobot:greendao:3.2.2&#39; &#x2F;&#x2F; add library</span><br><span class=\"line\">    implementation &#39;org.greenrobot:greendao-generator:3.2.2&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>在更目录中build文件中需要添加<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">   classpath &#39;org.greenrobot:greendao-gradle-plugin:3.2.2&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"预览效果：\"><a href=\"#预览效果：\" class=\"headerlink\" title=\"预览效果：\"></a>预览效果：</h4></li>\n</ul>\n<p><img data-src=\"https://user-gold-cdn.xitu.io/2018/8/9/1651c88d14c0e067?w=1036&h=1598&f=png&s=492342\" title=\"是不是很丑\"></p>\n<ul>\n<li><h3 id=\"Bean-对象注释的解释\"><a href=\"#Bean-对象注释的解释\" class=\"headerlink\" title=\"Bean 对象注释的解释\"></a>Bean 对象注释的解释</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Entity：告诉GreenDao该对象为实体，只有被@Entity注释的Bean类才能被dao类操作</span><br><span class=\"line\">@Id：对象的Id，使用Long类型作为EntityId，否则会报错。(autoincrement &#x3D; true)表示主键会自增，如果false就会使用旧值</span><br><span class=\"line\">@Property：可以自定义字段名，注意外键不能使用该属性</span><br><span class=\"line\">@NotNull：属性不能为空</span><br><span class=\"line\">@Transient：使用该注释的属性不会被存入数据库的字段中</span><br><span class=\"line\">@Unique：该属性值必须在数据库中是唯一值</span><br><span class=\"line\">@Generated：编译后自动生成的构造函数、方法等的注释，提示构造函数、方法等不能被修改</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"在Application中初始化自己的数据库\"><a href=\"#在Application中初始化自己的数据库\" class=\"headerlink\" title=\"在Application中初始化自己的数据库\"></a>在Application中初始化自己的数据库</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 配置数据库</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">private void setupDatabase() &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;创建数据库shop.db</span><br><span class=\"line\">    DaoMaster.DevOpenHelper helper &#x3D; new DaoMaster.DevOpenHelper(this,&quot;shop.db&quot;,null);</span><br><span class=\"line\">    &#x2F;&#x2F;获取可写数据库</span><br><span class=\"line\">    SQLiteDatabase db &#x3D; helper.getWritableDatabase();</span><br><span class=\"line\">    &#x2F;&#x2F;获取数据库对象</span><br><span class=\"line\">    DaoMaster daoMaster &#x3D; new DaoMaster(db);</span><br><span class=\"line\">    &#x2F;&#x2F;获取dao对象管理者</span><br><span class=\"line\">    daoSession &#x3D; daoMaster.newSession();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public static DaoSession getDaoInstant()&#123;</span><br><span class=\"line\">    return daoSession;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><h3 id=\"在使用前我们海的封装一个数据库的操作类，提供简单的Shop对象的增删该查的简单方法\"><a href=\"#在使用前我们海的封装一个数据库的操作类，提供简单的Shop对象的增删该查的简单方法\" class=\"headerlink\" title=\"在使用前我们海的封装一个数据库的操作类，提供简单的Shop对象的增删该查的简单方法\"></a>在使用前我们海的封装一个数据库的操作类，提供简单的Shop对象的增删该查的简单方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* 使用GreenDao 实现简单的增删改查，下面是基本方法</span><br><span class=\"line\">  * 增加单个数据</span><br><span class=\"line\">* getShopDao().insert(shop);</span><br><span class=\"line\">* getShopDao().insertOrReplace(shop);</span><br><span class=\"line\">* 增加多个数据</span><br><span class=\"line\">* getShopDao().insertInTx(shopList);</span><br><span class=\"line\">* getShopDao().insertOrReplaceInTx(shopList);</span><br><span class=\"line\">* 查询全部</span><br><span class=\"line\">* List&lt; Shop&gt; list &#x3D; getShopDao().loadAll();</span><br><span class=\"line\">* List&lt; Shop&gt; list &#x3D; getShopDao().queryBuilder().list();</span><br><span class=\"line\">* 查询附加单个条件</span><br><span class=\"line\">* .where()</span><br><span class=\"line\">* .whereOr()</span><br><span class=\"line\">* 查询附加多个条件</span><br><span class=\"line\">* .where(, , ,)</span><br><span class=\"line\">* .whereOr(, , ,)</span><br><span class=\"line\">* 查询附加排序</span><br><span class=\"line\">* .orderDesc()</span><br><span class=\"line\">* .orderAsc()</span><br><span class=\"line\">* 查询限制当页个数</span><br><span class=\"line\">* .limit()</span><br><span class=\"line\">* 查询总个数</span><br><span class=\"line\">* .count()</span><br><span class=\"line\">* 修改单个数据</span><br><span class=\"line\">* getShopDao().update(shop);</span><br><span class=\"line\">* 修改多个数据</span><br><span class=\"line\">* getShopDao().updateInTx(shopList);</span><br><span class=\"line\">* 删除单个数据</span><br><span class=\"line\">* getTABUserDao().delete(user);</span><br><span class=\"line\">* 删除多个数据</span><br><span class=\"line\">* getUserDao().deleteInTx(userList);</span><br><span class=\"line\">* 删除数据ByKey</span><br><span class=\"line\">* getTABUserDao().deleteByKey();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong><strong><em>我的代码和网上大佬的一样，其实就是自己平时封装的工具类！累。。。。。<br>那么那么久</em></strong></strong></p>\n<p>最后附上自己的练习代码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RpbmcubmV0L3UvTWFya19DaGVuL3AvTWFya0dyZWVuRGFvRGVtby9naXQ=\">Coding<i class=\"fa fa-external-link-alt\"></i></span><br>在大佬的基础上学习就是快！！！</p>\n<p>大佬的博客为：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS93anRhaWd3aC8=\">http://www.cnblogs.com/wjtaigwh/<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["Android","数据库"]},{"title":"Hexo yilia 主题添加 widgetpack 评论系统","url":"/2019/07/21/Hexo-yilia-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0-widgetpack-%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><hr>\n<blockquote>\n<p>记得这周都在忙着给我的博客添加评论功能，脑子都懵逼啦！开始起初是想利用GitHub的gitment和gittalk进行集成，按照的网上的套路也弄了，总是报错，对于我只是安卓原生的小码农来说，我完全抓瞎。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p><strong>下面的分析来自</strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dhbnpoaWxpbjUyMC9hcnRpY2xlL2RldGFpbHMvNzkwNDgwMTA=\">阿甘的博客<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>目前博客站点使用的评论功能，多说，网易云跟贴都已经下线。Disqus也被挡在墙外，友言貌似也不行。</p>\n<p>可用的评论系统大概有：  </p>\n<ul>\n<li><p>HyperComments：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHlwZXJjb21tZW50cy5jb20v\">https://www.hypercomments.com<i class=\"fa fa-external-link-alt\"></i></span> （来自俄罗斯的评论系统，使用谷歌账号注册。可以访问，不会用，好气，，）</p>\n</li>\n<li><p>来必力：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXZlcmUuY29tLw==\">https://livere.com<i class=\"fa fa-external-link-alt\"></i></span> （来自韩国，使用邮箱注册。）</p>\n</li>\n<li><p>畅言： <span class=\"exturl\" data-url=\"aHR0cDovL2NoYW5neWFuLmt1YWl6aGFuLmNvbS8=\">http://changyan.kuaizhan.com<i class=\"fa fa-external-link-alt\"></i></span> （安装需要备案号。不太好用。）</p>\n</li>\n<li><p>Gitment： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ltc3VuL2dpdG1lbnQ=\">https://github.com/imsun/gitment<i class=\"fa fa-external-link-alt\"></i></span> （有点小bug，比如说每次需要手动初始化，登录时会跳到主页。。）</p>\n</li>\n<li><p>Valine: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hDc3MvVmFsaW5l\">https://github.com/xCss/Valine<i class=\"fa fa-external-link-alt\"></i></span> (基于Leancloud的极简风评论系统，用了下，没效果，是我Next主题的原因还是？）</p>\n</li>\n</ul>\n<p>综上，我开始采用了来必力。<br>**可能是来必力来自韩国，我没调查资料，是看上面的文字时韩国的瞎说的，功能我到是实现了，界面渲染有点卡顿，最终放弃了。</p>\n<h1 id=\"widgetpack-评论系统\"><a href=\"#widgetpack-评论系统\" class=\"headerlink\" title=\"widgetpack 评论系统\"></a>widgetpack 评论系统</h1><p>这是我这次笔记的重点，此刻是周末晚上，明早就要上班啦！给自己定的任务计划没完成，Mark我有点睡不着，无聊的我打开了电脑发现了这个<strong>widgetpack</strong>，在此感谢博主的贡献<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hb3NpZGlhb3hpYW4vYXJ0aWNsZS9kZXRhaWxzLzk0NjUxMDIz\">貌似掉线<i class=\"fa fa-external-link-alt\"></i></span>,</p>\n<ul>\n<li>免费的</li>\n<li>哪儿的？国外的，放心没被强，我是科学守法的好公民</li>\n<li>还没调查，貌似是欧洲的，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWRnZXRwYWNrLmNvbS9jb21tZW50LXN5c3RlbQ==\">介绍地址<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>邮箱注册便可</li>\n</ul>\n<p>下面是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hb3NpZGlhb3hpYW4vYXJ0aWNsZS9kZXRhaWxzLzk0NjUxMDIz\">貌似掉线<i class=\"fa fa-external-link-alt\"></i></span>的原文：</p>\n<h2 id=\"集成步骤：\"><a href=\"#集成步骤：\" class=\"headerlink\" title=\"集成步骤：\"></a>集成步骤：</h2><h3 id=\"1-主题配置添加-widgetpack\"><a href=\"#1-主题配置添加-widgetpack\" class=\"headerlink\" title=\"1. 主题配置添加 widgetpack\"></a>1. 主题配置添加 widgetpack</h3><p>修改 hexo 博客目录的 theme/yilia 中的 _config.yml 文件，增加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># widgetpack。将 false 改为 widgetpack 上的 id 则启用该评论系统。</span><br><span class=\"line\">widgetpack: false</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-新增-widgetpack-代码文件\"><a href=\"#2-新增-widgetpack-代码文件\" class=\"headerlink\" title=\"2. 新增 widgetpack 代码文件\"></a>2. 新增 widgetpack 代码文件</h3><p>在 yilia 中的 layout/_partial/post 下新增 widgetpack.ejs文件，内容如下：<br>这段代码，在你注册 widgetpack 之后也会有</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div id&#x3D;&quot;wpac-comment&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">wpac_init &#x3D; window.wpac_init || [];</span><br><span class=\"line\">wpac_init.push(&#123;widget: &#39;Comment&#39;, id: &lt;%&#x3D;theme.widgetpack%&gt;&#125;);</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">    if (&#39;WIDGETPACK_LOADED&#39; in window) return;</span><br><span class=\"line\">    WIDGETPACK_LOADED &#x3D; true;</span><br><span class=\"line\">    var mc &#x3D; document.createElement(&#39;script&#39;);</span><br><span class=\"line\">    mc.type &#x3D; &#39;text&#x2F;javascript&#39;;</span><br><span class=\"line\">    mc.async &#x3D; true;</span><br><span class=\"line\">    mc.src &#x3D; &#39;https:&#x2F;&#x2F;embed.widgetpack.com&#x2F;widget.js&#39;;</span><br><span class=\"line\">    var s &#x3D; document.getElementsByTagName(&#39;script&#39;)[0]; s.parentNode.insertBefore(mc, s.nextSibling);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;widgetpack.com&quot; class&#x3D;&quot;wpac-cr&quot;&gt;Comments System WIDGET PACK&lt;&#x2F;a&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改-article-ejs\"><a href=\"#3-修改-article-ejs\" class=\"headerlink\" title=\"3. 修改 article.ejs\"></a>3. 修改 article.ejs</h3><p>由于我使用的 yilia 主题没有自带 widgetpack 的代码，修改 yilia 中的 layout/_partial/article.ejs 文件，在 &lt;% if (!index &amp;&amp; post.comments){ %&gt; 后的任意一个评论代码前或后插入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%if (theme.widgetpack) &#123; %&gt;</span><br><span class=\"line\">  &lt;%- partial(&#39;post&#x2F;widgetpack&#39;) %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<p>这段代码加在哪儿？打开之后好好的看编辑器上的代码。</p>\n<hr>\n<p><strong>如上三步，修改完成。如果要启用，修改主题的 _config.yml 文件，将 widgetpack 的值改为 widgetpack 上的 id 即可，注意冒号之后有空格</strong></p>\n","categories":["工具使用"],"tags":["Hexo","工具搭建"]},{"title":"Flutter项目实战目录","url":"/2019/07/29/Flutter%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E7%9B%AE%E5%BD%95/","content":"<h1 id=\"Flutter-实战项目源码目录\"><a href=\"#Flutter-实战项目源码目录\" class=\"headerlink\" title=\"Flutter 实战项目源码目录\"></a>Flutter 实战项目源码目录</h1><ul>\n<li>携程App项目实战 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML2ZsdXR0ZXJfbWFya190cmlw\">源码地址<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Flutter"],"tags":["Flutter实战"]},{"title":"ImageView 中的 ScaleType 不起作用","url":"/2023/02/28/ImageView-%E4%B8%AD%E7%9A%84-ScaleType-%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/","content":"<p>我正在尝试使用 ViewPager展示Banner图片库。 viewpager 和图像检索一切正常。但是当我将位图放在 ImageView 中时，图像不会被拉伸以填充 ImageView 的大小。</p>\n<p>就是在设置imageview的scaleType属性的时候 无论怎么设置图片没有变化，后来猜想是图片的背景填充和src引用的区别 说白了就是background和src的关系，xml中或者是代码中设置图片的填充形式为background的话，那么imageview的scaletype是没有效果的。</p>\n<p><strong>设置了background了后，那么imageview的scaletype是没有效果的</strong></p>\n","categories":["Android"],"tags":["bug"]},{"title":"Glide中Bug：宽度铺满高度自适应 & GIF加载之坑","url":"/2023/02/24/Glide%E4%B8%ADBug%EF%BC%9A%E5%AE%BD%E5%BA%A6%E9%93%BA%E6%BB%A1%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94-GIF%E5%8A%A0%E8%BD%BD%E4%B9%8B%E5%9D%91/","content":"<h2 id=\"一、前言：\"><a href=\"#一、前言：\" class=\"headerlink\" title=\"一、前言：\"></a>一、前言：</h2><p>Glide圆角和centerCrop都是有问题的</p>\n<ol>\n<li>imageview自带的centerCrop是不管图片小于还是大于imageview的大小，都会等比例拉伸填充满，然后裁剪；</li>\n<li>而Glide的centerCrop对于大图是裁剪，如果图片小于imageview，则是等比例全部显示在imageview里而不是填满裁剪;</li>\n<li>而且如果imageview自己设置了centeCrop，这时候Glide再设置圆角，如果图片原图小于imageview，圆角是无效的</li>\n</ol>\n<p><strong>Glide 的基本使用</strong>可以查看下面这些文章：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL29jbnlhbmcuY29tLzIwMTYvMDgvMDkvR2xpZGVBYm91dC8=\">图片加载库Glide介绍<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL29jbnlhbmcuY29tLzIwMTYvMDgvMTcvR2xpZGVVc2Uv\">Glide图片加载库的使用<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"二、Glide-实现-ImageView-宽度填满，高度自适应的效果\"><a href=\"#二、Glide-实现-ImageView-宽度填满，高度自适应的效果\" class=\"headerlink\" title=\"二、Glide 实现 ImageView 宽度填满，高度自适应的效果\"></a>二、Glide 实现 ImageView 宽度填满，高度自适应的效果</h2><p>先说一下大家在平时用到 ImageView 实现宽度填满，高度自适应的方法。</p>\n<blockquote>\n<p>ImageView 宽度填满，高度自适应常用在：</p>\n<ol>\n<li>ListView 列表布局的条目中（RecycleView 同理），比如实现 item 中的图片充满屏幕，高度根据具体图片比例自适应，商品详情中常常用到。</li>\n<li>GridView 网格布局的条目中，假如 item 有两列，想让每一列的 item 中的图片占用屏幕的一半。</li>\n<li>其他使用单独图片也想达到这种效果的场景。</li>\n</ol>\n</blockquote>\n<p>这里提供两种实现方法:</p>\n<h3 id=\"1、重写-onMeasure-方法\"><a href=\"#1、重写-onMeasure-方法\" class=\"headerlink\" title=\"1、重写 onMeasure 方法\"></a>1、重写 onMeasure 方法</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressLint(&quot;AppCompatCustomView&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResizableImageView</span> <span class=\"keyword\">extends</span> <span class=\"title\">ImageView</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> value=<span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResizableImageView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ResizableImageView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span></span>&#123;</span><br><span class=\"line\">        Drawable d = getDrawable();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(d!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> height = width;</span><br><span class=\"line\">            <span class=\"comment\">//高度根据使得图片的宽度充满屏幕计算而得（这个是默认计算）</span></span><br><span class=\"line\">            <span class=\"comment\">//  int height = (int) Math.ceil((float) width * (float) d.getIntrinsicHeight() / (float) d.getIntrinsicWidth());</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (value==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                 height = (<span class=\"keyword\">int</span>) Math.ceil((<span class=\"keyword\">float</span>) (width*<span class=\"number\">4</span>/<span class=\"number\">3</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            setMeasuredDimension(width, height);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//根据传过来的值，1是宽度3：4，其它值是1：1</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span>  <span class=\"title\">setMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.value= value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、设置-ImageView-的属性\"><a href=\"#2、设置-ImageView-的属性\" class=\"headerlink\" title=\"2、设置 ImageView 的属性\"></a>2、设置 ImageView 的属性</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">&quot;@+id/iv_ocnyang&quot;</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">&quot;match_parent&quot;</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">&quot;wrap_content&quot;</span></span><br><span class=\"line\">        android:adjustViewBounds=<span class=\"string\">&quot;true&quot;</span></span><br><span class=\"line\">        android:scaleType=<span class=\"string\">&quot;fitXY&quot;</span></span><br><span class=\"line\">        /&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>fitXY</code> 这种图片的显示方式的效果是：根据 <code>ImageView</code> 设置的大小拉伸图片以填充满空间，（单独设置此属性时）图片会变形。</p>\n<p><code>adjustViewBounds</code> 是限制图片在显示时保持原图比例。（和 <code>fitXY</code> 显示方式合用能到达自适应的效果）</p>\n</blockquote>\n<hr>\n<p><strong>通过这上面两种方式显示图片一般都能够宽度充满高度自适应的效果，可是当你用 Glide 请求显示网络图片的时候，你会很失望的发现上面的设置失效了同时图片也变形了。</strong></p>\n<hr>\n<p>那么这时候是哪里出了问题了呢？（下面只做一个笼统的分析，具体可以看这个链接： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NsYXJrZWhlL0FuZHJvaWQvd2lraS9Db2RpbmcoNyk6LUdsaWRlJUU0JUJEJUJGJUU3JTk0JUE4JUU1JThGJThBJUU2JUIzJUE4JUU2JTg0JThGJUU3JTlBJTg0JUU1JTlDJUIwJUU2JTk2JUI5\">Glide使用及注意的地方<i class=\"fa fa-external-link-alt\"></i></span>）</p>\n<p>其实如果你熟知 Glide 的话，可能你还记得，Glide 在加载图片的时候，加载的大小会和 ImageView 的大小保持一致。也就是 ImageView 的大小决定了 Glide 加载图片的尺寸。而这里我们的 ImageView 设置的高度是 wrap_content，Glide 就无法准确的加载图片的大小了。</p>\n<p>那这个时候怎么才能保证按原图的比例来自适应高度显示呢？<br>这里有两种方式：</p>\n<ol>\n<li><p>你已经知道图片（或其他方式提前知道）图片的比例，然后在用 Glide 请求图片时限制图片的加载大小，即设置 override(int width, int height) 。这时候加载到的图片是原图比例，显示的时候虽然有拉伸/压缩但都会保存原比例的。这种方式适用于你加载的图片大小都比较规范固定的时候。</p>\n</li>\n<li><p>当然，你请求的图片源并不一定大小都一致。那这时候就可以使用下面这种方式了。这种方式的原理是，先使用 Glide 把图片的原图请求加载过来，然后再按原图来显示图片。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Glide.with(mContext)</span><br><span class=\"line\">    .load(url)</span><br><span class=\"line\">    .asBitmap()</span><br><span class=\"line\">    .into(<span class=\"keyword\">new</span> SimpleTarget&lt;Bitmap&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResourceReady</span><span class=\"params\">(Bitmap resource, GlideAnimation&lt;? <span class=\"keyword\">super</span> Bitmap&gt; glideAnimation)</span> </span>&#123;</span><br><span class=\"line\">    ivOcnyang.setImageBitmap(resource);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">````</span><br><span class=\"line\">&gt;这两种方法中，其实更加提倡的是第一种方式，因为这种方式不会造成任何负面的影响。但第二种方式，由于Glide加载图片时是以全分辨率加载的，当加载图片过大且图片很多时，可能造成 OOM。同时第二种方式使用在列表上复用时会造成条目错乱错位。</span><br><span class=\"line\">***</span><br><span class=\"line\"></span><br><span class=\"line\">## 三、Glide 加载 Gif 图片的那些坑</span><br><span class=\"line\">![](https:<span class=\"comment\">//upload-images.jianshu.io/upload_images/2625875-9a044086b7de0a45.gif)</span></span><br><span class=\"line\"></span><br><span class=\"line\">###  1、加载 Gif 图片慢或者显示不出来</span><br><span class=\"line\"></span><br><span class=\"line\">这是一个公认的问题了，在 Glide 的 issue 上有人提出过，并且作者也给出了解决方案。</span><br><span class=\"line\">加载 GIF 时需要调用 asGif() 方法，同时设置特别的缓存策略，调用 diskCacheStrategy() 将缓存策略设置为 SOURCE（缓存原图） 或者 NONE（不做缓存）。</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;Glide 在加载 GIF 时不调用 asGif() 方法也是能正常显示动画的。但建议调用 asGif()。</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\"><span class=\"keyword\">if</span> (imgUrl.toUpperCase().endsWith(<span class=\"string\">&quot;.GIF&quot;</span>)) &#123;</span><br><span class=\"line\">            Glide.with(mContext)</span><br><span class=\"line\">                    .load(imgUrl)</span><br><span class=\"line\">                    .asGif()</span><br><span class=\"line\">                    .override(width, height)</span><br><span class=\"line\">                    .placeholder(placeholderImg)</span><br><span class=\"line\">                    .error(errorImg)</span><br><span class=\"line\">                    .dontAnimate() <span class=\"comment\">//去掉显示动画</span></span><br><span class=\"line\">                    .centerCrop()</span><br><span class=\"line\">                    .diskCacheStrategy(DiskCacheStrategy.SOURCE) <span class=\"comment\">//DiskCacheStrategy.NONE</span></span><br><span class=\"line\">                    .into(ivOcnyang);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Glide.with(mContext)</span><br><span class=\"line\">                    .load(imgUrl)</span><br><span class=\"line\">                    .override(width, height)</span><br><span class=\"line\">                    .placeholder(placeholderImg)</span><br><span class=\"line\">                    .error(errorImg)</span><br><span class=\"line\">                    .crossFade()</span><br><span class=\"line\">                    .centerCrop()</span><br><span class=\"line\">                    .into(ivOcnyang);</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2V2ZW50cy5qaWFuc2h1LmlvL3AvZjA1Nzk4OTAwZTNl\">原文查看更多<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ol>\n","categories":["Android"],"tags":["bug"]},{"title":"JDBC学习--Statement","url":"/2021/05/13/JDBC%E5%AD%A6%E4%B9%A0-Statement/","content":"<h3 id=\"JDBC的API结构和使用流程\"><a href=\"#JDBC的API结构和使用流程\" class=\"headerlink\" title=\"JDBC的API结构和使用流程\"></a>JDBC的API结构和使用流程</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">    A0[DriverManager] --&gt; B0[Driver]</span><br><span class=\"line\">    A0[DriverManager] --&gt; B1[Driver] </span><br><span class=\"line\">    B0[Driver] --&gt; C0[Connection]</span><br><span class=\"line\">    B1[Driver] --&gt;C1[Connection]</span><br><span class=\"line\">    B1[Driver] --&gt;C2[Connection]</span><br><span class=\"line\">    C0[Connection]--&gt;D0[Statement]</span><br><span class=\"line\">    C0[Connection]--&gt;D1[Statement]--&gt;E0[ResultSet]</span><br><span class=\"line\">    C0[Connection]--&gt;D2[Statement]--&gt;E1[ResultSet]</span><br><span class=\"line\">    C1[Connection]--&gt;D3[Statement]--&gt;E2[ResultSet]</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"创建Statement的方式\"><a href=\"#创建Statement的方式\" class=\"headerlink\" title=\"创建Statement的方式\"></a>创建Statement的方式</h3><ul>\n<li><p><code>Statement  stmt = Connection.createStatement(......);</code></p>\n<ul>\n<li>执行不带参数的简单SQL语句</li>\n</ul>\n</li>\n<li><p><code>PreparedStatement  pstmt = Connection.prepareStatement(......);</code></p>\n<ul>\n<li>执行带参数或不带参数的SQL语句</li>\n</ul>\n</li>\n<li><p><code>CallableStatement   cstmt  =  Connection.prepareCall(...);</code></p>\n<ul>\n<li>执行对数据库已存储的PL/SQL程序的调用</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"执行SQL语句\"><a href=\"#执行SQL语句\" class=\"headerlink\" title=\"执行SQL语句\"></a>执行SQL语句</h3><ul>\n<li><code>executeQuery()</code>：执行查询语句，返回查询结果集 <code>ResultSet</code><br>返回结果集 <code>rs.getFetchSize()</code>记录着当前返回数量的大小：<code>10</code></li>\n<li><code>executeUpdate()</code>: 执行DML和DDL 语句，返回int类型</li>\n<li><code>execute()</code>: 执行任何SQL语句，返回boolean类型，指示是否有ResultSet返回</li>\n</ul>\n","categories":["JavaWeb"],"tags":["JDBC"]},{"title":"JDBC学习-事物提交模式和隔离级别","url":"/2021/05/21/JDBC%E5%AD%A6%E4%B9%A0-%E4%BA%8B%E7%89%A9%E6%8F%90%E4%BA%A4%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/","content":"","categories":["JavaWeb"],"tags":["JDBC"]},{"title":"JDBC学习--ConnectinnFactory","url":"/2021/05/13/JDBC%E5%AD%A6%E4%B9%A0-ConnectinnFactory/","content":"<p>[toc]</p>\n<h3 id=\"ConnectionFactory的作用\"><a href=\"#ConnectionFactory的作用\" class=\"headerlink\" title=\"ConnectionFactory的作用\"></a>ConnectionFactory的作用</h3><ul>\n<li>利用工厂模式提升代码的额重要性</li>\n<li>封装注册数据库的驱动和获得数据库的连接</li>\n<li>利用配置文件减少硬编码，便于维护</li>\n</ul>\n<h3 id=\"ConnectionFactory的开发\"><a href=\"#ConnectionFactory的开发\" class=\"headerlink\" title=\"ConnectionFactory的开发\"></a>ConnectionFactory的开发</h3><ul>\n<li><p>配置文件 <code>jdbcinfo.properties</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">oracle.driver=oracle.jdbc.driver.OracleDriver  <span class=\"comment\">//数据库驱动</span></span><br><span class=\"line\">oracle.url=jdbc:oracle:thin:<span class=\"meta\">@localhost</span>:<span class=\"number\">1521</span>:helowin <span class=\"comment\">//数据库地址 helowin:数据库的名字</span></span><br><span class=\"line\">oracle.user=mark  <span class=\"comment\">//管理账户</span></span><br><span class=\"line\">oracle.password=chenyunlin  <span class=\"comment\">//密码</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n</ul>\n<ul>\n<li><p>配置文件信息的获取</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Properties props = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">        <span class=\"comment\">// 加载配置文件中的数据</span></span><br><span class=\"line\">        InputStream is =</span><br><span class=\"line\">                ConnectionFactory.class.getClassLoader().getResourceAsStream(&quot;jdbcinfo.properties&quot;);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            props.load(is);</span><br><span class=\"line\">            DRIVER = props.getProperty(<span class=\"string\">&quot;oracle.driver&quot;</span>);</span><br><span class=\"line\">            URL = props.getProperty(<span class=\"string\">&quot;oracle.url&quot;</span>);</span><br><span class=\"line\">            USER = props.getProperty(<span class=\"string\">&quot;oracle.user&quot;</span>);</span><br><span class=\"line\">            PASSWORD = props.getProperty(<span class=\"string\">&quot;oracle.password&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>数据库连接Connection的获取</p>\n<ul>\n<li><pre><code class=\"java\">public static connection getConnection()&#123;\n\nConnection conn = null;\n        try &#123;\n            Class.forName(DRIVER);\n            conn = DriverManager.getConnection(URL, USER, PASSWORD);\n        &#125; catch (ClassNotFoundException | SQLException e) &#123;\n            e.printStackTrace();\n        &#125;\n        return conn;\n\n&#125;</code></pre>\n<blockquote>\n<p>调用getConnection()方法后，<br>Console输出：<code>oracle.jdbc.driver.T4CConnection@f8c1ddd</code>  表示数据连接成功</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n","categories":["JavaWeb"],"tags":["JDBC"]},{"title":"Java设计模式学习——观察者模式","url":"/2021/08/18/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/","content":"<p><span class=\"exturl\" data-url=\"aHR0cDovL2MuYmlhbmNoZW5nLm5ldC92aWV3LzEzOTAuaHRtbA==\">原文链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h2><blockquote>\n<p>指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。</p>\n</blockquote>\n<hr>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p><strong>优点</strong></p>\n<ul>\n<li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。符合依赖倒置原则。</li>\n<li>目标与观察者之间建立了一套触发机制。</li>\n</ul>\n</li>\n<li><p><strong>缺点</strong></p>\n<ul>\n<li>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。</li>\n<li>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。</li>\n</ul>\n</li>\n<li><p><strong>使用场景</strong></p>\n<ul>\n<li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li>\n<li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li>\n<li>一个对象必须通知其他对象，而并不知道这些对象是谁。</li>\n<li>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li>\n</ul>\n</li>\n<li><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>1、JAVA 中已经有了对观察者模式的支持类。 </li>\n<li>2、避免循环引用。 </li>\n<li>3、如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><blockquote>\n<p>观察者模式的主要角色如下。</p>\n</blockquote>\n<ul>\n<li>抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</li>\n<li>具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>\n<li>抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>\n<li>具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>\n</ul>\n<p>观察者模式的实现代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class ObserverPattern &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Subject subject &#x3D; new ConcreteSubject();</span><br><span class=\"line\">        Observer obs1 &#x3D; new ConcreteObserver1();</span><br><span class=\"line\">        Observer obs2 &#x3D; new ConcreteObserver2();</span><br><span class=\"line\">        subject.add(obs1);</span><br><span class=\"line\">        subject.add(obs2);</span><br><span class=\"line\">        subject.notifyObserver();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;抽象目标</span><br><span class=\"line\">abstract class Subject &#123;</span><br><span class=\"line\">    protected List&lt;Observer&gt; observers &#x3D; new ArrayList&lt;Observer&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;增加观察者方法</span><br><span class=\"line\">    public void add(Observer observer) &#123;</span><br><span class=\"line\">        observers.add(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F;删除观察者方法</span><br><span class=\"line\">    public void remove(Observer observer) &#123;</span><br><span class=\"line\">        observers.remove(observer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public abstract void notifyObserver(); &#x2F;&#x2F;通知观察者方法</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;具体目标</span><br><span class=\"line\">class ConcreteSubject extends Subject &#123;</span><br><span class=\"line\">    public void notifyObserver() &#123;</span><br><span class=\"line\">        System.out.println(&quot;具体目标发生改变...&quot;);</span><br><span class=\"line\">        System.out.println(&quot;--------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Object obs : observers) &#123;</span><br><span class=\"line\">            ((Observer) obs).response();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;抽象观察者</span><br><span class=\"line\">interface Observer &#123;</span><br><span class=\"line\">    void response(); &#x2F;&#x2F;反应</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;具体观察者1</span><br><span class=\"line\">class ConcreteObserver1 implements Observer &#123;</span><br><span class=\"line\">    public void response() &#123;</span><br><span class=\"line\">        System.out.println(&quot;具体观察者1作出反应！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;具体观察者1</span><br><span class=\"line\">class ConcreteObserver2 implements Observer &#123;</span><br><span class=\"line\">    public void response() &#123;</span><br><span class=\"line\">        System.out.println(&quot;具体观察者2作出反应！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["设计模式"]},{"title":"Kotlin中可变参数","url":"/2021/04/26/Kotlin%E4%B8%AD%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xNzRjMGUyNTQ3MTM=\">原文简书<i class=\"fa fa-external-link-alt\"></i></span></p>\n<hr>\n<h3 id=\"对比-Java-中的可变参数\"><a href=\"#对比-Java-中的可变参数\" class=\"headerlink\" title=\"对比 Java 中的可变参数\"></a>对比 Java 中的可变参数</h3><p>先看下 Java 的可变参数，用我们最熟悉的 main 函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从 Java5 开始引入了可变参数（varargs）<br>对应的 Kotlin 的代码，参数为可变参数：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">vararg</span> args: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>Java代码中参数应该是数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的 Kotlin 的代码，也是两种方式，参数为数组：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">String</span>&gt;)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"可变参数的本质\"><a href=\"#可变参数的本质\" class=\"headerlink\" title=\"可变参数的本质\"></a>可变参数的本质</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    foo(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">vararg</span> args: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(args::<span class=\"class\"><span class=\"keyword\">class</span>)</span></span><br><span class=\"line\">    println(args.contentToString())</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> args.indices) &#123;</span><br><span class=\"line\">        println(args[i])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>打印：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">kotlin</span>.<span class=\"title\">Array</span></span></span><br><span class=\"line\"><span class=\"keyword\">val</span> kotlin.reflect.KClass&lt;T&gt;.java: java.lang.Class&lt;T&gt;</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>我们可以清晰的看到 args 的类型为数组类型，并且可以直接调用数组的方法。</p>\n<blockquote>\n<p>如果你的第一行打印结果是：</p>\n<p>class [Ljava.lang.String; (Kotlin reflection is not available)</p>\n<p>需要在 build.gradle 中添加依赖：</p>\n<p>implementation “org.jetbrains.kotlin:kotlin-reflect:$kotlin_version”</p>\n</blockquote>\n<hr>\n<p><strong><strong>准确的说 args 的类型是 Array<out String> 类型:</strong></strong></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    foo(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">vararg</span> args: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    bar(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">out</span> <span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    println(args.contentToString())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"可变参数的传参\"><a href=\"#可变参数的传参\" class=\"headerlink\" title=\"可变参数的传参\"></a>可变参数的传参</h3><p>我们再来改造一下 bar 函数的参数类型，看下可变参数的传参：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    foo(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">vararg</span> args: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    bar(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar</span><span class=\"params\">(<span class=\"keyword\">vararg</span> args: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(args.contentToString())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译器提示类型不匹配，需要一个 String 类型的参数，而传入了数组类型。<br>然而在 Java 中可变参数是可以直接传递，并且可以和数组相互转换传递：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    foo(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">foo</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    bar1(args);</span><br><span class=\"line\">    bar2(args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bar1</span><span class=\"params\">(String... args)</span> </span>&#123;</span><br><span class=\"line\">    System.out.println(Arrays.toString(args));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bar2</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    bar1(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Kotlin 中如果想将数组类型传入到可变参数，就需要使用一个特定的符号 <code>* </code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    foo(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">foo</span><span class=\"params\">(<span class=\"keyword\">vararg</span> args: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    bar1(*args)</span><br><span class=\"line\">    bar2(args)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar1</span><span class=\"params\">(<span class=\"keyword\">vararg</span> args: <span class=\"type\">String</span>)</span></span> &#123;</span><br><span class=\"line\">    println(args.contentToString())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">bar2</span><span class=\"params\">(args: <span class=\"type\">Array</span>&lt;<span class=\"type\">out</span> <span class=\"type\">String</span>&gt;)</span></span> &#123;</span><br><span class=\"line\">    bar1(*args)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>我对 Kotlin 中d可变参数的理解是：</p>\n<ol>\n<li>可变参数会在函数体中，自动转变为数组类型</li>\n<li>数组类型不能作为参数，直接传递给可变参数</li>\n<li>在数组类型前面添加 * ，可以传递给可变参数</li>\n</ol>\n<p>最后，我们可以反编译看下 Kotlin 中的 foo 函数，看看 * 到底做了什么：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> static <span class=\"keyword\">final</span> void foo(<span class=\"meta\">@NotNull</span> String... args) &#123;</span><br><span class=\"line\">    bar1((String[]) Arrays.copyOf(args, args.length));</span><br><span class=\"line\">    bar2(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就是一个复制数组的操作，相比 Kotlin 还是 Java 做的更便捷，可以在数组和可变参数之间直接自由转换。</p>\n","categories":["Kotlin"],"tags":["Kotlin基础"]},{"title":"Java设计模式学习——建造者模式","url":"/2021/08/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E2%80%94%E2%80%94%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/","content":"<h2 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h2><blockquote>\n<p>建造者模式（Builder Pattern）使用多个简单的对象构建一个复杂的对象，这种类型的设计模式就属于创建型模式，它提供了一种创建对象的最佳方式。<br>一个建造者（Builder）类会一步一步构造最终的对象，该 Builder 类是独立于其他的对象的</p>\n</blockquote>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><strong>优点</strong><ul>\n<li>建造者独立，易扩展</li>\n<li>便于控制细节风险</li>\n</ul>\n</li>\n<li><strong>缺点</strong><ul>\n<li>产品有其共同点，范围有限制</li>\n<li>如内部变化复杂，会有很多的建造者</li>\n</ul>\n</li>\n<li><strong>使用场景</strong><ul>\n<li>需要生产的对象具有复杂的内部结构，</li>\n<li>需要生成的对象内部属性本身相互依赖</li>\n</ul>\n</li>\n<li><h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>与工厂模式的区别L建造者模式更加关注与零件装配的顺序</li>\n</ul>\n<hr>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3>我们以肯德基套餐为例<br>我们假设一个快餐店的商业案例，其中，一个典型的套餐可以是一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（coke）或百事可乐（pepsi），它们是装在瓶子中。</li>\n</ul>\n<h4 id=\"步骤一\"><a href=\"#步骤一\" class=\"headerlink\" title=\"步骤一\"></a><strong>步骤一</strong></h4><p>  创建一个表示食物条目和食物包装的接口</p>\n<ul>\n<li>食物条目接口<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 一个表示食物条目</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Item &#123;</span><br><span class=\"line\">  public String name();</span><br><span class=\"line\">  public Packing packing();</span><br><span class=\"line\">  public float price();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>食物包装接口<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * 食物包装的接口</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public interface Packing &#123;</span><br><span class=\"line\">  public String pack();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤二\"><a href=\"#步骤二\" class=\"headerlink\" title=\"步骤二\"></a><strong>步骤二</strong></h4>创建实现 <strong>Packing</strong> 接口实体类</li>\n<li>Wrapper（包装纸） <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Wrapper implements Packing &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String pack() &#123;</span><br><span class=\"line\">      return &quot;Wrapper&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>Bottle（瓶子）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Bottle implements Packing &#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String pack() &#123;</span><br><span class=\"line\">      return &quot;Bottle&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤三\"><a href=\"#步骤三\" class=\"headerlink\" title=\"步骤三\"></a><strong>步骤三</strong></h4>创建实现<strong>Item</strong>接口的抽象类，该类提供默认的功能</li>\n<li>Burger (汉堡）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public abstract class Burger implements Item &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   @Override</span><br><span class=\"line\">    public Packing packing() &#123;</span><br><span class=\"line\">     return new Wrapper();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   public abstract float price() ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>ColdDrink （冷饮）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public abstract class ColdDrink implements Item &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public Packing packing() &#123;</span><br><span class=\"line\">      return new Bottle();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  public abstract float price();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"步骤四\"><a href=\"#步骤四\" class=\"headerlink\" title=\"步骤四\"></a>步骤四</h4><p>创建扩展了 Burger 和 ColdDrink 的实体类</p>\n<ul>\n<li>VegBurger （蔬菜汉堡）<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class VegBurger extends Burger&#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String name() &#123;</span><br><span class=\"line\">      return &quot;Veg Burger&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public float price() &#123;</span><br><span class=\"line\">      return 25.0f;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>ChickenBurger (鸡肉汉堡)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class ChickenBurger extends Burger&#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String name() &#123;</span><br><span class=\"line\">      return &quot;Chicken Burger&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public float price() &#123;</span><br><span class=\"line\">      return 50.5f;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Coke ( 可口可乐)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Coke extends ColdDrink&#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String name() &#123;</span><br><span class=\"line\">      return &quot;Coke&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public float price() &#123;</span><br><span class=\"line\">      return 30.0f;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Pepsi (百事可乐)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Pepsi extends ColdDrink&#123;</span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public String name() &#123;</span><br><span class=\"line\">      return &quot;Pepsi&quot;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @Override</span><br><span class=\"line\">  public float price() &#123;</span><br><span class=\"line\">      return 35.0f;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤五\"><a href=\"#步骤五\" class=\"headerlink\" title=\"步骤五\"></a>步骤五</h4><p>创建一个套餐<strong>meal</strong>类，带有上面定义的<strong>Item</strong>对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Meal &#123;</span><br><span class=\"line\">    private List&lt;Item&gt; items &#x3D; new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    public void addItem(Item item) &#123;</span><br><span class=\"line\">        items.add(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public float getCost() &#123;</span><br><span class=\"line\">        float cost &#x3D; 0.0f;</span><br><span class=\"line\">        for (Item item : items) &#123;</span><br><span class=\"line\">            cost +&#x3D; item.price();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return cost;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void showItems() &#123;</span><br><span class=\"line\">        for (Item item : items) &#123;</span><br><span class=\"line\">            System.out.println(&quot;Item : &quot; + item.name() + &quot;, Packing : &quot; + item.packing().pack() + &quot;, Price : &quot; + item.price());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤六\"><a href=\"#步骤六\" class=\"headerlink\" title=\"步骤六\"></a>步骤六</h4><p>创建一个构造者<strong>MealBuilder</strong>类，实例化<code>builde</code>类负责创建的<strong>Meal</strong>套餐对象</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class MealBuilder &#123;</span><br><span class=\"line\">    public Meal prepareVegMeal()&#123;</span><br><span class=\"line\">        Meal meal &#x3D; new Meal();</span><br><span class=\"line\">        meal.addItem(new VegBurger());</span><br><span class=\"line\">        meal.addItem(new Coke());</span><br><span class=\"line\">        return meal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Meal prepareNonVegMeal()&#123;</span><br><span class=\"line\">        Meal meal &#x3D; new Meal();</span><br><span class=\"line\">        meal.addItem(new ChickenBurger());</span><br><span class=\"line\">        meal.addItem(new Pepsi());</span><br><span class=\"line\">        return meal;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤七\"><a href=\"#步骤七\" class=\"headerlink\" title=\"步骤七\"></a>步骤七</h4><p>使用<strong>MealBuilder</strong>演示构建者模式（Builder Pattern）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class Test &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        MealBuilder mealBuilder &#x3D; new MealBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        Meal vegMeal &#x3D; mealBuilder.prepareVegMeal();</span><br><span class=\"line\">        System.out.println(&quot;Veg Meal&quot;);</span><br><span class=\"line\">        vegMeal.showItems();</span><br><span class=\"line\">        System.out.println(&quot;Toast Cost:&quot;+vegMeal.getCost());</span><br><span class=\"line\"></span><br><span class=\"line\">        Meal nonVegMeal &#x3D; mealBuilder.prepareNonVegMeal();</span><br><span class=\"line\">        System.out.println(&quot;Non-veg Meal&quot;);</span><br><span class=\"line\">        nonVegMeal.showItems();</span><br><span class=\"line\">        System.out.println(&quot;Toast Cost: &quot;+nonVegMeal.getCost());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"步骤八\"><a href=\"#步骤八\" class=\"headerlink\" title=\"步骤八\"></a>步骤八</h4><p>执行程序输出结果</p>\n<blockquote>\n<p>Veg Meal<br>Item : Veg Burger, Packing : Wrapper, Price : 25.0<br>Item : Coke, Packing : Bottle, Price : 30.0<br>Toast Cost:55.0<br>Non-veg Meal<br>Item : Chicken Burger, Packing : Wrapper, Price : 50.5<br>Item : Pepsi, Packing : Bottle, Price : 35.0<br>Toast Cost: 85.5</p>\n</blockquote>\n</li>\n</ul>\n","categories":["Java"],"tags":["设计模式"]},{"title":"Centos7 配置ssh免密登陆以及遇到的问题","url":"/2021/09/17/Centos7-%E9%85%8D%E7%BD%AEssh%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86%E4%BB%A5%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<p>假设用户名为<strong>u</strong>：</p>\n<ul>\n<li><p>1.确认已经连接上互联网，然后输入命令：<br><code>sudo apt-get install ssh</code></p>\n</li>\n<li><p>2.配置为可以免密码登录本机。首先查看在u用户下是否存在.ssh文件夹（注意ssh前面有“.”，这是一个隐藏文件夹），输入命令：<br>  <code>ls –a /home/u</code></p>\n<blockquote>\n<p>一般来说，安装SSH时会自动在当前用户下创建这个隐藏文件夹，如果没有，可以手动创建一个。</p>\n</blockquote>\n</li>\n<li><p>3.接下来，输入命令（注意下面命令中不是双引号，是两个单引号）：<br><code>ssh-keygen -t dsa -P &#39;&#39; -f ~/.ssh/id_dsa</code></p>\n</li>\n</ul>\n<blockquote>\n<p>解释一下，ssh-keygen代表生成密钥；-t（注意区分大小写）表示指定生成的密钥类型；dsa是dsa密钥认证的意思，即密钥类型；-P用于提供密语；-f指定生成的密钥文件。</p>\n</blockquote>\n<blockquote>\n<p>在Linux系统中，~代表当前用户文件夹，此处即/home/u。</p>\n</blockquote>\n<blockquote>\n<p>这个命令会在.ssh文件夹下创建id_dsa及id_dsa.pub两个文件，这是SSH的一对私钥和公钥，类似于钥匙和锁，把id_dsa.pub（公钥）追加到授权的key中去。<br>输入命令:</p>\n</blockquote>\n<p><code>cat ~/.ssh/id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</code></p>\n<p>这条命令的功能是把公钥加到用于认证的公钥文件中，这里的authorized_keys是用于认证的公钥文件。</p>\n<p>至此免密码登录本机已配置完毕。</p>\n<ul>\n<li>4.验证SSH是否已安装成功，以及是否可以免密码登录本机。<br>输入命令：</li>\n</ul>\n<p>ssh –version</p>\n<p>显示结果：</p>\n<p>OpenSSH_5.8p1 Debian-7ubuntu1, OpenSSL 1.0.0e 6 Sep 2011</p>\n<p>Bad escape character ‘rsion’.</p>\n<p>显示SSH已经安装成功了。</p>\n<p>输入命令：<br><code>ssh localhost</code><br>会有如下显示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">The authenticity of host &#39;localhost (::1)&#39; can&#39;t be established.</span><br><span class=\"line\">RSA key fingerprint is 8b:c3:51:a5:2a:31:b7:74:06:9d:62:04:4f:84:f8:77.</span><br><span class=\"line\">Are you sure you want to continue connecting (yes&#x2F;no)? yes</span><br><span class=\"line\">Warning: Permanently added &#39;localhost&#39; (RSA) to the list of known hosts.</span><br><span class=\"line\">Linux master 2.6.31-14-generic #48-Ubuntu SMP Fri Oct 16 14:04:26 UTC 2011 i686</span><br><span class=\"line\">To access official Ubuntu documentation, please visit:</span><br><span class=\"line\">http:&#x2F;&#x2F;help.ubuntu.com&#x2F;</span><br><span class=\"line\">Last login: Sat Feb 18 17:12:40 2012 from master</span><br></pre></td></tr></table></figure>\n<p>第一次登录时会询问是否继续链接，输入yes即可进入。</p>\n","categories":["Linux"],"tags":["网络配置"]},{"title":"LinuxDeploy下ping命令无法运行,提示socket:权限不足","url":"/2022/10/30/LinuxDeploy%E4%B8%8Bping%E5%91%BD%E4%BB%A4%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C-%E6%8F%90%E7%A4%BAsocket-%E6%9D%83%E9%99%90%E4%B8%8D%E8%B6%B3/","content":"<figure class=\"highlight vim\"><table><tr><td class=\"code\"><pre><span class=\"line\">ping命令需要SUID权限的</span><br><span class=\"line\">检查以下它的权限位是否是-rwsr-xr-<span class=\"keyword\">x</span>，并且owner是root</span><br><span class=\"line\">如果没有那个s，</span><br><span class=\"line\"># chmod <span class=\"keyword\">u</span>+s /bin/ping</span><br><span class=\"line\">如果owner不是root</span><br><span class=\"line\"># chown root /bin/ping</span><br></pre></td></tr></table></figure>","categories":["网络"],"tags":["命令","Linux"]},{"title":"Kotlin基础入门学习笔记","url":"/2019/12/03/Kotlin%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<p>若不留下点啥笔记，感觉对不住自己一个星期半的学习加复习。</p>\n<h3 id=\"一、如何实现单列模式？\"><a href=\"#一、如何实现单列模式？\" class=\"headerlink\" title=\"一、如何实现单列模式？\"></a>一、如何实现单列模式？</h3><p>使用关键字 <strong>object</strong> 修饰的类,替换掉class关键字，便会在整套程序中生成一个且是唯一的对象实例。<br>譬如如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">object BigHeadSon:IWash &#123;</span><br><span class=\"line\">    override fun wash() &#123;</span><br><span class=\"line\">        println(&quot;大头儿子洗完收费1元钱&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那样之后该类的实例变量整个项目中有且只有一个。</p>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"二、如何实现枚举？\"><a href=\"#二、如何实现枚举？\" class=\"headerlink\" title=\"二、如何实现枚举？\"></a>二、如何实现枚举？</h3><p>实现枚举的代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">enum class Week &#123;</span><br><span class=\"line\">    星期一, 星期二, 星期三, 星期四, 星期五, 星期六, 星期日</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    println(Week.星期一.ordinal)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用关键字 enum 修饰类</p>\n<hr>\n<h3 id=\"三、如何实现印章类？\"><a href=\"#三、如何实现印章类？\" class=\"headerlink\" title=\"三、如何实现印章类？\"></a>三、如何实现印章类？</h3><p>举个例子一匹母驴、一屁公马和一匹公驴一碗酒后乱性，过了几天母驴怀孕了，不只是公马的还是公驴的。那么问题来了马和驴的后代是骡子，母驴和公驴的后代当然还是驴。<br>就像盖了章一样，使用<strong>sealed</strong>关键字修饰类,可以指定子类和个数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 印章sealed类</span><br><span class=\"line\">&#x2F;&#x2F;指定子类种类和个数</span><br><span class=\"line\"></span><br><span class=\"line\">sealed class Son &#123;</span><br><span class=\"line\">    fun sayHello()&#123;</span><br><span class=\"line\">        println(&quot;大家好！！！&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    class smallBlackMule():Son()</span><br><span class=\"line\"></span><br><span class=\"line\">    class smallDonkey():Son()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    var s1: Son &#x3D; Son.smallBlackMule()</span><br><span class=\"line\"></span><br><span class=\"line\">    var s2: Son &#x3D; Son.smallBlackMule()</span><br><span class=\"line\"></span><br><span class=\"line\">    var s3 &#x3D; Son.smallDonkey()</span><br><span class=\"line\"></span><br><span class=\"line\">    var list &#x3D; listOf&lt;Son&gt;( s1, s2, s3 )</span><br><span class=\"line\"></span><br><span class=\"line\">    for ( h in list)&#123;</span><br><span class=\"line\">        if(h is Son.smallDonkey) &#123;</span><br><span class=\"line\">            h.sayHello()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"四、如是实现委托和代理？\"><a href=\"#四、如是实现委托和代理？\" class=\"headerlink\" title=\"四、如是实现委托和代理？\"></a>四、如是实现委托和代理？</h3><p>利用关键字 <strong>by</strong> 实现，示例代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class SmallHeadFather : IWash by BigHeadSon() &#123;</span><br><span class=\"line\">    override fun wash() &#123;</span><br><span class=\"line\">        println(&quot;小头爸爸洗完收费10块钱！！！&quot;)</span><br><span class=\"line\">        BigHeadSon().wash()</span><br><span class=\"line\">        println(&quot;小头爸爸看见儿子把碗洗好了&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"五、如何实现多态和继承？\"><a href=\"#五、如何实现多态和继承？\" class=\"headerlink\" title=\"五、如何实现多态和继承？\"></a>五、如何实现多态和继承？</h3><p>kotlin是面向对象的语言，子类可以继承父类的方法和属性。<br><strong>抽象类</strong>：如父类，同一类具有同样基本属性和方法的类事物的描述，事物的本质描述。<br><strong>接口</strong>：指具有同样基本属性和方法的能力，事物的能力描述。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;抽象类</span><br><span class=\"line\">abstract class Human(var name:String) &#123;</span><br><span class=\"line\">    abstract fun eat()</span><br><span class=\"line\"></span><br><span class=\"line\">    abstract fun pee()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;男人</span><br><span class=\"line\">class Man(name: String) : Human(name) &#123;</span><br><span class=\"line\">    override fun eat() &#123;</span><br><span class=\"line\">        println(&quot;$&#123;name&#125;大口的吃饭,暴力&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun pee() &#123;</span><br><span class=\"line\">        println(&quot;$&#123;name&#125;站着尿尿---&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;女人</span><br><span class=\"line\">class Woman(name: String) :Human(name) &#123;</span><br><span class=\"line\">    override fun pee() &#123;</span><br><span class=\"line\">        println(&quot;$&#123;name&#125;蹲着尿尿---&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    override fun eat() &#123;</span><br><span class=\"line\">        println(&quot;$&#123;name&#125;小口慢慢的吃饭，文雅&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;测试</span><br><span class=\"line\">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class=\"line\">    var person1 &#x3D; Man(&quot;金三胖&quot;)</span><br><span class=\"line\">    var person2 &#x3D; Woman(&quot;波多野结衣&quot;)</span><br><span class=\"line\">    var person3 &#x3D; Woman(&quot;貂蝉&quot;)</span><br><span class=\"line\">    var person4 &#x3D; Man(&quot;吕布&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    var humanList &#x3D; listOf&lt;Human&gt;(person1,person2,person3,person4)</span><br><span class=\"line\"></span><br><span class=\"line\">    for (h in humanList)&#123;</span><br><span class=\"line\">        h.name</span><br><span class=\"line\">&#x2F;&#x2F;        h.eat()</span><br><span class=\"line\">        h.pee()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"六、when的表达式：\"><a href=\"#六、when的表达式：\" class=\"headerlink\" title=\"六、when的表达式：\"></a>六、when的表达式：</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;考试成绩评级10分 9分A 8分B 7分C</span><br><span class=\"line\"></span><br><span class=\"line\">fun scoreMatch(score:Int):String&#123;</span><br><span class=\"line\">\twhen(score)&#123;</span><br><span class=\"line\">\t\t10 -&gt; return &quot;恭喜你拿了满分S&quot;</span><br><span class=\"line\">\t\t9 -&gt; return &quot;恭喜你拿了A&quot;</span><br><span class=\"line\">\t\t8 -&gt; return &quot;恭喜你拿了B&quot;</span><br><span class=\"line\">\t\t7 -&gt; return &quot;你拿了C，还需更加努力&quot;</span><br><span class=\"line\">\t\telse -&gt; return &quot;对不起你被OUT啦！&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(agrs:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\tprintln(scoreMatch(10))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"七、空值判断：\"><a href=\"#七、空值判断：\" class=\"headerlink\" title=\"七、空值判断：\"></a>七、空值判断：</h3><p>加上问好代表参数可以为空</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;接收一个参数，参数为非空的String类型   </span><br><span class=\"line\">fun heat(str:String?):String&#123;</span><br><span class=\"line\">\treturn &quot;热$&#123;str&#125;&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(agrs:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\tvar result1 &#x3D; &quot;油&quot;</span><br><span class=\"line\">\tprintln(heat(result1))</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvar result2 &#x3D; null</span><br><span class=\"line\">\tprintln(heat(result2))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"八、函数表达式\"><a href=\"#八、函数表达式\" class=\"headerlink\" title=\"八、函数表达式\"></a>八、函数表达式</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fun main(args:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;函数</span><br><span class=\"line\">\tvar result &#x3D; add(3,4)</span><br><span class=\"line\">\tprintln(result)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#x2F;&#x2F;函数表达式</span><br><span class=\"line\">\tvar i &#x3D; &#123;x:Int,y:Int -&gt; x+y&#125;</span><br><span class=\"line\">\tvar result2 &#x3D; i(3,4)</span><br><span class=\"line\">\tvar temp &#x3D; result2&#x3D;&#x3D;(7)</span><br><span class=\"line\">\tprintln(&quot;$&#123;temp&#125;&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun add(a:Int,b:Int):Int &#x3D; a+b</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"九、递归演示：\"><a href=\"#九、递归演示：\" class=\"headerlink\" title=\"九、递归演示：\"></a>九、递归演示：</h3><p><strong>BigInteger</strong>函数是Java数值运算大值时使用的属性，特殊的超级<strong>Int</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;演示一</span><br><span class=\"line\">import java.math.BigInteger</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 递归演示</span><br><span class=\"line\">&#x2F;&#x2F; 阶乘  5的阶乘：5*4*3*2*1</span><br><span class=\"line\">fun main(args:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;&#x2F;BigInteger是一个不可描述超大的数字</span><br><span class=\"line\">\tprintln(&quot;请输入数字：&quot;)</span><br><span class=\"line\">\tvar a &#x3D; readLine()</span><br><span class=\"line\">    try&#123;</span><br><span class=\"line\">\t\tvar b:BigInteger &#x3D; a!!.toBigInteger()</span><br><span class=\"line\">\t\t&#x2F;&#x2F;阶乘</span><br><span class=\"line\">\t\tprintln(fact(b))</span><br><span class=\"line\">\t&#125;catch(e:Exception)&#123;</span><br><span class=\"line\">\t\tprintln(&quot;输入数字有误！！&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun fact(a:BigInteger):BigInteger&#123;</span><br><span class=\"line\">\tif(a&#x3D;&#x3D;BigInteger.ONE)</span><br><span class=\"line\">\t    return BigInteger.ONE</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\treturn a*fact(a-BigInteger.ONE)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尾递归 <strong>tailrec</strong>修饰方法,譬如超过电脑运算周期范围的计算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fun main(args:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\tvar a &#x3D; readLine()!!.toInt()</span><br><span class=\"line\">\tvar num:Int &#x3D; 0</span><br><span class=\"line\">\tvar result:Int &#x3D; 0</span><br><span class=\"line\">\tprintln(add(a,num,result))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;尾递归 tailrec修饰方法</span><br><span class=\"line\">tailrec fun add(nuk:Int,nn:Int,result:Int):Int&#123;</span><br><span class=\"line\">\tvar nns &#x3D; nn+1</span><br><span class=\"line\">\tvar results &#x3D; result + nuk</span><br><span class=\"line\">\tprintln(&quot;计算机第$&#123;nns&#125;次运算,结果为：$&#123;results&#125;&quot;)</span><br><span class=\"line\">\tif(nuk&#x3D;&#x3D;1)</span><br><span class=\"line\">\t\treturn results</span><br><span class=\"line\">\telse</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn add(nuk-1,nns,results)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十、List和Map\"><a href=\"#十、List和Map\" class=\"headerlink\" title=\"十、List和Map\"></a>十、List和Map</h3><p>List演示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> fun main(args:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\t var lists &#x3D; listOf(&quot;买鸡蛋&quot;,&quot;买可乐&quot;,&quot;买猪肉&quot;,&quot;买大米&quot;)</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t for(a in lists)&#123;</span><br><span class=\"line\">\t\t println(a)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t </span><br><span class=\"line\">\t for((i,e) in lists.withIndex())</span><br><span class=\"line\">\t\t println(&quot;$i,$e&quot;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Map演示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import java.util.TreeMap</span><br><span class=\"line\"></span><br><span class=\"line\">fun main(args:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\t&#x2F;&#x2F;TreeMap 同一key的value不能重复存在</span><br><span class=\"line\">\tvar map &#x3D; TreeMap&lt;String,String&gt;()</span><br><span class=\"line\">\tvar list &#x3D; listOf(&quot;好&quot;,&quot;好&quot;,&quot;学习&quot;,&quot;天&quot;,&quot;天&quot;,&quot;向上&quot;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tmap[&quot;好&quot;] &#x3D; &quot;Good&quot;</span><br><span class=\"line\">\tmap[&quot;学习&quot;] &#x3D; &quot;Study&quot;</span><br><span class=\"line\">\tmap[&quot;天&quot;]  &#x3D; &quot;Day&quot;</span><br><span class=\"line\">\tmap[&quot;向上&quot;]  &#x3D; &quot;Up&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfor(a in list)&#123;</span><br><span class=\"line\">\t\tprint(&quot;$&#123;map[a]&#125;  &quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"十一、人机交互\"><a href=\"#十一、人机交互\" class=\"headerlink\" title=\"十一、人机交互\"></a>十一、人机交互</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">fun main(args:Array&lt;String&gt;)&#123;</span><br><span class=\"line\">\tprintln(&quot;请输入第一个数字：&quot;)</span><br><span class=\"line\">\tvar c &#x3D; readLine()</span><br><span class=\"line\">\tprintln(&quot;请输入第二个数字：&quot;)</span><br><span class=\"line\">\tvar d &#x3D; readLine()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\ttry&#123;</span><br><span class=\"line\">\t\tvar a &#x3D; c!!.toInt()</span><br><span class=\"line\">\t    var b &#x3D; d!!.toInt()</span><br><span class=\"line\">\t\tprintln(&quot;$&#123;a&#125; + $&#123;b&#125; &#x3D; $&#123;a + b&#125;&quot;)</span><br><span class=\"line\">\t&#125;catch(e:Exception)&#123;</span><br><span class=\"line\">\t\tprintln(&quot;输入数据有误！，请重新输入&quot;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>**!!.**确保不为空<br>**?.**可为空</p>\n","categories":["Android"],"tags":["kotlin"]},{"title":"Linux下删除文件名带有空格的文件","url":"/2021/09/16/Linux%E4%B8%8B%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%90%8D%E5%B8%A6%E6%9C%89%E7%A9%BA%E6%A0%BC%E7%9A%84%E6%96%87%E4%BB%B6/","content":"<p>1.使用单引号将文件名括起来进行操作；</p>\n<p><code>rm &#39;2018-08-07 17-29-48.png&#39;</code></p>\n","categories":["Linux"],"tags":["Error"]},{"title":"Flutter中使用Banner 图","url":"/2019/04/10/Flutter%E4%B8%AD%E4%BD%BF%E7%94%A8Banner-%E5%9B%BE/","content":"<h2 id=\"实现效果\"><a href=\"#实现效果\" class=\"headerlink\" title=\"实现效果\"></a>实现效果</h2><p><img data-src=\"https://img-blog.csdnimg.cn/20190410142106370.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfQ0hZTA==,size_16,color_FFFFFF,t_70\" alt=\"&quot;效果图&quot;\" title=\"效果图\"><br> <span id=\"more\"></span></p>\n<h2 id=\"首先导入flutter-swiper插件：\"><a href=\"#首先导入flutter-swiper插件：\" class=\"headerlink\" title=\"首先导入flutter_swiper插件：\"></a>首先导入flutter_swiper插件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies:</span><br><span class=\"line\">  flutter_swiper: ^1.1.6</span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wdWIuZGFydGxhbmcub3JnL3BhY2thZ2VzL2ZsdXR0ZXJfc3dpcGVyIy1pbnN0YWxsaW5nLXRhYi0=\">配置文件的链接地址<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h2 id=\"使用swiper插件\"><a href=\"#使用swiper插件\" class=\"headerlink\" title=\"使用swiper插件\"></a>使用swiper插件</h2><p>需要在使用的dart页面添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import &#39;package:flutter_swiper&#x2F;flutter_swiper.dart&#39;;</span><br></pre></td></tr></table></figure>\n<p>然后才能在页面中使用轮播插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">body:  new Swiper(</span><br><span class=\"line\">        itemBuilder: (BuildContext context,int index)&#123;</span><br><span class=\"line\">          return new Image.network(&quot;http:&#x2F;&#x2F;via.placeholder.com&#x2F;350x150&quot;,fit: BoxFit.fill,);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        itemCount: 3,</span><br><span class=\"line\">        pagination: new SwiperPagination(),</span><br><span class=\"line\">        control: new SwiperControl(),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br></pre></td></tr></table></figure>\n","categories":["Flutter"],"tags":["Flutter"]},{"title":"Linux命令学习","url":"/2020/04/09/Linux%E5%91%BD%E4%BB%A4%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0/","content":"<h2 id=\"远程管理命令\"><a href=\"#远程管理命令\" class=\"headerlink\" title=\"远程管理命令\"></a>远程管理命令</h2><blockquote>\n<h3 id=\"关机-重启\"><a href=\"#关机-重启\" class=\"headerlink\" title=\"关机/重启\"></a><strong>关机/重启</strong></h3></blockquote>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th>命令</th>\n<th>对应英文</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>01</td>\n<td>shutdown 选项 时间</td>\n<td>shutdown</td>\n<td>关机/重新启动</td>\n</tr>\n</tbody></table>\n<ul>\n<li>shutdown 命令可以安全 <strong>关闭</strong> 或 <strong>重启系统</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-r</td>\n<td>重新启动</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>提示：</p>\n<ul>\n<li>不指定选项和参数，默认表示 1 分钟后关闭电脑</li>\n<li>远程维护服务器时，最好不要关闭系统，而是应该重启系统</li>\n</ul>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ssh客户端的简单实用\"><a href=\"#ssh客户端的简单实用\" class=\"headerlink\" title=\"ssh客户端的简单实用\"></a>ssh客户端的简单实用</h3><blockquote>\n<p>ssh [-p port] user@remote<br>如果服务器端没有设置账号密码，或者是无密码登录，直接写<code>ssh -p 22 192.168.177.156</code>或<code>ssh -p 228 mark@192.168.177.156</code></p>\n</blockquote>\n<p>关于ssh配置方法：<br>ubuntu下默认是不允许root通过密码的方式通过ssh远程登录服务器的，可以通过在</p>\n<figure class=\"highlight plain\"><figcaption><span>vi</span><a href=\"/etc/ssh/sshd_config\">link</a></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">#增加以下配置允许通过ssh登录</span><br><span class=\"line\"></span><br><span class=\"line\">#PermitRootLogin prohibit-password</span><br><span class=\"line\">PermitRootLogin yes</span><br><span class=\"line\"></span><br><span class=\"line\">#修改完成后需要重启ssh服务命令如下</span><br><span class=\"line\">sudo service ssh restart</span><br></pre></td></tr></table></figure>\n<p>即可通过ssh的root用户登录服务器了。<br>下面说下如何修改root密码</p>\n<figure class=\"highlight plain\"><figcaption><span>passwd root</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">Enter new UNIX password:</span><br><span class=\"line\">Retype new UNIX password:</span><br><span class=\"line\">passwd: password updated successfully</span><br><span class=\"line\">su root #即生效</span><br></pre></td></tr></table></figure>\n<p>此时若想验证看root密码是否更改成功，可以通过如下命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">su - root</span><br><span class=\"line\">#在下方输入修改后的密码，输入后回车</span><br><span class=\"line\">Password:</span><br></pre></td></tr></table></figure>\n","categories":["Linux"],"tags":["Linux"]},{"title":"Log日志工具类(一)","url":"/2021/04/07/Log%E6%97%A5%E5%BF%97%E5%B7%A5%E5%85%B7%E7%B1%BB-%E4%B8%80/","content":"<p>实现的效果能将json字符串以格式化的方式显示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * $desc$ Log日志工具类</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * @Author mark</span><br><span class=\"line\"> * @Date 2018&#x2F;11&#x2F;26</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\">public class LogUtils &#123;</span><br><span class=\"line\">    &#x2F;&#x2F;是否Debug</span><br><span class=\"line\">    public static final boolean isMarkDebug &#x3D; true;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static final String LINE_SEPARATOR &#x3D; System.getProperty(&quot;line.separator&quot;);</span><br><span class=\"line\">    public static void printLog(String name,String strContent)&#123;</span><br><span class=\"line\">        if (isMarkDebug)&#123;</span><br><span class=\"line\">            Log.d(name,strContent);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void printLine(String tag, boolean isTop) &#123;</span><br><span class=\"line\">        if (isTop) &#123;</span><br><span class=\"line\">            Log.d(tag, &quot;╔═══════════════════════════════════════════════════════════════════════════════════════&quot;);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            Log.d(tag, &quot;╚═══════════════════════════════════════════════════════════════════════════════════════&quot;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public static void printJson(String tag, String msg, String headString) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String message;</span><br><span class=\"line\"></span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (msg.startsWith(&quot;&#123;&quot;)) &#123;</span><br><span class=\"line\">                JSONObject jsonObject &#x3D; new JSONObject(msg);</span><br><span class=\"line\">                message &#x3D; jsonObject.toString(4);&#x2F;&#x2F;最重要的方法，就一行，返回格式化的json字符串，其中的数字4是缩进字符数</span><br><span class=\"line\">            &#125; else if (msg.startsWith(&quot;[&quot;)) &#123;</span><br><span class=\"line\">                JSONArray jsonArray &#x3D; new JSONArray(msg);</span><br><span class=\"line\">                message &#x3D; jsonArray.toString(4);</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                message &#x3D; msg;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (JSONException e) &#123;</span><br><span class=\"line\">            message &#x3D; msg;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        printLine(tag, true);</span><br><span class=\"line\">        message &#x3D; headString + LINE_SEPARATOR + message;</span><br><span class=\"line\">        String[] lines &#x3D; message.split(LINE_SEPARATOR);</span><br><span class=\"line\">        for (String line : lines) &#123;</span><br><span class=\"line\">            Log.d(tag, &quot;║ &quot; + line);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printLine(tag, false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":["Utils"]},{"title":"Git之使用GitHub搭建远程仓库","url":"/2020/08/18/Git%E4%B9%8B%E4%BD%BF%E7%94%A8GitHub%E6%90%AD%E5%BB%BA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/","content":"<h3 id=\"1-账号注册-amp-仓库创建：\"><a href=\"#1-账号注册-amp-仓库创建：\" class=\"headerlink\" title=\"1.账号注册&amp;仓库创建：\"></a>1.账号注册&amp;仓库创建：</h3><p>不做记录，简单</p>\n<h3 id=\"2-Clone代码库到本地\"><a href=\"#2-Clone代码库到本地\" class=\"headerlink\" title=\"2.Clone代码库到本地\"></a>2.Clone代码库到本地</h3><span id=\"more\"></span>\n<p><code>git clone https://github.com/ZPJay/Garbage.git</code></p>\n<h3 id=\"3-分支管理\"><a href=\"#3-分支管理\" class=\"headerlink\" title=\"3.分支管理\"></a>3.分支管理</h3><p>①创建分支(后者创建同时会切换分支):</p>\n<blockquote>\n<p>git branch v1.0.3 或 git checkout -b v1.0.4<br>②查看版本库中所有分支：<br>git branch -a<br>③切换到某一分支：<br>git checkout v1.0.3<br>④删除某一分支：<br>git branch -D v1.0.4<br>⑤合并分支<br>git merge v1.0.3</p>\n</blockquote>\n<h3 id=\"4-本地仓库与远程仓库同步问题\"><a href=\"#4-本地仓库与远程仓库同步问题\" class=\"headerlink\" title=\"4.本地仓库与远程仓库同步问题\"></a>4.本地仓库与远程仓库同步问题</h3><p>先对我们的本地仓库做一点点修改，接着git add和git commit本地准备后，然后：</p>\n<blockquote>\n<p>git push origin master 或者直接 git push</p>\n</blockquote>\n<p>有同步到服务器，肯定有服务器同步到本地是吧，很简单，就一个</p>\n<blockquote>\n<p>git pull</p>\n</blockquote>\n","categories":["工具使用"],"tags":["工具使用"]},{"title":"MAC使用APKTool反编译apk修改版本号后重新打包","url":"/2021/04/14/MAC%E4%BD%BF%E7%94%A8APKTool%E5%8F%8D%E7%BC%96%E8%AF%91apk%E4%BF%AE%E6%94%B9%E7%89%88%E6%9C%AC%E5%8F%B7%E5%90%8E%E9%87%8D%E6%96%B0%E6%89%93%E5%8C%85/","content":"<p>现在业务上出现客户要求如若生产环境出现紧急事件，需要版本回退的情况下，我这边的代码又没做版本分之处理，那么只能更改之前的版本号来实现。<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDk5ODI1NC9hcnRpY2xlL2RldGFpbHMvMTEwNDc0ODg1\">不敢夺他人之功，原文在此处<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXJrY2h5bC5jbi8yMDIwLzEyLzE0L2FuZHJvaWQlRTUlOEYlOEQlRTclQkMlOTYlRTglQUYlOTFhcGt0b29sLWRleDJqYXItamRndWkv\">我之前的文章：android反编译apktool—dex2jar—jdgui<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"一、反编译apk并修改版本号\"><a href=\"#一、反编译apk并修改版本号\" class=\"headerlink\" title=\"一、反编译apk并修改版本号\"></a>一、反编译apk并修改版本号</h3><p>在apk所在目录控制台输入下面指令，即可将文件名为source的apk反编译到outDir目录</p>\n<ul>\n<li><p>开始反编译apk</p>\n<p><code>apktool d -o outDir source.apk</code><br>或者<br><code>apktool d source.apk -o outDir</code></p>\n</li>\n</ul>\n<h3 id=\"二、修改版本号\"><a href=\"#二、修改版本号\" class=\"headerlink\" title=\"二、修改版本号\"></a>二、修改版本号</h3><p>打开输入目录outDir找到apktool.yml文件，编辑修改versionCode</p>\n<h3 id=\"三、重新打包\"><a href=\"#三、重新打包\" class=\"headerlink\" title=\"三、重新打包\"></a>三、重新打包</h3><p>通过以下命令就可以将目录outDir中的文件重新打包为no_sign_result.apk</p>\n<ul>\n<li><code>apktool b -o no_sign_result.apk outDir</code></li>\n</ul>\n<p>或者</p>\n<ul>\n<li><code>apktool b outDir -o  no_sign_result.apk </code></li>\n</ul>\n<h3 id=\"四、重新签名\"><a href=\"#四、重新签名\" class=\"headerlink\" title=\"四、重新签名\"></a>四、重新签名</h3><p>使用如下命令进行签名<br><code>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore demostore.jks -signedjar result-signed.apk no_sign_result.apk yourkey</code><br>注：</p>\n<ul>\n<li>demostore.jks为签名文件</li>\n<li>no_sign_result.apk为要签名的源文件</li>\n<li>result-signed.apk为签名后的目标文件</li>\n<li>yourkey为签名的key</li>\n</ul>\n","categories":["Android"],"tags":["反编译","工具搭建"]},{"title":"MAC搭建基于RTMP的本地Nginx服务器","url":"/2018/12/17/MAC%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8ERTMP%E7%9A%84%E6%9C%AC%E5%9C%B0Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/","content":"<h3 id=\"MAC搭建基于RTMP的本地Nginx服务器，实现电脑上视频推流。\"><a href=\"#MAC搭建基于RTMP的本地Nginx服务器，实现电脑上视频推流。\" class=\"headerlink\" title=\"MAC搭建基于RTMP的本地Nginx服务器，实现电脑上视频推流。\"></a>MAC搭建基于RTMP的本地Nginx服务器，实现电脑上视频推流。</h3><h1 id=\"1、先安装homeView\"><a href=\"#1、先安装homeView\" class=\"headerlink\" title=\"1、先安装homeView\"></a>1、先安装homeView</h1><span id=\"more\"></span>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;安装命令</span><br><span class=\"line\">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;移除命令</span><br><span class=\"line\">ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;uninstall)&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2、安装Nginx服务器\"><a href=\"#2、安装Nginx服务器\" class=\"headerlink\" title=\"2、安装Nginx服务器\"></a>2、安装Nginx服务器</h1><h3 id=\"增加对nginx的扩展-也就是从github上下载-home-brew对ngixnx的扩展\"><a href=\"#增加对nginx的扩展-也就是从github上下载-home-brew对ngixnx的扩展\" class=\"headerlink\" title=\"增加对nginx的扩展;也就是从github上下载,home-brew对ngixnx的扩展\"></a>增加对nginx的扩展;也就是从github上下载,home-brew对ngixnx的扩展</h3><h3 id=\"homebrew-nginx的git路径变了-貌似是2018年3月更新\"><a href=\"#homebrew-nginx的git路径变了-貌似是2018年3月更新\" class=\"headerlink\" title=\"homebrew/nginx的git路径变了(貌似是2018年3月更新)\"></a>homebrew/nginx的git路径变了(貌似是2018年3月更新)</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew tap homebrew&#x2F;nginx</span><br></pre></td></tr></table></figure>\n<h1 id=\"3、安装Nginx服务器和rtmp模块\"><a href=\"#3、安装Nginx服务器和rtmp模块\" class=\"headerlink\" title=\"3、安装Nginx服务器和rtmp模块\"></a>3、安装Nginx服务器和rtmp模块</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install nginx-full --with-rtmp-module</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/1027569-1480f7cb0be838e2.png?imageMogr2/auto-orient/\" alt=\"image\"></p>\n<h1 id=\"4、查看nginx的信息\"><a href=\"#4、查看nginx的信息\" class=\"headerlink\" title=\"4、查看nginx的信息\"></a>4、查看nginx的信息</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew info nginx-full</span><br></pre></td></tr></table></figure>\n<h3 id=\"结果显示\"><a href=\"#结果显示\" class=\"headerlink\" title=\"结果显示\"></a>结果显示</h3><p><img data-src=\"https://upload-images.jianshu.io/upload_images/1027569-da39e4efd3bf35f4.jpeg?imageMogr2/auto-orient/\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx的安装位置</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;Cellar&#x2F;nginx-full&#x2F;1.10.1&#x2F;bin&#x2F;nginx</span><br><span class=\"line\">nginx配置文件所在位置</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br><span class=\"line\">nginx服务器根目录所在位置 </span><br><span class=\"line\"> &#x2F;usr&#x2F;local&#x2F;var&#x2F;www</span><br></pre></td></tr></table></figure>\n<h4 id=\"在浏览器中输入-http-localhost-8080-（若是安装成功就会出现如下图所示）\"><a href=\"#在浏览器中输入-http-localhost-8080-（若是安装成功就会出现如下图所示）\" class=\"headerlink\" title=\"在浏览器中输入 http://localhost:8080 （若是安装成功就会出现如下图所示）\"></a>在浏览器中输入 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080 <i class=\"fa fa-external-link-alt\"></i></span>（若是安装成功就会出现如下图所示）</h4><p><img data-src=\"https://upload-images.jianshu.io/upload_images/1027569-8f0712d428c40368.png?imageMogr2/auto-orient\" title=\"安装成功\"></p>\n<h1 id=\"5、配置rtmp和支持http协议拉流\"><a href=\"#5、配置rtmp和支持http协议拉流\" class=\"headerlink\" title=\"5、配置rtmp和支持http协议拉流\"></a>5、配置rtmp和支持http协议拉流</h1><h4 id=\"在终端中输入\"><a href=\"#在终端中输入\" class=\"headerlink\" title=\"在终端中输入\"></a>在终端中输入</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">open &#x2F;usr&#x2F;local&#x2F;etc&#x2F;nginx</span><br></pre></td></tr></table></figure>\n<h4 id=\"打开niginx的文件夹，找到nginx-conf文件-用xcode打开。添加下面配置\"><a href=\"#打开niginx的文件夹，找到nginx-conf文件-用xcode打开。添加下面配置\" class=\"headerlink\" title=\"打开niginx的文件夹，找到nginx.conf文件,用xcode打开。添加下面配置\"></a>打开niginx的文件夹，找到nginx.conf文件,用xcode打开。添加下面配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#在http节点下面(也就是文件的尾部)加上rtmp配置：</span><br><span class=\"line\">rtmp &#123;&#x2F;&#x2F;协议名称</span><br><span class=\"line\">   server &#123;&#x2F;&#x2F;说明内部中是服务器相关配置</span><br><span class=\"line\">        listen 1992;&#x2F;&#x2F; 监听的端口号, rtmp协议的默认端口号是1935</span><br><span class=\"line\">        application Mark &#123;&#x2F;&#x2F;访问的应用路径是 Mark</span><br><span class=\"line\">              live on; &#x2F;&#x2F;开启实时</span><br><span class=\"line\">              record off;&#x2F;&#x2F; 不记录数据</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">location &#x2F;hls &#123;</span><br><span class=\"line\">        #Serve HLS config</span><br><span class=\"line\">        types &#123;</span><br><span class=\"line\">            application&#x2F;vnd.apple.mpegurl    m3u8;</span><br><span class=\"line\">            video&#x2F;mp2t ts;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        root &#x2F;usr&#x2F;local&#x2F;var&#x2F;www;</span><br><span class=\"line\">        add_header Cache-Control    no-cache;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6、保存文件后，重新加载nginx的配置文件\"><a href=\"#6、保存文件后，重新加载nginx的配置文件\" class=\"headerlink\" title=\"6、保存文件后，重新加载nginx的配置文件\"></a>6、保存文件后，重新加载nginx的配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置好的样子如下：\"><a href=\"#配置好的样子如下：\" class=\"headerlink\" title=\"配置好的样子如下：\"></a>配置好的样子如下：</h4><p><img data-src=\"https://upload-images.jianshu.io/upload_images/1027569-3a79f914d42877ae.png?imageMogr2/auto-orient/\"></p>\n<h1 id=\"7、安装ffmepg工具\"><a href=\"#7、安装ffmepg工具\" class=\"headerlink\" title=\"7、安装ffmepg工具\"></a>7、安装ffmepg工具</h1><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install ffmpeg</span><br></pre></td></tr></table></figure>\n<h1 id=\"8、通过ffmepg命令进行推流测试\"><a href=\"#8、通过ffmepg命令进行推流测试\" class=\"headerlink\" title=\"8、通过ffmepg命令进行推流测试\"></a>8、通过ffmepg命令进行推流测试</h1><ul>\n<li><h4 id=\"推流至RTMP到服务器\"><a href=\"#推流至RTMP到服务器\" class=\"headerlink\" title=\"推流至RTMP到服务器\"></a>推流至RTMP到服务器</h4><ul>\n<li><h4 id=\"生成地址：-rtmp-localhost-1992-Mark-room\"><a href=\"#生成地址：-rtmp-localhost-1992-Mark-room\" class=\"headerlink\" title=\"生成地址： rtmp://localhost:1992/Mark/room\"></a>生成地址： rtmp://localhost:1992/Mark/room</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i 你的视频文件的绝对路径(如&#x2F;Users&#x2F;lideshan&#x2F;Downloads&#x2F;test.mp4) -vcodec copy -f flv rtmp:&#x2F;&#x2F;localhost:1992&#x2F;Mark&#x2F;room&#x2F;&#x2F;</span><br><span class=\"line\"> 如：我把测试视频放在桌面</span><br><span class=\"line\">ffmpeg -re -i  &#x2F;Users&#x2F;Mark&#x2F;Desktop&#x2F;test.mp4 -vcodec copy -f flv rtmp:&#x2F;&#x2F;localhost:1992&#x2F;Mark&#x2F;room</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"这里Mark是上面的配置文件中-配置的应用的路径名称-后面的room可以随便写\"><a href=\"#这里Mark是上面的配置文件中-配置的应用的路径名称-后面的room可以随便写\" class=\"headerlink\" title=\"这里Mark是上面的配置文件中,配置的应用的路径名称;后面的room可以随便写\"></a>这里Mark是上面的配置文件中,配置的应用的路径名称;后面的room可以随便写</h4></li>\n</ul>\n</li>\n<li><h4 id=\"推流至HLS到服务器\"><a href=\"#推流至HLS到服务器\" class=\"headerlink\" title=\"推流至HLS到服务器\"></a>推流至HLS到服务器</h4><ul>\n<li>生成地址: <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwL2hscy90ZXN0Lm0zdTg=\">http://localhost:8080/hls/test.m3u8<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -i &#x2F;Users&#x2F;apple&#x2F;Desktop&#x2F;ffmepg&#x2F;story.mp4 -vcodec libx264 -vprofile baseline -acodec aac -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp:&#x2F;&#x2F;localhost:1935&#x2F;hls&#x2F;demo</span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["Android","视频直播"]},{"title":"Mac上实现SVN代码管理","url":"/2019/05/30/Mac%E4%B8%8A%E5%AE%9E%E7%8E%B0SVN%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86/","content":"<h3 id=\"参考地址：\"><a href=\"#参考地址：\" class=\"headerlink\" title=\"参考地址：\"></a>参考地址：</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC85OTE0NWVlNTkxYzg=\">Cornerstone 参考地址1<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RhbmdiYWkwMV8vYXJ0aWNsZS9kZXRhaWxzLzc5NDEzNjky\">Cornerstone 参考地址1<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hlaXNlaml1aHVjaGUvYXJ0aWNsZS9kZXRhaWxzLzQ3Mzk0NDA3\">Android Studio 实现SVN项目管理<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pmMTgyMzQwMzExNTYvYXJ0aWNsZS9kZXRhaWxzLzg4ODk1MTIy\">配置时我遇到的问题参考地址<i class=\"fa fa-external-link-alt\"></i></span><span id=\"more\"></span>\n<h3 id=\"我的工具：\"><a href=\"#我的工具：\" class=\"headerlink\" title=\"我的工具：\"></a>我的工具：</h3></li>\n<li>Mac电脑、</li>\n<li><img data-src=\"https://img-blog.csdnimg.cn/20190529164521582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfQ0hZTA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></li>\n</ul>\n<hr>\n<h3 id=\"添加SVN上的工作目录：\"><a href=\"#添加SVN上的工作目录：\" class=\"headerlink\" title=\"添加SVN上的工作目录：\"></a>添加SVN上的工作目录：</h3><p><img data-src=\"https://img-blog.csdnimg.cn/20190529164803263.png\" alt=\"在这里插入图片描述\"><br>接着填写SVN的服务器信息和你的账号密码：<br><img data-src=\"https://img-blog.csdnimg.cn/20190529164954758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfQ0hZTA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>最后点击<code>add</code>按钮，完成接下来的一步，仅仅等待就好：<br><img data-src=\"https://img-blog.csdnimg.cn/2019052916554583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfQ0hZTA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"本地代码的上传到SVN：\"><a href=\"#本地代码的上传到SVN：\" class=\"headerlink\" title=\"本地代码的上传到SVN：\"></a>本地代码的上传到SVN：</h3><p><img data-src=\"https://img-blog.csdnimg.cn/20190529165634203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfQ0hZTA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>静静等候<strong>上传完毕</strong>。</p>\n<hr>\n<h3 id=\"拉取SVN上的项目\"><a href=\"#拉取SVN上的项目\" class=\"headerlink\" title=\"拉取SVN上的项目\"></a>拉取SVN上的项目</h3><p>前提是SVN上有你想要拉的项目：<br><img data-src=\"https://img-blog.csdnimg.cn/20190529170253362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfQ0hZTA==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>耐心等待拉取完成。</p>\n","categories":["工具使用"],"tags":["工具使用"]},{"title":"MacOS13 python3 报错 mach-o file, but is an incompatible architecture (have ‘arm64‘, need ‘x86_64‘)","url":"/2023/02/21/MacOS13-python3-%E6%8A%A5%E9%94%99-mach-o-file-but-is-an-incompatible-architecture-have-%E2%80%98arm64%E2%80%98-need-%E2%80%98x86-64%E2%80%98/","content":"<p>解决方案：<br>前面加上​​​arch -x86_64​​​ 例如：<br>​​arch -x86_64 pip3 install Pillow​​​​arch -x86_64 pip3 install numpy​​</p>\n","categories":["Python"],"tags":["Error"]},{"title":"Mac 电脑如何卸载 node和npm","url":"/2020/08/25/Mac-%E7%94%B5%E8%84%91%E5%A6%82%E4%BD%95%E5%8D%B8%E8%BD%BD-node%E5%92%8Cnpm/","content":"<p>记录下我自己重新安装npm，因为npm是和node.js安装一起的，也就是说是重新弄<em>node</em></p>\n<span id=\"more\"></span>\n<h3 id=\"一、在终端依次输入以下命令\"><a href=\"#一、在终端依次输入以下命令\" class=\"headerlink\" title=\"一、在终端依次输入以下命令\"></a>一、在终端依次输入以下命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm uninstall npm -g</span><br><span class=\"line\">sudo rm -rf &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules &#x2F;var&#x2F;db&#x2F;receipts&#x2F;org.nodejs.*</span><br><span class=\"line\">sudo rm -rf &#x2F;usr&#x2F;local&#x2F;include&#x2F;node &#x2F;Users&#x2F;$USER&#x2F;.npm</span><br><span class=\"line\">sudo rm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;node</span><br><span class=\"line\">sudo rm &#x2F;usr&#x2F;local&#x2F;share&#x2F;man&#x2F;man1&#x2F;node.1</span><br></pre></td></tr></table></figure>\n<h3 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h3><p>输入 npm -v 和node -v 验证是否卸载成功。</p>\n","categories":["工具使用"],"tags":["系统"]},{"title":"Java 面试题","url":"/2022/07/23/Java-%E9%9D%A2%E8%AF%95%E9%A2%98/","content":"<p>[TOC]</p>\n<h3 id=\"2、List和Set的区别\"><a href=\"#2、List和Set的区别\" class=\"headerlink\" title=\"2、List和Set的区别\"></a>2、<code>List</code>和<code>Set</code>的区别</h3><p>  <strong>List和Set都是继承自Collection接口</strong></p>\n<ul>\n<li>List特点：元素有放入顺序，元素可重复。和数组类似，List可以动态增长，查找元素效率高，但是插入和删除元素的效率低</li>\n<li>Set特点： 元素无放入顺序，元素不可以重复，重复元素会被覆盖掉。查找检索元素效率低，但是删除和插入效率高</li>\n</ul>\n<h3 id=\"3、HashSet是如何保证元素不重复的？\"><a href=\"#3、HashSet是如何保证元素不重复的？\" class=\"headerlink\" title=\"3、HashSet是如何保证元素不重复的？\"></a>3、HashSet是如何保证元素不重复的？</h3><p>向<code>HashSet</code>中<code>add()</code>元素时，判断元素是否存在的依据，不仅要比较<code>hash</code>值，同时还要结合<code>equeals</code>方法比较。<br><code>HashSet</code>中的<code>add()</code>方法会使用<code>HashMap</code>的<code>add()</code>方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object PRESENT = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HashSet</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  map = <span class=\"keyword\">new</span> HashMap&lt;E, Object&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> map.put(e,PRESENT)==<span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Java"],"tags":["基础，面试题"]},{"title":"Mac中终端关机命令","url":"/2021/11/02/Mac%E4%B8%AD%E7%BB%88%E7%AB%AF%E5%85%B3%E6%9C%BA%E5%91%BD%E4%BB%A4/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS81OTQ2NTE2OC8xODM3NTM4\">原文来自<i class=\"fa fa-external-link-alt\"></i></span><br>1.立即关机命令<br>        sudo halt<br>    或者<br>        sudo shutdown -h now </p>\n<ol start=\"2\">\n<li><p>10分钟后关机<br>sudo shutdown -h +10 </p>\n</li>\n<li><p>晚上8点关机<br>sudo shutdown -h 20:00 </p>\n</li>\n<li><p>立即重启<br> sudo reboot<br> 或者<br> sudo shutdown -r now</p>\n</li>\n</ol>\n<p>5.设定时间为2012年7月12日15：00分关机,命令为：<br>    sudo shutdown -h 1207121500<br>同理：<br>    2014年7月11日15：00分重启,命令：<br>    sudo shutdown -r 1407111500<br> 命令的主体位：shutdown（关闭）<br>     h/r/s –&gt;分别代表：关机/重启/睡眠。<br> 最后加上时间就可行了。</p>\n","categories":["Mac"],"tags":["运维"]},{"title":"Mac安装和配置Tomcat的教程","url":"/2021/11/02/Mac%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AETomcat%E7%9A%84%E6%95%99%E7%A8%8B/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rvbmd6aGVuc29uZy9hcnRpY2xlL2RldGFpbHMvODc4MDczNzg=\">原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"我的配置\"><a href=\"#我的配置\" class=\"headerlink\" title=\"我的配置\"></a>我的配置</h3><ul>\n<li>MacBook Pro</li>\n<li>jdk1.8<h3 id=\"1-下载\"><a href=\"#1-下载\" class=\"headerlink\" title=\"1.下载\"></a>1.下载</h3>前往<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b21jYXQuYXBhY2hlLm9yZy9kb3dubG9hZC04MC5jZ2k=\">ApacheTomcat<i class=\"fa fa-external-link-alt\"></i></span>官网下载Tomcat：<br><img data-src=\"https://img-blog.csdnimg.cn/20190220165426253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rvbmd6aGVuc29uZw==,size_16,color_FFFFFF,t_70\"><br>首先选择相应的版本（以Tomcat 8为例）：<br>下载右边Core下的第一个资源zip。<br>下载后解压下来重名名为ApacheTomcat，并放到磁盘的/usr/local下<br><img data-src=\"https://img-blog.csdnimg.cn/20190220165752464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rvbmd6aGVuc29uZw==,size_16,color_FFFFFF,t_70\"><span id=\"more\"></span>\n<h3 id=\"2-启动服务\"><a href=\"#2-启动服务\" class=\"headerlink\" title=\"2.启动服务\"></a>2.启动服务</h3>打开终端.app，切换路径到ApacheTomcat的bin目录下并执行启动文件：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mark@localhost bin % cd &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin</span><br><span class=\"line\">mark@localhost bin % .&#x2F;startup.sh </span><br></pre></td></tr></table></figure>\n如果提示Permission denied:那是因为没有.sh的权限。<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod u+x *.sh</span><br></pre></td></tr></table></figure>\n再次执行 startup.sh 即可启动服务<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mark@localhost bin % .&#x2F;startup.sh </span><br><span class=\"line\">Using CATALINA_BASE:   &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class=\"line\">Using CATALINA_HOME:   &#x2F;usr&#x2F;local&#x2F;tomcat</span><br><span class=\"line\">Using CATALINA_TMPDIR: &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;temp</span><br><span class=\"line\">Using JRE_HOME:        &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_301.jdk&#x2F;Contents&#x2F;Home</span><br><span class=\"line\">Using CLASSPATH:       &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;bootstrap.jar:&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;tomcat-juli.jar</span><br><span class=\"line\">Using CATALINA_OPTS:   </span><br><span class=\"line\">Tomcat started.</span><br></pre></td></tr></table></figure>\n在浏览器中访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLw==\">http://localhost:8080<i class=\"fa fa-external-link-alt\"></i></span> 即可看到提示：<h3 id=\"3-修改使用的端口号\"><a href=\"#3-修改使用的端口号\" class=\"headerlink\" title=\"3. 修改使用的端口号\"></a>3. 修改使用的端口号</h3>如果使用的端口号8080不能使用，可通过修改conf文件下的server.xml配置文件来使用其他端口：<br><img data-src=\"https://img-blog.csdnimg.cn/20190220171236981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rvbmd6aGVuc29uZw==,size_16,color_FFFFFF,t_70\"></li>\n<li>*重新启动服务**<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ .&#x2F;shutdown.sh</span><br><span class=\"line\"></span><br><span class=\"line\">$ .&#x2F;startup.sh</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-配置Tomcat应用管理GUI用户\"><a href=\"#4-配置Tomcat应用管理GUI用户\" class=\"headerlink\" title=\"4. 配置Tomcat应用管理GUI用户\"></a>4. 配置Tomcat应用管理GUI用户</h3>打开conf文件夹下的tomcat-users.xml 添加一个用户：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;role rolename&#x3D;&quot;manager-gui&quot;&#x2F;&gt;</span><br><span class=\"line\">&lt;user username&#x3D;&quot;tomcat&quot; password&#x3D;&quot;s3cret&quot; roles&#x3D;&quot;manager-gui&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<img data-src=\"https://img-blog.csdnimg.cn/20190220174027195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rvbmd6aGVuc29uZw==,size_16,color_FFFFFF,t_70\"><br>重新启动服务，访问 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDkwLw==\">http://localhost:8090<i class=\"fa fa-external-link-alt\"></i></span> , 点击Manager App：<br>用户名与密码即刚设置的 tomcat 与 s3cret<br><img data-src=\"https://img-blog.csdnimg.cn/20190220174431882.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rvbmd6aGVuc29uZw==,size_16,color_FFFFFF,t_70\"></li>\n</ul>\n","categories":["JavaWeb"],"tags":["Tomcat"]},{"title":"Mac 每次都要执行source ~/.bash_profile 配置的环境变量才生效","url":"/2020/07/28/Mac-%E6%AF%8F%E6%AC%A1%E9%83%BD%E8%A6%81%E6%89%A7%E8%A1%8Csource-bash-profile-%E9%85%8D%E7%BD%AE%E7%9A%84%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%89%8D%E7%94%9F%E6%95%88/","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>遇到一个问题，前段时间由于系统升级之后，做了一下用户群组的改动，在开发的时候发现之前在<br><code>.bash_profile</code>中设置的环境变量都不见了，还只能在终端中执行一次<code>source .bash_profile</code>,环境变量才能生效。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>在系统根目录下，在~/.zshrc文件最后，增加一行：<br>source ~/.bash_profile</p>\n","categories":["工具使用"],"tags":["系统"]},{"title":"Mac用Docker安装Oracle11g并连接Navicat","url":"/2020/12/01/Mac%E7%94%A8Docker%E5%AE%89%E8%A3%85Oracle11g%E5%B9%B6%E8%BF%9E%E6%8E%A5Navicat/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGloYW5xaW5nL3AvMTIzMjk0ODAuaHRtbA==\">原文转载自大佬笑等茶凉<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"1-下载并安装Docker\"><a href=\"#1-下载并安装Docker\" class=\"headerlink\" title=\"1.下载并安装Docker\"></a>1.下载并安装Docker</h3><p>官方下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZC5kb2NrZXIuY29tL21hYy9zdGFibGUvRG9ja2VyLmRtZw==\">https://download.docker.com/mac/stable/Docker.dmg<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"2-用docker下载镜像，在终端输入：\"><a href=\"#2-用docker下载镜像，在终端输入：\" class=\"headerlink\" title=\"2.用docker下载镜像，在终端输入：\"></a>2.用docker下载镜像，在终端输入：</h3><blockquote>\n<p>docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</p>\n</blockquote>\n<h3 id=\"3-启动oracle镜像作为容器：\"><a href=\"#3-启动oracle镜像作为容器：\" class=\"headerlink\" title=\"3.启动oracle镜像作为容器：\"></a>3.启动oracle镜像作为容器：</h3><blockquote>\n<p>docker run -d -p 1521:1521 –name oracle11g registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</p>\n</blockquote>\n<h3 id=\"4-进入镜像配置\"><a href=\"#4-进入镜像配置\" class=\"headerlink\" title=\"4.进入镜像配置\"></a>4.进入镜像配置</h3><blockquote>\n<p>docker exec -it oracle11g bash</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"5-配置环境变量\"><a href=\"#5-配置环境变量\" class=\"headerlink\" title=\"5.配置环境变量\"></a>5.配置环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export ORACLE_HOME&#x3D;&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_2</span><br><span class=\"line\">export ORACLE_SID&#x3D;helowin</span><br><span class=\"line\">export PATH&#x3D;$ORACLE_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-修改密码\"><a href=\"#6-修改密码\" class=\"headerlink\" title=\"6.修改密码\"></a>6.修改密码</h3><blockquote>\n<p>sqlplus /nolog</p>\n</blockquote>\n<blockquote>\n<p>SQL&gt; conn /as sysdba;<br>SQL&gt; alter user system identified by oracle;<br>SQL&gt; conn system/oracle;<br>那样便修改了账号为system密码为oracle的账号.</p>\n</blockquote>\n<p><strong>系统权限管理 :</strong></p>\n<ul>\n<li>系统权限分类：<br>DBA: 拥有全部特权，是系统最高权限，只有DBA才可以创建数据库结构。<br>RESOURCE:拥有Resource权限的用户只可以创建实体，不可以创建数据库结构。<br>CONNECT:拥有Connect权限的用户只可以登录Oracle，不可以创建实体，不可以创建数据库结构。<br>对于普通用户：授予connect, resource权限。<br>对于DBA管理用户：授予connect，resource, dba权限。</li>\n</ul>\n<hr>\n<ul>\n<li>系统权限授权命令：<br>系统权限只能由DBA用户授出：sys, system(最开始只能是这两个用户)<br>授权命令：SQL&gt; grant connect, resource, dba to 用户名1 [,用户名2]…;<br>注:普通用户通过授权可以具有与system相同的用户权限，但永远不能达到与sys用户相同的权限，system用户的权限也可以被回收。</li>\n</ul>\n<h3 id=\"7-创建用户\"><a href=\"#7-创建用户\" class=\"headerlink\" title=\"7.创建用户\"></a>7.创建用户</h3><blockquote>\n<p>SQL&gt; create user mark identified by chenyunlin;</p>\n</blockquote>\n<p>用sysdba赋予该用户所有权限：</p>\n<blockquote>\n<p>SQL&gt; grant all privileges to mark;</p>\n</blockquote>\n<p>连接新创建的用户：</p>\n<blockquote>\n<p>SQL&gt; conn mark/chenyunlin;</p>\n</blockquote>\n<p>创建表：</p>\n<blockquote>\n<p>SQL&gt; create table test2(name varchar2(20), city varchar2(20));</p>\n</blockquote>\n<p>比如在此你拥有自动化创建数据表的脚本的话<br><code>## 执行sql脚本文件 @/Users/mark/Desktop/iotek_oracle.sql;</code></p>\n<h3 id=\"8-使用Navicat连接oracle\"><a href=\"#8-使用Navicat连接oracle\" class=\"headerlink\" title=\"8.使用Navicat连接oracle\"></a>8.使用Navicat连接oracle</h3><p>图片借用哈<br><img data-src=\"https://img2018.cnblogs.com/blog/1384393/202002/1384393-20200219000941495-1048166820.png\"></p>\n<p>注意：服务名helowin是镜像地址中的</p>\n<p><strong>常用的一些命令：</strong></p>\n<p><code>docker ps</code>是查看当前运行的容器</p>\n<p><code>docker ps -a </code>是查看所有容器（包括停止的）</p>\n<p><code>docker images</code>查看所有镜像</p>\n<p><code>docker run -h &quot;oracle&quot; --name &quot;oracle&quot; -d -p 49160:22 -p 49161:1521 -p 49162:8080 alexeiled/docker-oracle-xe-11g</code><br>​ -h “oracle”：指定容器的hostname为oracle</p>\n<p>　　–name “oracle”：将容器命名为oracle</p>\n<p>　　-d：在后台运行</p>\n<p>　　-p: 端口映射，格式为：主机(宿主)端口:容器端口</p>\n<p><strong>启动或停止oracle服务：</strong></p>\n<p><code>docker start oracle11g</code></p>\n<p><code>docker stop oracle11g</code></p>\n<h3 id=\"9-后续操作命令\"><a href=\"#9-后续操作命令\" class=\"headerlink\" title=\"9.后续操作命令\"></a>9.后续操作命令</h3><p>删除容器：</p>\n<blockquote>\n<p>docker rm [containerId]<br>删除镜像：<br>docker rmi [imageId]</p>\n</blockquote>\n<h3 id=\"10-使用终端打开sqlplus\"><a href=\"#10-使用终端打开sqlplus\" class=\"headerlink\" title=\"10.使用终端打开sqlplus\"></a>10.使用终端打开sqlplus</h3><p>由于本人电脑的配置原因，</p>\n<ul>\n<li>docker exec -it oracle11g bash<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export ORACLE_HOME&#x3D;&#x2F;home&#x2F;oracle&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;dbhome_2</span><br><span class=\"line\">export ORACLE_SID&#x3D;helowin</span><br><span class=\"line\">export PATH&#x3D;$ORACLE_HOME&#x2F;bin:$PATH</span><br><span class=\"line\">sqlplus &#x2F;nolog</span><br><span class=\"line\"></span><br><span class=\"line\">SQL*Plus: Release 11.2.0.1.0 Production on Fri Dec 4 15:03:36 2020</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 1982, 2009, Oracle.  All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":["数据库"],"tags":["环境搭建","Oracle"]},{"title":"Mac安装mysql-8.0.27","url":"/2021/11/03/Mac%E5%AE%89%E8%A3%85mysql-8-0-27/","content":"<h3 id=\"我的环境：\"><a href=\"#我的环境：\" class=\"headerlink\" title=\"我的环境：\"></a>我的环境：</h3><ul>\n<li>MacOs Big Sur 版本11.6</li>\n<li>mysql-8.0.27-macos11-x86_64.dmg</li>\n</ul>\n<h3 id=\"下载安装\"><a href=\"#下载安装\" class=\"headerlink\" title=\"下载安装\"></a>下载安装</h3><p>版本一定要下对，我踩过坑，</p>\n<p><img data-src=\"https://markchyl.cn/img/20180123204406478.png\"></p>\n<p>如图所示来查找对应系统安装版本，<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2Rvd25sb2Fkcy9teXNxbC8=\">官网下载地址是<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>打开终端<br>输入：cd /usr/local/mysql，回车执行<br>然后输入：sudo vim .bash_profile，回车执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!-- more --&gt;</span><br><span class=\"line\">#mysql环境变量</span><br><span class=\"line\">export MYSQL_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class=\"line\">export PATH&#x3D;$&#123;MYSQL_HOME&#125;&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>\n<p>记得<code>source ~/.bash_profile</code>让环境变量生效。</p>\n<p>最后使用输入mysql命令<code>mysql -u root -p</code>，即可使用。</p>\n","categories":["数据库"],"tags":["mysql"]},{"title":"Mac上搭建apktool反编译工具","url":"/2019/06/13/Mac%E4%B8%8A%E6%90%AD%E5%BB%BAapktool%E5%8F%8D%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7/","content":"<p>apktool下载地址：<br><code>https://ibotpeaches.github.io/Apktool/install/</code></p>\n<span id=\"more\"></span>\n<h3 id=\"1-在Chrome中，打开网址，找到图中所示Mac相关部分\"><a href=\"#1-在Chrome中，打开网址，找到图中所示Mac相关部分\" class=\"headerlink\" title=\"1.在Chrome中，打开网址，找到图中所示Mac相关部分\"></a>1.在Chrome中，打开网址，找到图中所示Mac相关部分</h3><p><img data-src=\"https://img-blog.csdnimg.cn/20191226175801984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\"></p>\n<h3 id=\"2-在Chrome中，打开网址，在“-wrapper-script”上点击鼠标右键，选择“链接存储为”\"><a href=\"#2-在Chrome中，打开网址，在“-wrapper-script”上点击鼠标右键，选择“链接存储为”\" class=\"headerlink\" title=\"2.在Chrome中，打开网址，在“ wrapper script”上点击鼠标右键，选择“链接存储为”\"></a>2.在Chrome中，打开网址，在“ wrapper script”上点击鼠标右键，选择“链接存储为”</h3><p><img data-src=\"https://upload-images.jianshu.io/upload_images/13001414-fb0faffd01c74a08.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\"><br>存储时，必须选择格式为“所有文件”，文件名为“apktool”，没有后缀(貌似有些浏览器不能选择格式，我在Chrome浏览器可以选择文件格式)<br> <img data-src=\"https://upload-images.jianshu.io/upload_images/13001414-217bcc315f02b99f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\"></p>\n<h3 id=\"3-点击“find-newest-here”进入下载页面，选择合适的版本，下载-jar文件，下载后文件名要改为“apktool-jar”\"><a href=\"#3-点击“find-newest-here”进入下载页面，选择合适的版本，下载-jar文件，下载后文件名要改为“apktool-jar”\" class=\"headerlink\" title=\"3.点击“find newest here”进入下载页面，选择合适的版本，下载.jar文件，下载后文件名要改为“apktool.jar”\"></a>3.点击“find newest here”进入下载页面，选择合适的版本，下载.jar文件，下载后文件名要改为“apktool.jar”</h3><p> <img data-src=\"https://upload-images.jianshu.io/upload_images/13001414-16b2c8e8c0b1dc31.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\"><br> <img data-src=\"https://upload-images.jianshu.io/upload_images/13001414-ae3dbce397cce0b3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\"></p>\n<h3 id=\"4-把apktool和apktool-jar文件移动到”-usr-local-bin”目录下，并使用终端命令为两个文件增加执行权限\"><a href=\"#4-把apktool和apktool-jar文件移动到”-usr-local-bin”目录下，并使用终端命令为两个文件增加执行权限\" class=\"headerlink\" title=\"4.把apktool和apktool.jar文件移动到”/usr/local/bin”目录下，并使用终端命令为两个文件增加执行权限\"></a>4.把apktool和apktool.jar文件移动到”/usr/local/bin”目录下，并使用终端命令为两个文件增加执行权限</h3><p>命令如下：<br><code>chmod +x apktool.jar apktool</code></p>\n<h3 id=\"5-验证是否安装成功\"><a href=\"#5-验证是否安装成功\" class=\"headerlink\" title=\"5.验证是否安装成功\"></a>5.验证是否安装成功</h3><p>在终端输入命令：apktool<br>打印如下信息：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191226185747298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\" alt=\"&quot;安装成功的打印新信息&quot;\" title=\"安装成功的打印新信息\"></p>\n","categories":["工具使用"],"tags":["反编译","工具搭建"]},{"title":"Mac安装Redis","url":"/2023/08/11/Mac%E5%AE%89%E8%A3%85Redis/","content":"<p>要在Mac上安装<code>Redis</code>，请按照以下步骤进行操作：</p>\n<ol>\n<li><p>打开终端应用程序</p>\n</li>\n<li><p>安装<code>Homebrew，Homebrew</code>是一个Mac上的包管理器。在终端中运行以下命令：</p>\n<p><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></p>\n<span id=\"more\"></span>\n</li>\n<li><p>安装<code>Redis</code>，运行以下命令：</p>\n<p><code>brew install redis</code></p>\n</li>\n<li><p>启动<code>Redis</code>，运行以下命令：</p>\n<p><code>redis-server</code></p>\n</li>\n<li><p>（可选）如果您想在后台运行<code>Redis</code>，请使用以下命令：</p>\n<p><code>redis-server --daemonize yes</code></p>\n</li>\n<li><p>（可选）如果您想在每次启动Mac时自动启动<code>Redis</code>，请使用以下命令：</p>\n<p><code>brew services start redis</code></p>\n<p><code>brew services stop redis </code></p>\n</li>\n</ol>\n<p>现在您已经成功地安装和启动了<code>Redis</code>。您可以在终端中使用<code>redis-cli</code>命令来连接到<code>Redis</code>服务器并进行交互式操作。</p>\n","categories":["中间件"],"tags":["Redis","Mac"]},{"title":"Mac电脑maven安装与配置","url":"/2021/05/13/Mac%E7%94%B5%E8%84%91maven%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vemR6ODIwNy9wL21hYy1qYXZhLW1hdmVuLmh0bWw=\">原文地址：大自然的流风<i class=\"fa fa-external-link-alt\"></i></span></p>\n<hr>\n<h3 id=\"Mac电脑maven安装与配置\"><a href=\"#Mac电脑maven安装与配置\" class=\"headerlink\" title=\"Mac电脑maven安装与配置\"></a>Mac电脑maven安装与配置</h3><ol>\n<li><p>下载：<span class=\"exturl\" data-url=\"aHR0cDovL21hdmVuLmFwYWNoZS5vcmcvZG93bmxvYWQuY2dp\">http://maven.apache.org/download.cgi<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>安装：解压下载好的maven的文件，解压到你想要的文件夹下。</p>\n</li>\n<li><p>配置：打开终端输入命令 sudo vim ~/.bash_profile （编辑环境变量配置文件）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export MAVEN_HOME&#x3D;maven文件夹路径</span><br><span class=\"line\">export PATH&#x3D;$PATH:$MAVEN_HOME&#x2F;bin</span><br></pre></td></tr></table></figure>\n<p><strong>小技巧</strong></p>\n<blockquote>\n<p>复制文件夹路径方法：点击文件夹，然后使用组合快捷键：command + option + c 就会把路径复制到粘贴板了。<br>或者把文件夹拖放到控制台也可以显示出来<br>让mac文件夹显示文件夹和文件路径，执行命令：defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES</p>\n</blockquote>\n</li>\n<li><p><code>:wq</code>退出并保存当前文件,<code>source .bash_profile</code>，按下Enter键使bash_profile生效。<br><code>mvn -v</code>查看是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Markxiansheng ~ % mvn -v</span><br><span class=\"line\">Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)</span><br><span class=\"line\">Maven home: &#x2F;Users&#x2F;mark&#x2F;Library&#x2F;maven&#x2F;apache-maven-3.8.1</span><br><span class=\"line\">Java version: 11.0.11, vendor: Amazon.com Inc., runtime: &#x2F;Users&#x2F;mark&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;corretto-11.0.11&#x2F;Contents&#x2F;Home</span><br><span class=\"line\">Default locale: zh_CN_#Hans, platform encoding: UTF-8</span><br><span class=\"line\">OS name: &quot;mac os x&quot;, version: &quot;10.15.7&quot;, arch: &quot;x86_64&quot;, family: &quot;mac&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":["环境配置"],"tags":["Maven"]},{"title":"Mark的Flutter的安装和环境配置","url":"/2018/12/17/Mark%E7%9A%84Flutter%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","content":"<h2 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h2><pre><code>    我是一名Android原生开发程序员，目前熟练掌握Java语言和kotlin语言去编写安卓。RN出来的时候我没去学习，现在我想赶上Flutter这列火车。</code></pre>\n<span id=\"more\"></span>\n<hr>\n<h3 id=\"我的配置：\"><a href=\"#我的配置：\" class=\"headerlink\" title=\"我的配置：\"></a>我的配置：</h3><ul>\n<li>Mac笔记本</li>\n<li>Android Studio 3.2.0 版本</li>\n<li>准备了翻墙的软件，貌似没怎么用上</li>\n</ul>\n<hr>\n<h3 id=\"第一步：获取Flutter代码\"><a href=\"#第一步：获取Flutter代码\" class=\"headerlink\" title=\"第一步：获取Flutter代码\"></a>第一步：获取Flutter代码</h3><ol>\n<li><p>我先选择了一个存储Flutter的文件夹：</p>\n<p> <img data-src=\"evernotecid://3DE7A385-FFCA-4630-91A9-F88E73A63AF0/appyinxiangcom/22109192/ENResource/p1\" alt=\"56a74cdc0cf7522961022dcd31a0f3ca.png\"><br>名字跟随自己的命名习惯。</p>\n</li>\n<li><p>克隆Flutter代码到本地目录：<br>两种方式：自己在GitHub 上面把SDK下下来放到文件中，或者通过终端输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone  https:&#x2F;&#x2F;github.com&#x2F;flutter&#x2F;flutter.git</span><br></pre></td></tr></table></figure>\n<p> 最后就是一样的配置：open .bash_profile打开添加以下路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export PATH&#x3D;本地目录&#x2F;flutter&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure>\n<pre><code> 配置完了后，应该可以运行Flutter命令了！可以使用下面命令flutter doctor来检查依赖环境是否正常。如果下载有问题的话，可能是网络受限，如果你没有翻墙软件的话，在终端输入如下两条命令：</code></pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export PUB_HOSTED_URL&#x3D;https:&#x2F;&#x2F;pub.flutter-io.cn</span><br><span class=\"line\">export FLUTTER_STORAGE_BASE_URL&#x3D;https:&#x2F;&#x2F;storage.flutter-io.cn</span><br></pre></td></tr></table></figure>\n<p>官方也给出了方法，就是使用国内的镜像节点下载，在运行flutter doctor之前先运行下面两个命令即可。<br><img data-src=\"evernotecid://3DE7A385-FFCA-4630-91A9-F88E73A63AF0/appyinxiangcom/22109192/ENResource/p2\" alt=\"a51a64a974501d1bf53d7f4cd5f82ab2.png\"></p>\n</li>\n</ol>\n<hr>\n<h3 id=\"第二步：配置IOS环境\"><a href=\"#第二步：配置IOS环境\" class=\"headerlink\" title=\"第二步：配置IOS环境\"></a>第二步：配置IOS环境</h3><p>我在 App Store下载安装好了Xcode，然后自己安装了Homebrew：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icmV3LnNoLw==\">Homebrew配置方法地址：<i class=\"fa fa-external-link-alt\"></i></span><br>接下来我就是执行如下的命令：<br>open -a Simulator – 测试成功打开模拟器</p>\n<h6 id=\"安装用于将Flutter应用部署到iOS设备的工具\"><a href=\"#安装用于将Flutter应用部署到iOS设备的工具\" class=\"headerlink\" title=\"安装用于将Flutter应用部署到iOS设备的工具\"></a>安装用于将Flutter应用部署到iOS设备的工具</h6><p>$ brew update<br>$ brew install –HEAD libimobiledevice<br>$ brew install ideviceinstaller ios-deploy cocoapods<br>$ pod setup<br>此处我就是无耻的copy的别人的文章，那位大佬的文章地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYjczY2MyYWY2NWY=\">Flutter轻松入门（一） – MAC环境搭建<i class=\"fa fa-external-link-alt\"></i></span></p>\n<hr>\n<h3 id=\"第三步：在Android-Studio上配置Android开发环境\"><a href=\"#第三步：在Android-Studio上配置Android开发环境\" class=\"headerlink\" title=\"第三步：在Android Studio上配置Android开发环境\"></a>第三步：在Android Studio上配置Android开发环境</h3><p>插件怎么安装就不废话啦，直接截图，它会自动安装Flutter和Dart语言插件，Dart有时候可能会安装失败，请耐心点，也可以单独搜Dart进行安装。<br><img data-src=\"evernotecid://3DE7A385-FFCA-4630-91A9-F88E73A63AF0/appyinxiangcom/22109192/ENResource/p3\" alt=\"cd5198371c3b49034b3de9a8c41ecf19.png\"></p>\n<h3 id=\"最后终端运行-Flutter-Doctor\"><a href=\"#最后终端运行-Flutter-Doctor\" class=\"headerlink\" title=\"最后终端运行 Flutter Doctor\"></a>最后终端运行 Flutter Doctor</h3><p>检查Flutter开发环境是否配置完成，我的如下图：<br><img data-src=\"evernotecid://3DE7A385-FFCA-4630-91A9-F88E73A63AF0/appyinxiangcom/22109192/ENResource/p4\" alt=\"586b6df21a8997dcfeb10164a1e39ec4.png\"></p>\n<hr>\n<p>笔记收尾处我还得为微我参考的文章打个广告：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wYjczY2MyYWY2NWY=\">Flutter轻松入门（一） – MAC环境搭建<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Flutter"],"tags":["Android","Flutter"]},{"title":"Mac连接京瓷打印机Fs-1030MFP/DP","url":"/2021/05/13/Mac%E8%BF%9E%E6%8E%A5%E4%BA%AC%E7%93%B7%E6%89%93%E5%8D%B0%E6%9C%BAFs-1030MFP-DP/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">graph TB</span><br><span class=\"line\">    A0[进入系统偏好设置] --&gt; B0[打印机与扫描仪] --&gt; C0[添加打印机] --&gt;  D0[选择IP]</span><br><span class=\"line\">    D0[选择IP]  --&gt; E0[ 输入IP地址,协议选择行式打印机监控程序-LPD,使用那选择普通PCL打印机,然后系统会自动添加打印机驱动]  --&gt; F0[OK开始打印吧] </span><br></pre></td></tr></table></figure>\n<ol>\n<li>进入系统偏好设置。</li>\n<li>打印机与扫描仪</li>\n<li>添加打印机</li>\n<li>选择IP</li>\n<li>输入IP地址，协议选择“行式打印机监控程序-LPD”，使用那选择“普通PCL打印机”，然后系统会自动添加打印机驱动。</li>\n<li>OK开始打印吧</li>\n</ol>\n<hr>\n<p>就是这么简单</p>\n","categories":["工具使用"],"tags":["工具搭建"]},{"title":"Android 架构MVC MVP MVVM","url":"/2021/09/01/Mark%E7%9A%84%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%20Android_MVVM/","content":"<h2 id=\"MVVM是什么\"><a href=\"#MVVM是什么\" class=\"headerlink\" title=\"MVVM是什么\"></a>MVVM是什么</h2><blockquote>\n<p>是 Model-View-ViewModel 的简写。MVVM与MVP的结构还是很相似的，就是将Presenter升级为ViewModel。在MVVM中，View层和Model层进行了双向绑定(即Data Binding)，所以Model数据的更改会表现在View上，反之亦然。ViewModel就是用来根据具体情况处理View或Model的变化。</p>\n</blockquote>\n<h3 id=\"Android中的MVVM含义\"><a href=\"#Android中的MVVM含义\" class=\"headerlink\" title=\"Android中的MVVM含义\"></a>Android中的MVVM含义</h3><ul>\n<li><strong>Model</strong>：实体类(数据的获取、存储、数据状态变化)。</li>\n<li><strong>View</strong>：布局文件+Activity。</li>\n<li><strong>ViewModel</strong>： 关联层，将Model和View进行绑定，Model或View更改时，实时刷新对方。</li>\n</ul>\n<p>工作原理<br><img data-src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4cb68983949e49fe93a6d31aa8c2bcd9~tplv-k3u1fbpfcp-watermark.awebp\"></p>\n<ul>\n<li>1.View 接收用户交互请求</li>\n<li>2.View 将请求转交给ViewModel</li>\n<li>3.ViewModel 操作Model数据更新</li>\n<li>4.Model 更新完数据，通知ViewModel数据发生变化</li>\n<li>5.ViewModel 更新View数据</li>\n</ul>\n<h3 id=\"MVVM的优点\"><a href=\"#MVVM的优点\" class=\"headerlink\" title=\"MVVM的优点\"></a>MVVM的优点</h3><ul>\n<li>1.提高可维护性。Data Binding可以实现双向的交互，使得视图和控制层之间的耦合程度进一步降低，分离更为彻底，同时减轻了Activity的压力。</li>\n<li>2.简化测试。因为同步逻辑是交由Binder做的，View跟着Model同时变更，所以只需要保证Model的正确性，View就正确。大大减少了对View同步更新的测试。</li>\n<li>3.ViewModle易于单元测试。</li>\n</ul>\n<h3 id=\"MVVM的缺点\"><a href=\"#MVVM的缺点\" class=\"headerlink\" title=\"MVVM的缺点\"></a>MVVM的缺点</h3><ul>\n<li>1.对于简单的项目，使用MVVM有点大材小用。</li>\n<li>2.对于过大的项目，数据绑定会导致内存开销大，影响性能。</li>\n<li>3.ViewModel和View的绑定，使页面异常追踪变得不方便。有可能是View出错，也有可能是ViewModel的业务逻辑有问题，也有可能是Model的数据出错。</li>\n</ul>\n<h2 id=\"MVP和MVC的最大区别\"><a href=\"#MVP和MVC的最大区别\" class=\"headerlink\" title=\"MVP和MVC的最大区别\"></a>MVP和MVC的最大区别</h2><blockquote>\n<p>在MVP中View并不直接使用Model，它们之间的通信是通过Presenter 来进行的，所有的交互都发生在Presenter内部，而在MVC中View直接从Model中读取数据而不是通过 Controller。</p>\n</blockquote>\n<h2 id=\"如何选取框架\"><a href=\"#如何选取框架\" class=\"headerlink\" title=\"如何选取框架\"></a>如何选取框架</h2><p>适合自己的才是最好的</p>\n","categories":["Android"],"tags":["Android","架构"]},{"title":"Mark的Retrofit学习第一篇","url":"/2018/12/17/Mark%E7%9A%84Retrofit%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E7%AF%87/","content":"<h2 id=\"Retrofit介绍\"><a href=\"#Retrofit介绍\" class=\"headerlink\" title=\"Retrofit介绍 :\"></a>Retrofit介绍 :</h2><p>改造将您的HTTP API变成一个Java界面。Square公司针对Android和Java的类型安全HTTP客户端<br>       Retrofit是Square公司开发的一款针对Android网络请求的框架，Retrofit2底层基于OkHttp实现的，OkHttp现在已经得到Google官方认可，大量的app都采用OkHttp做网络请求，其源码详见OkHttp Github。</p>\n<pre><code>   每个方法都必须有一个提供请求方法和相对URL的HTTP注释。有五个内置注释：GET，POST，PUT，DELETE，和HEAD。资源的相对URL在注释中指定。</code></pre>\n<span id=\"more\"></span>\n<h2 id=\"一、声明接口\"><a href=\"#一、声明接口\" class=\"headerlink\" title=\"一、声明接口\"></a>一、声明接口</h2><p>public interface GitHubService {<br>  @GET(“users/{user}/repos”)<br>  Call&lt;List<Repo>&gt; listRepos(@Path(“user”) String user);<br>}</p>\n<p>///Retrofit turns your HTTP API into a Java interface.</p>\n<p>eg：例子：<br>如果链接是<span class=\"exturl\" data-url=\"aHR0cDovL2lwLnRhb2Jhby5jb20vc2VydmljZS9nZXRJcEluZm8ucGhwP2lwPTIwMi4yMDIuMzMuMzM=\">http://ip.taobao.com/service/getIpInfo.php?ip=202.202.33.33<i class=\"fa fa-external-link-alt\"></i></span><br> @GET(“<span class=\"exturl\" data-url=\"aHR0cDovL2lwLnRhb2Jhby5jb20vc2VydmljZS9nZXRJcEluZm8ucGhwIg==\">http://ip.taobao.com/service/getIpInfo.php&quot;<i class=\"fa fa-external-link-alt\"></i></span>)<br>    Call getWeather(@Query(“ip”) String ip);</p>\n<p>注意：这里强调一点：Call get();必须是这种形式,这是2.0之后的新形式</p>\n<ul>\n<li>如果不需要转换成Json数据,可以用了ResponseBody;</li>\n<li>你也可以使用Call get();这样的话,需要添加Gson转换器</li>\n</ul>\n<h2 id=\"二、接口调用\"><a href=\"#二、接口调用\" class=\"headerlink\" title=\"二、接口调用\"></a>二、接口调用</h2><p>Retrofit retrofit = new Retrofit.Builder()<br> //这里建议：- Base URL: 总是以/结尾；- @Url: 不要以/开头<br>    .baseUrl(“<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS8i\">https://api.github.com/&quot;<i class=\"fa fa-external-link-alt\"></i></span>)<br>    .build();</p>\n<p>GitHubService service = retrofit.create(GitHubService.class);</p>\n<p>Call&lt;List<Repo>&gt; repos = service.listRepos(“octocat”);</p>\n<p>//The Retrofit class generates an implementation of the GitHubService interface.<br>强调一点：如果你的@GET后面的URL地址是全拼的地址，那么baseurl就会设置的没有必要，留意哦！！！</p>\n<h2 id=\"三、同步调用\"><a href=\"#三、同步调用\" class=\"headerlink\" title=\"三、同步调用\"></a>三、同步调用</h2><p>  try {<br>            Response bodyResponse = call.execute();<br>            String body = bodyResponse.body().string();//获取返回体的字符串<br>            Log.i(“wxl”, “body=” + body);<br>        } catch (IOException e) {<br>            e.printStackTrace();<br>注意：同步需要处理android.os.NetworkOnMainThreadException</p>\n<h2 id=\"四、异步调用\"><a href=\"#四、异步调用\" class=\"headerlink\" title=\"四、异步调用\"></a>四、异步调用</h2><p>call.enqueue(new Callback() {<br>            @Override<br>            public void onResponse(Response response) {<br>                try {<br>                    Log.i(“wxl”, “response=” + response.body().string());<br>                } catch (IOException e) {<br>                    e.printStackTrace();<br>            @Override<br>            public void onFailure(Throwable t) {<br>                Log.i(“wxl”, “onFailure=” + t.getMessage());<br>        });</p>\n<p>注意这里看不懂的可以参考我的GitHub代码地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtSZXRyb2ZpdERlbW8=\">https://github.com/MarkCHYL/MarkRetrofitDemo<i class=\"fa fa-external-link-alt\"></i></span><br>项目中添加了简单的使用方法，只做到如何获取网络接口的数据。</p>\n<h2 id=\"五、移除请求\"><a href=\"#五、移除请求\" class=\"headerlink\" title=\"五、移除请求\"></a>五、移除请求</h2><p>call.cancel();</p>\n<h2 id=\"六、添加gson依赖\"><a href=\"#六、添加gson依赖\" class=\"headerlink\" title=\"六、添加gson依赖\"></a>六、添加gson依赖</h2><p> implementation ‘com.squareup.retrofit2:converter-gson:2.3.0’<br>这里我选择的是与retrofit统一版本的，我怕报错</p>\n<p>后续我会进一步封装！！！</p>\n<h2 id=\"七、Retrofit2打印-网络请求日志\"><a href=\"#七、Retrofit2打印-网络请求日志\" class=\"headerlink\" title=\"七、Retrofit2打印 网络请求日志\"></a>七、Retrofit2打印 网络请求日志</h2><p>添加依赖：<br> implementation ‘com.squareup.okhttp3:logging-interceptor:3.8.1’</p>\n<h2 id=\"然后就是你初始化拦截器加配置；这个很简单我参考了以下两篇文章\"><a href=\"#然后就是你初始化拦截器加配置；这个很简单我参考了以下两篇文章\" class=\"headerlink\" title=\"然后就是你初始化拦截器加配置；这个很简单我参考了以下两篇文章\"></a>然后就是你初始化拦截器加配置；这个很简单我参考了以下两篇文章</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTE1MTEzNjgvYXJ0aWNsZS9kZXRhaWxzLzUxNzUzMzE1\">https://blog.csdn.net/u011511368/article/details/51753315<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1BpY2Fzc29fTC9hcnRpY2xlL2RldGFpbHMvNTMyMDA5MjY=\">https://blog.csdn.net/Picasso_L/article/details/53200926<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"最后附上自己的Github的Demo\"><a href=\"#最后附上自己的Github的Demo\" class=\"headerlink\" title=\"最后附上自己的Github的Demo\"></a>最后附上自己的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtSZXRyb2ZpdERlbW8=\">Github的Demo<i class=\"fa fa-external-link-alt\"></i></span></h3>","categories":["Android"],"tags":["Android","网络框架"]},{"title":"Mark的架构学习笔记---Android_MVP","url":"/2018/12/17/Mark%E7%9A%84%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Android-MVP/","content":"<h1 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h1><p>   我是名安卓程序员。当我第一次接触到架构这个概念时，说实话我一头雾水。我现实了解了MVC模式，当我开始接触MVP模式时，我啊真的彻底被搞懵了！怎么把一个activity拆成了四个或五者，如果分装过后会更多，想象下，一下子猛的看那么复杂的对我来说无益处。这边文章呢我实现只是一个加你简单单的Demo练习，参考代码和资料来源于网上（备注于文底部）。<br>   记录只是让自己加深理解。</p>\n<span id=\"more\"></span>\n<p><img data-src=\"https://user-gold-cdn.xitu.io/2018/7/30/164e8dc7b3e27bb6?w=696&h=812&f=png&s=257193\" alt=\"这是我的Demo代码架构\" title=\"这是我的Demo代码架构\"></p>\n<hr>\n<ul>\n<li><h2 id=\"跟着大佬学习下MVP模式：\"><a href=\"#跟着大佬学习下MVP模式：\" class=\"headerlink\" title=\"跟着大佬学习下MVP模式：\"></a>跟着大佬学习下MVP模式：</h2> MVP是模型（Model）、视图（View）、主持人（Presenter）的缩写，分别代表项目中3个不同的模块。</li>\n</ul>\n<p><img data-src=\"https://user-gold-cdn.xitu.io/2018/7/30/164e9021bf594592?w=728&h=618&f=png&s=38130\" title=\"MVP模式示意图\"><br>说明：</p>\n<ul>\n<li>步骤1：UI实现View方法，引用Presenter</li>\n<li>步骤2：Presenter调用Model，走Model具体逻辑</li>\n<li>步骤3：Model逻辑实现，回调Presenter方法</li>\n<li>步骤4：Presenter回调View，即回到UI，回调View方法</li>\n</ul>\n<hr>\n<h2 id=\"首先我们定义下View层\"><a href=\"#首先我们定义下View层\" class=\"headerlink\" title=\"首先我们定义下View层\"></a>首先我们定义下View层</h2><p>   定义接口 <strong>IUserView</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public interface IUserView &#123;</span><br><span class=\"line\">    UserBean getUser();</span><br><span class=\"line\">    void setUser(UserBean bean);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  一个是拿到数据，一个是把数据给别人，<br>  我们需要让我们的Activity去实现这个接口里面的方法，<br>  然后去做一些数据的显示或者获取。 Presenter与View交互是通过接口。所以我们这里需要定义一个IUserView，<br>  难点就在于应该有哪些方法，我们看一眼效果图会发现一个是保存，一个是载入，<br>  所以我们就创建两个方法，分别是：getUser和setUser；<br>  然后再MainActivity中与实现这个View层的接口<br>  如图所示：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  public class MainActivity extends AppCompatActivity implements IUserView &#123;</span><br><span class=\"line\">    private UserPresenter presenter;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        presenter &#x3D; new UserPresenter(this);</span><br><span class=\"line\">        initEvent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private void initEvent() &#123;</span><br><span class=\"line\">        findViewById(R.id.btn_load).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                presenter.loadUser();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        findViewById(R.id.btn_save).setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                presenter.saveUser();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public UserBean getUser() &#123;</span><br><span class=\"line\">        int id &#x3D; Integer.valueOf(et_id.getText().toString().trim());</span><br><span class=\"line\">        String name &#x3D; et_name.getText().toString().trim();</span><br><span class=\"line\">        if (name !&#x3D; null) &#123;</span><br><span class=\"line\">            UserBean bean &#x3D; new UserBean();</span><br><span class=\"line\">            bean.setId(id);</span><br><span class=\"line\">            bean.setName(name);</span><br><span class=\"line\">            return bean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void setUser(UserBean bean) &#123;</span><br><span class=\"line\">        if (bean!&#x3D;null)&#123;</span><br><span class=\"line\">            tv_data_show.setText(bean.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#x2F;&#x2F;省略了部分控件的初始化代码</span><br></pre></td></tr></table></figure><br>  是不是觉得曾在某个文章中看见过，哈哈哈，自己敲一边你会得到自己的理解。</p>\n<hr>\n<h2 id=\"定义下Model层\"><a href=\"#定义下Model层\" class=\"headerlink\" title=\"定义下Model层\"></a>定义下Model层</h2><ul>\n<li>首先我们的更具接口或者你的业务代码去定义自己的实体类 <strong>UserBean</strong><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   public class UserBean &#123;</span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\">    </span><br><span class=\"line\">    ...getter and setter 方法</span><br><span class=\"line\">    </span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;UserBean&#123;&quot; +</span><br><span class=\"line\">                &quot;id&#x3D;&quot; + id +</span><br><span class=\"line\">                &quot;, name&#x3D;&#39;&quot; + name + &#39;\\&#39;&#39; +</span><br><span class=\"line\">                &#39;&#125;&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>实体类的接口 IUser<blockquote>\n<p>这里大家要注意一下，IUser里面主要是接口，首先，我们要想好，在Presenter中要实现哪些逻辑，要用到哪些方法，然后就在这里定义哪些方法。User主要是IUser的实现，返回一些数据，具体返回那些数据，就有大家自己去根据实际情况而定。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   public interface IUser &#123;</span><br><span class=\"line\">    void savaUserInfo(UserBean user);</span><br><span class=\"line\">    UserBean loadUserInfo();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>实体类的业务实现类 <strong>User</strong><blockquote>\n<p>这里主要是实现<strong>IUser</strong>接口里面定义的业务实现方法，你想干啥干就可以在里面自己凿凿</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">   public class User implements IUser &#123;</span><br><span class=\"line\">    private UserBean bean;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void savaUserInfo(UserBean user) &#123;</span><br><span class=\"line\">        this.bean &#x3D; user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public UserBean loadUserInfo() &#123;</span><br><span class=\"line\">        if (bean !&#x3D; null) &#123;</span><br><span class=\"line\">            return bean;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return null;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"定义最重要的Presenter层\"><a href=\"#定义最重要的Presenter层\" class=\"headerlink\" title=\"定义最重要的Presenter层\"></a>定义最重要的Presenter层</h2><blockquote>\n<p>是连接Activity(在这可以理解为就是View层，因为Activity实现了 <strong>IUserView</strong> 接口)和Model的重要桥梁，所有的业务逻辑都在它里面完成：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class UserPresenter &#123;</span><br><span class=\"line\">    private IUser user;</span><br><span class=\"line\">    private IUserView userView;</span><br><span class=\"line\">    public UserPresenter(IUserView userView) &#123;</span><br><span class=\"line\">        this.userView &#x3D; userView;</span><br><span class=\"line\">        user &#x3D; new User();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void saveUser()&#123;</span><br><span class=\"line\">        user.savaUserInfo(userView.getUser());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public void loadUser()&#123;</span><br><span class=\"line\">        userView.setUser(user.loadUserInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtfTVZQX1NhbXBsZQ==\" title=\"源码地址\">源码地址<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<p>下一篇我会结合自己封装的retrofit写一个网络请求的demo笔记，加油⛽️</p>\n","categories":["Android"],"tags":["Android","架构"]},{"title":"Mark的个人博客搭建","url":"/2018/12/14/Mark%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","content":"<hr>\n<h1 id=\"标题-Mark的个人博客搭建\"><a href=\"#标题-Mark的个人博客搭建\" class=\"headerlink\" title=\"标题: Mark的个人博客搭建\"></a><strong>标题: Mark的个人博客搭建</strong></h1><hr>\n<h3 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a><strong>一、前言</strong></h3><blockquote>\n<p>大家好，我是Mark，一个Android程序员，目前从事软件应用开发，\b其实我很早就像想很多的大佬们一样拥有自己的博客，在下在网上搜了一波，发现可以通过 GitHub + Hexo 搭建自己个人的博客，这次我就想彻底好好的把这个弄好，主要是可以方便自己把自己的笔记\b记录在上面，方便自己的以后的只是复习。我的脑子不太好使，记东西过了不久就会忘记，好记性不容烂笔头，对于一个程序员如果还在用笔记本自己\b手写笔记\b确实让我自己感到惭愧，程序的代码量和知识点很多，若是每个自己的笔记都去用手写，那样我的工作效率就会很低。在此我想大家推荐，</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"二、记录下我搭建此博客方法\"><a href=\"#二、记录下我搭建此博客方法\" class=\"headerlink\" title=\"二、记录下我搭建此博客方法\"></a><strong>二、记录下我搭建此博客方法</strong></h3><p>\b利用GitHub + Hexo 搭建个人的博客，网上有很多的大佬的文章，这里我想大家推荐一个博客文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamFja3lyb2MvcC83NjgxOTM4Lmh0bWw=\">JackyRoc的文章链接<i class=\"fa fa-external-link-alt\"></i></span>，至于怎么利用Hexo在下推荐先看看此文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGl1eGlhbmFuL3AvYnVpbGQtYmxvZy13ZWJzaXRlLWJ5LWhleG8tZ2l0aHViLmh0bWw=\">小茗同学的博客园<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>好了！现在开始记录我自己的搭建步骤：</p>\n<h4 id=\"首先：我们的搭建环境是-MacBook-Pro，准备的编写博客的编辑器-Visual-Studio-Code-GitHub，以及重要的安装好-git，再就是很重要的是耐心和百折不挠的信息。Start！！！\"><a href=\"#首先：我们的搭建环境是-MacBook-Pro，准备的编写博客的编辑器-Visual-Studio-Code-GitHub，以及重要的安装好-git，再就是很重要的是耐心和百折不挠的信息。Start！！！\" class=\"headerlink\" title=\"首先：我们的搭建环境\b是 MacBook Pro，准备的编写博客的编辑器 Visual Studio Code,GitHub，以及重要的安装好 git，再就是很重要的是耐心和百折不挠的信息。Start！！！\"></a>首先：我们的搭建环境\b是 MacBook Pro，准备的编写博客的编辑器 <strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20vP3d0Lm1jX2lkPURYXzg0MTQzMg==\">Visual Studio Code<i class=\"fa fa-external-link-alt\"></i></span></strong>,<strong>GitHub</strong>，以及重要的安装好 <strong>git</strong>，再就是很重要的是耐心和百折不挠的信息。Start！！！</h4><h3 id=\"1-创建仓库（https-markchyl-github-io-）\"><a href=\"#1-创建仓库（https-markchyl-github-io-）\" class=\"headerlink\" title=\"1. 创建仓库（https://markchyl.github.io/）\"></a>1. 创建仓库（<a href=\"https://markchyl.github.io/%EF%BC%89\">https://markchyl.github.io/）</a></h3><p>   仓库的名字是这个格式 XXXXX.github.io，XXXXX 就是你的自己可以定义的，后面的 .github.io 一定要这样，当然如果你有自己的个人域名地址也是可以在后面的步骤中绑定的。创建仓库的步骤我就不啰嗦了！简单。</p>\n<h3 id=\"2-Hexo的安装\"><a href=\"#2-Hexo的安装\" class=\"headerlink\" title=\"2. Hexo的安装\"></a>2. Hexo的安装</h3><p>   要使用Hexo,需要安装Nodejs以及Git，<br>   <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydW5vb2IuY29tL25vZGVqcy9ub2RlanMtaW5zdGFsbC1zZXR1cC5odG1s\">参考:安装Node.js<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>   在你需要安装Hexo的目录下(新建一个文件夹)右键选择 Git Bash</p>\n<p>npm install hexo-cli -g<br>hexo init #初始化网站<br>npm install<br>hexo g #生成或 hexo generate<br>hexo s #启动本地服务器 或者 hexo server,这一步之后就可以通过<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000<i class=\"fa fa-external-link-alt\"></i></span>  查看了<br>详细命令请参考Hexo文档</p>\n<p>这里介绍一下怎么创建一篇文章</p>\n<p>hexo new “文章名” #新建文章<br>hexo new page “页面名” #新建页面<br>常用简写</p>\n<p>hexo n == hexo new<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy<br>新建一篇文章后就可以预览了,在hexo new之后执行一次生成hexo g再执行hexo s启动本地服务器,如果之前还在hexo s 按Ctrl + C 结束.</p>\n<h3 id=\"3-添加主题\"><a href=\"#3-添加主题\" class=\"headerlink\" title=\"3.添加主题\"></a>3.添加主题</h3><p>安装主题(yilia主题):<br>hexo clean<br>git clone <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdHRlbi9oZXhvLXRoZW1lLXlpbGlhLmdpdA==\">https://github.com/litten/hexo-theme-yilia.git<i class=\"fa fa-external-link-alt\"></i></span> themes/yilia<br>启动主题<br>找到目录下的_config.yml 文件,打开找到 theme：属性并设置为yilia</p>\n<p>更新主题<br>cd themes/yilia<br>git pull<br>hexo g<br>hexo s<br>此时刷新<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLyVFOSVBMSVCNSVFOSU5RCVBMiVFNSVCMCVCMSVFOCU4MyVCRCVFNyU5QyU4QiVFNSU4OCVCMCVFNiU5NiVCMCVFNyU5QSU4NCVFNCVCOCVCQiVFOSVBMiU5OCVFNCVCQSU4Ng==\">http://localhost:4000/页面就能看到新的主题了<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<h3 id=\"4-部署到Github\"><a href=\"#4-部署到Github\" class=\"headerlink\" title=\"4. 部署到Github\"></a>4. 部署到Github</h3><p>1.检查SSH keys的设置</p>\n<p>以下命令均是在Git bash里输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd ~&#x2F;.ssh</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure>\n<p>#此时会显示一些文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir key_backup</span><br><span class=\"line\">cp id_rsa* key_backup</span><br><span class=\"line\">rm id_rsa* </span><br></pre></td></tr></table></figure>\n\n<p>#以上三步为备份和移除原来的SSH key设置</p>\n<blockquote>\n<p>ssh-keygen -t rsa -C “邮件地址@youremail.com” #生成新的key文件,</p>\n</blockquote>\n<p><strong>邮箱地址填你的Github地址</strong></p>\n<hr>\n<p>#Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;<br>#接下来会让你输入密码<br>之后就可以看到成功的界面。</p>\n<hr>\n<p>2.添加SSH Key到Github<br>进入github首页在设置洁面<br><img data-src=\"https://images2017.cnblogs.com/blog/1250458/201710/1250458-20171017153636849-294935886.png\"></p>\n<hr>\n<h4 id=\"添加SSH-Key\"><a href=\"#添加SSH-Key\" class=\"headerlink\" title=\"添加SSH Key\"></a>添加SSH Key</h4><p><img data-src=\"https://images2017.cnblogs.com/blog/1250458/201710/1250458-20171017153642521-647884655.png\"><br>找到系统当前用户目录下(开启查看隐藏文件) C:\\Users\\用户名\\ .ssh id_rsa.pub文件以文本方式打开。打开之后全部复制到key中<br><img data-src=\"https://images2017.cnblogs.com/blog/1250458/201710/1250458-20171017153648631-441574444.png\"><br>到了这就可以测试一下是否成功了:</p>\n<p>ssh -T <span class=\"exturl\" data-url=\"bWFpbHRvOiYjMTAzOyYjeDY5OyYjeDc0OyYjNjQ7JiN4Njc7JiMxMDU7JiMxMTY7JiMxMDQ7JiMxMTc7JiN4NjI7JiN4MmU7JiN4NjM7JiMxMTE7JiN4NmQ7\">&#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d;<i class=\"fa fa-external-link-alt\"></i></span><br>#之后会要你输入yes/no,输入yes就好了。<br>设置你的账号信息:</p>\n<p>git config –global user.name “你的名字”     #真实名字不是github用户名<br>git config –global user.email “邮箱@邮箱.com”    #github邮箱<br>3.部署到github<br>hexo d<br>这时再刷新 username.github.io 就可以看到你的博客了。</p>\n<p>到了这你以为就结束了吗？没有，还有坑没有给你们填好。</p>\n<p>如果你的SSH配置的时候哪找的.ssh文件的化，\b可以参照<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYWlsaWFpbGFuL3AvODU3NzQxMS5odG1s\">mac 上传本地代码到 Github 教程<i class=\"fa fa-external-link-alt\"></i></span>,我就是参照上面的步骤配置的。</p>\n","categories":["工具使用"],"tags":["Hexo","工具搭建"]},{"title":"Monkey自动化压力测试","url":"/2020/06/22/Monkey%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/","content":"<h2 id=\"第一部分-背景\"><a href=\"#第一部分-背景\" class=\"headerlink\" title=\"第一部分 背景\"></a>第一部分 背景</h2><h3 id=\"1、为什么要开展压力测试？\"><a href=\"#1、为什么要开展压力测试？\" class=\"headerlink\" title=\"1、为什么要开展压力测试？\"></a>1、为什么要开展压力测试？</h3><ul>\n<li>提高产品的稳定性</li>\n<li>提高产品的留存率<h3 id=\"2、什么时候开展压力测试？\"><a href=\"#2、什么时候开展压力测试？\" class=\"headerlink\" title=\"2、什么时候开展压力测试？\"></a>2、什么时候开展压力测试？</h3></li>\n<li>首轮功能测试通过后开始</li>\n<li>下班后的夜间进行<h2 id=\"第二部分-场景\"><a href=\"#第二部分-场景\" class=\"headerlink\" title=\"第二部分 场景\"></a>第二部分 场景</h2><h3 id=\"手工测试场景\"><a href=\"#手工测试场景\" class=\"headerlink\" title=\"手工测试场景\"></a>手工测试场景</h3><h3 id=\"自动化测试场景\"><a href=\"#自动化测试场景\" class=\"headerlink\" title=\"自动化测试场景\"></a>自动化测试场景</h3>1、 Monkey<br>Monkey 就在手机里，安卓系统再带的</li>\n</ul>\n<p>2、 什么是ADB？<br>Android Debug Bridge 安卓调试桥</p>\n<span id=\"more\"></span>\n<p>3、 MonkeyScript<br>MonkeyScript是一组可被monkey识别的命令集合。<br>MonkeyScript可以完成重复固定的指令</p>\n<p>4、 MonkeyRunner<br>提供一系列的API，可以模拟事件及截图操作。</p>\n<p>5、Monkey和MonkeyRunner的区别？<br>Monkey：在adb shell中，生成用户或系统的伪随机事件。<br>MonkeyRunner：通过API定义特定命令和事件控制设备。</p>\n<p>MonkeyRunner APIs</p>\n<ul>\n<li>MonkeyRunner:用来连接设备或者模拟器</li>\n<li>MonkeyDevice：提供安装、卸载应用，发送模拟事件</li>\n<li>MonkeyImage：完成图像保存，及对比操作。</li>\n</ul>\n<h3 id=\"压力测试结果\"><a href=\"#压力测试结果\" class=\"headerlink\" title=\"压力测试结果\"></a>压力测试结果</h3><p>crash和ANR</p>\n<p>崩溃和应用无响应</p>\n<h2 id=\"第三部分：实践\"><a href=\"#第三部分：实践\" class=\"headerlink\" title=\"第三部分：实践\"></a>第三部分：实践</h2><ul>\n<li>步骤一：打开手机USB调试功能</li>\n<li>步骤二：确认手机和电脑已经连接，执行<code>adb devices</code><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mark@Markxiansheng blog % adb devices</span><br><span class=\"line\">* daemon not running; starting now at tcp:5037</span><br><span class=\"line\">* daemon started successfully</span><br><span class=\"line\">List of devices attached</span><br><span class=\"line\">HCW0001811005556        device</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>步骤三：安装测试app，<code>adb install package.apk</code></li>\n<li>步骤四：发送压测指令 <code>adb shell monkey 1000</code>执行1000次随机操作指令</li>\n<li>步骤五：获取app报名：执行<code>adb logcat | grep START</code></li>\n<li>步骤六：给指定的包打压力；执行<code>adb shell monkey -p package 1000</code></li>\n</ul>\n<h2 id=\"第四部分：Monkey高级参数的应用\"><a href=\"#第四部分：Monkey高级参数的应用\" class=\"headerlink\" title=\"第四部分：Monkey高级参数的应用\"></a>第四部分：Monkey高级参数的应用</h2><h3 id=\"1、throttle参数\"><a href=\"#1、throttle参数\" class=\"headerlink\" title=\"1、throttle参数\"></a>1、throttle参数</h3><p>指定事件之间的间隔<br><code>adb shell monkey --throttle &lt;milliseconds&gt;</code></p>\n<h3 id=\"2、seed参数实践\"><a href=\"#2、seed参数实践\" class=\"headerlink\" title=\"2、seed参数实践\"></a>2、seed参数实践</h3><p>指定随机生成数的seed值 <code>adb shell monkey -s &lt;seed&gt; &lt;event-count&gt;</code></p>\n<p>例如：<code>adb shell monkey -p com.android.calculator2 -s 100 50</code><br>每次执行结构都是一样，记住清理缓存记录再测试，复现问题</p>\n<h3 id=\"3、触摸事件\"><a href=\"#3、触摸事件\" class=\"headerlink\" title=\"3、触摸事件\"></a>3、触摸事件</h3><p>设定触摸事件百分比<br><code>adb shell monkey --pct-touch &lt;percent&gt;</code></p>\n<p>例如：<code>adb shell monkey -v -p com.cares.rcs --pct-touch 100 100</code>，加上<code>-v</code>是为了看清具体执行的操作是什么</p>\n<h3 id=\"4、动作事件\"><a href=\"#4、动作事件\" class=\"headerlink\" title=\"4、动作事件\"></a>4、动作事件</h3><p>设定动作事件百分比<code>adb shell monkey --pct-motion &lt;percent&gt;</code><br>例如：<code>adb shell monkey -v -p com.cares.rcs --pct-touch 50 --pct-motion 30 100</code><br>执行touch事件50%，motion事件30%，执行一百次事件</p>\n<h3 id=\"5、轨迹球事件\"><a href=\"#5、轨迹球事件\" class=\"headerlink\" title=\"5、轨迹球事件\"></a>5、轨迹球事件</h3><p>设定轨迹球事件百分比<br><code>adb shell monkey --pct-trackball &lt;percent&gt;</code></p>\n<h3 id=\"6、基本导航事件\"><a href=\"#6、基本导航事件\" class=\"headerlink\" title=\"6、基本导航事件\"></a>6、基本导航事件</h3><p>设定基本导航事件百分比，输入设备上的上、下、左、右<br><code>adb shell monkey --pct-nav &lt;percent&gt;</code></p>\n<h3 id=\"7、主要导航事件\"><a href=\"#7、主要导航事件\" class=\"headerlink\" title=\"7、主要导航事件\"></a>7、主要导航事件</h3><p>设定主要导航事件百分比，兼容中间键、返回键、菜单按键<br><code>adb shell monkey --pct-majornav &lt;percent&gt;</code></p>\n<h3 id=\"8、系统导航事件\"><a href=\"#8、系统导航事件\" class=\"headerlink\" title=\"8、系统导航事件\"></a>8、系统导航事件</h3><p>设定系统导航事件百分比，HOME、BACK、拨号及音量按键<br><code>adb shell monkey --pct-syskeys &lt;percent&gt;</code></p>\n<h3 id=\"9、启动Activity事件\"><a href=\"#9、启动Activity事件\" class=\"headerlink\" title=\"9、启动Activity事件\"></a>9、启动Activity事件</h3><p>设定启动Activity的事件百分比<br><code>adb shell monkey --pct-appswitch &lt;percent&gt;</code></p>\n<h3 id=\"10、不常用事件\"><a href=\"#10、不常用事件\" class=\"headerlink\" title=\"10、不常用事件\"></a>10、不常用事件</h3><p><code>adb shell monkey --pct-anyevent &lt;percent&gt;</code></p>\n<h3 id=\"11、崩溃事件Crash事件\"><a href=\"#11、崩溃事件Crash事件\" class=\"headerlink\" title=\"11、崩溃事件Crash事件\"></a>11、崩溃事件Crash事件</h3><p>忽略崩溃和异常<br><code>adb shell monkey --ignore-crashes &lt;percent&gt;</code></p>\n<h3 id=\"12、超时事件ANR事件\"><a href=\"#12、超时事件ANR事件\" class=\"headerlink\" title=\"12、超时事件ANR事件\"></a>12、超时事件ANR事件</h3><p>忽略超时事件<br><code>adb shell monkey --ignore-timeouts &lt;event-count&gt;</code></p>\n<h2 id=\"第五部分：CRASH结果提取\"><a href=\"#第五部分：CRASH结果提取\" class=\"headerlink\" title=\"第五部分：CRASH结果提取\"></a>第五部分：CRASH结果提取</h2><p> <code>adb shell monkey -p com.cares.rcs 1000</code>不断测试执行随机操作</p>\n<h2 id=\"第六部分：ANR查看\"><a href=\"#第六部分：ANR查看\" class=\"headerlink\" title=\"第六部分：ANR查看\"></a>第六部分：ANR查看</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Markxiansheng:Desktop mark$ adb shell</span><br><span class=\"line\">root@vbox86p:&#x2F; #</span><br><span class=\"line\">root@vbox86p:&#x2F; # cd &#x2F;data&#x2F;anr</span><br><span class=\"line\">root@vbox86p:&#x2F;data&#x2F;anr # ls</span><br><span class=\"line\">traces.txt</span><br></pre></td></tr></table></figure>\n<h2 id=\"Monkey-Script学习使用\"><a href=\"#Monkey-Script学习使用\" class=\"headerlink\" title=\"Monkey Script学习使用\"></a>Monkey Script学习使用</h2><blockquote>\n<p>执行语句：<code>adb shell monkey -f &lt;scriptfile&gt; &lt;event-count&gt;</code></p>\n</blockquote>\n<p>常用命令：</p>\n<p>1、<strong>DispatchTrackball</strong>轨迹球事件</p>\n<p>2、<strong>DispatchPointer</strong>点击事件</p>\n<p>3、<strong>DispatchString</strong>输入字符串事件<br><code>DispatchString(String text)</code></p>\n<p>4、<strong>LaunchActivity</strong>启动应用事件<br><code>LaunchAtivity(package,Activity)</code></p>\n<p>5、<strong>UserWait</strong>命令<br>等待事件：<code>UserWait(millinsons)</code></p>\n<p>6、<strong>DispatchPress</strong>命令<br>按下键值：<code>DispatchPress(int keycode)</code> #keycode 66 回车键》</p>\n<p>模拟输入查询一千次</p>\n<ul>\n<li>1、启动App</li>\n<li>2、点击输入框</li>\n<li>3、输入查询词</li>\n<li>4、点击键盘的回车</li>\n<li>5、点击搜索按钮</li>\n<li>6、等待结果的出现</li>\n<li>7、点击clear按钮<br>Mark.script脚本<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">typ &#x3D; user</span><br><span class=\"line\">count &#x3D; 10</span><br><span class=\"line\">speed &#x3D; 1.0</span><br><span class=\"line\">start data &gt;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">LaunchActivity(com.android.browser,.BrowserActivity)</span><br><span class=\"line\">UserWait(2000)</span><br><span class=\"line\">DispatchPointer(10,10,0,200,200,1,1,-1,1,1,0,0)</span><br><span class=\"line\">DispatchPointer(10,10,1,200,200,1,1,-1,1,1,0,0)</span><br><span class=\"line\">DispatchString(Mark)</span><br><span class=\"line\">UserWait(1000)</span><br><span class=\"line\">DispatchPress(66)</span><br><span class=\"line\">DispatchPointer(10,10,0,600,300,1,1,-1,1,1,0,0)</span><br><span class=\"line\">DispatchPointer(10,10,1,600,300,1,1,-1,1,1,0,0)</span><br><span class=\"line\">UserWait(3000)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>小黑技术：SDK目录下tools文件中的bin目录下的 uiautomatorviewer.bat,双击启动，用来获取界面控件位置</p>\n<h2 id=\"Monkey-Runner学习使用\"><a href=\"#Monkey-Runner学习使用\" class=\"headerlink\" title=\"Monkey Runner学习使用\"></a>Monkey Runner学习使用</h2><p>主要是利用python编写脚本文件进行测试，暂停学习</p>\n","categories":["Android"],"tags":["Android"]},{"title":"Oracle数据库基础理论","url":"/2019/11/14/Oracle%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA/","content":"<h2 id=\"Oracle数据库是关系型数据库\"><a href=\"#Oracle数据库是关系型数据库\" class=\"headerlink\" title=\"Oracle数据库是关系型数据库\"></a><strong>Oracle数据库是关系型数据库</strong></h2><h3 id=\"一、什么是关系型数据库？\"><a href=\"#一、什么是关系型数据库？\" class=\"headerlink\" title=\"一、什么是关系型数据库？\"></a>一、什么是关系型数据库？</h3><hr>\n<ul>\n<li>关系型数据理论最早是有E.F.Codd博士在1970年提出的。</li>\n<li>Codd博士制定了一个数据库产品成为关系型数据库所必须符合的一些列相关的标准。</li>\n<li>它是RDBMS(关系型数据库管理系统)的基础。</li>\n<li>关系型数据库需包含下面三个方面：<ul>\n<li>对象或关系的集合</li>\n<li>基于关系的操作集合</li>\n<li>因数据的精确性和一致性而带来的数据的完整性</li>\n</ul>\n</li>\n<li>关系型数据库是关系的集合或者是说是二维表的集合</li>\n</ul>\n<h3 id=\"二、Oracle数据库简介\"><a href=\"#二、Oracle数据库简介\" class=\"headerlink\" title=\"二、Oracle数据库简介\"></a>二、Oracle数据库简介</h3><ul>\n<li>一个存储数据的地方</li>\n<li>能快速获取数据</li>\n<li>数据库安全性</li>\n<li>分布式数据库</li>\n<li>客户端和服务端的配置</li>\n</ul>\n","categories":["Oracle"],"tags":["Oracle"]},{"title":"OkHttp和retrofit网络框架实现架构基础原理","url":"/2022/09/26/OkHttp%E5%92%8Cretrofit%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E6%9E%B6%E6%9E%84%E5%9F%BA%E7%A1%80%E5%8E%9F%E7%90%86/","content":"<p><img data-src=\"https://markchyl.cn/img/WechatIMG54.jpeg\"></p>\n","categories":["Android"],"tags":["网络编程"]},{"title":"Python基础学习","url":"/2018/12/29/Python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/","content":"<h3 id=\"Python3的基础练习代码\"><a href=\"#Python3的基础练习代码\" class=\"headerlink\" title=\"Python3的基础练习代码\"></a>Python3的基础练习代码</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtQeXRob25Xb3JsZC9NYXJrUHl0aG9u\">这是Python基础练习的代码<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Python"],"tags":["Python"]},{"title":"Python实现批量生产二维码","url":"/2019/10/18/Python%E5%AE%9E%E7%8E%B0%E6%89%B9%E9%87%8F%E7%94%9F%E4%BA%A7%E4%BA%8C%E7%BB%B4%E7%A0%81/","content":"<h3 id=\"工具库：\"><a href=\"#工具库：\" class=\"headerlink\" title=\"工具库：\"></a>工具库：</h3><ul>\n<li>pip3 install pillow</li>\n<li>pip3 install qrcode</li>\n<li>pip3 install xlrd<br>具体是什呢？再次不做介绍，百度官网查询。<span id=\"more\"></span>\n<h3 id=\"记录编码：\"><a href=\"#记录编码：\" class=\"headerlink\" title=\"记录编码：\"></a>记录编码：</h3>一、读取Excel表哥数据：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">def getInfo():</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data &#x3D; xlrd.open_workbook(r&quot;&#x2F;Users&#x2F;mark&#x2F;Desktop&#x2F;carlistinfo.xlsx&quot;)</span><br><span class=\"line\">        sheetname &#x3D; &quot;Sheet1&quot;</span><br><span class=\"line\">        table &#x3D; data.sheet_by_name(sheetname)</span><br><span class=\"line\">        col_values &#x3D; table.col_values(1)</span><br><span class=\"line\">        return col_values</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(e)</span><br></pre></td></tr></table></figure>\n二、生成二维码保存指定文件夹:<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">matchList &#x3D; getInfo()</span><br><span class=\"line\">for matchCode in matchList:</span><br><span class=\"line\">    # 要放在循环里，否则 qr.add_data(filename) 会一直累加</span><br><span class=\"line\">    qr &#x3D; qrcode.QRCode(version&#x3D;1, error_correction&#x3D;qrcode.constants.ERROR_CORRECT_L, box_size&#x3D;10, border&#x3D;1)</span><br><span class=\"line\">    filename &#x3D; matchCode</span><br><span class=\"line\">    qr.add_data(filename)</span><br><span class=\"line\">    qr.make(fit&#x3D;True)</span><br><span class=\"line\">    img &#x3D; qr.make_image()</span><br><span class=\"line\">    file &#x3D; &quot;&#x2F;Users&#x2F;mark&#x2F;Desktop&#x2F;qrimg&quot;+&quot;&#x2F;&#123;0&#125;.png&quot;.format(matchCode)</span><br><span class=\"line\">    img.save(file)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>三、执行以上操作：</p>\n<p><em><code>getImage()</code></em></p>\n<h3 id=\"全部源码：\"><a href=\"#全部源码：\" class=\"headerlink\" title=\"全部源码：\"></a>全部源码：</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">import qrcode</span><br><span class=\"line\">import xlrd</span><br><span class=\"line\"></span><br><span class=\"line\">def getInfo():</span><br><span class=\"line\">    try:</span><br><span class=\"line\">        data &#x3D; xlrd.open_workbook(r&quot;&#x2F;Users&#x2F;mark&#x2F;Desktop&#x2F;carlistinfo.xlsx&quot;)</span><br><span class=\"line\">        sheetname &#x3D; &quot;Sheet1&quot;</span><br><span class=\"line\">        table &#x3D; data.sheet_by_name(sheetname)</span><br><span class=\"line\">        col_values &#x3D; table.col_values(1)</span><br><span class=\"line\">        return col_values</span><br><span class=\"line\">    except Exception as e:</span><br><span class=\"line\">        print(e)</span><br><span class=\"line\"></span><br><span class=\"line\">def getImage():</span><br><span class=\"line\">    matchList &#x3D; getInfo()</span><br><span class=\"line\">    for matchCode in matchList:</span><br><span class=\"line\">        # 要放在循环里，否则 qr.add_data(filename) 会一直累加</span><br><span class=\"line\">        qr &#x3D; qrcode.QRCode(version&#x3D;1, error_correction&#x3D;qrcode.constants.ERROR_CORRECT_L, box_size&#x3D;10, border&#x3D;1)</span><br><span class=\"line\">        filename &#x3D; matchCode</span><br><span class=\"line\">        qr.add_data(filename)</span><br><span class=\"line\">        qr.make(fit&#x3D;True)</span><br><span class=\"line\">        img &#x3D; qr.make_image()</span><br><span class=\"line\">        file &#x3D; &quot;&#x2F;Users&#x2F;mark&#x2F;Desktop&#x2F;qrimg&quot;+&quot;&#x2F;&#123;0&#125;.png&quot;.format(matchCode)</span><br><span class=\"line\">        img.save(file)</span><br><span class=\"line\"></span><br><span class=\"line\">getImage()</span><br></pre></td></tr></table></figure>","categories":["Python"],"tags":["Python"]},{"title":"Python资料地址收集","url":"/2022/10/23/Python%E8%B5%84%E6%96%99%E5%9C%B0%E5%9D%80%E6%94%B6%E9%9B%86/","content":"<h3 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h3><h4 id=\"基础学习地址\"><a href=\"#基础学习地址\" class=\"headerlink\" title=\"基础学习地址\"></a>基础学习地址</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC1nb29nbGUtc3R5bGVndWlkZS5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvZ29vZ2xlLXB5dGhvbi1zdHlsZWd1aWRlL3B5dGhvbl9zdHlsZV9ydWxlcy8=\">Python中文版风格规范<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","categories":["Python"],"tags":["基础"]},{"title":"RxJava学习笔记一","url":"/2020/10/19/RxJava%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80/","content":"<h3 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World!\"></a>Hello World!</h3><ul>\n<li>RxJava1.1.7.jar<br>代码演示：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public static void main(String[] args) &#123;</span><br><span class=\"line\">\t\t&#x2F;&#x2F;第一步、创建被观察者</span><br><span class=\"line\">\t\tObservable&lt;String&gt; mObservable &#x3D; Observable.create(new OnSubscribe&lt;String&gt;()&#123;</span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void call(Subscriber&lt;? super String&gt; subscriber) &#123;</span><br><span class=\"line\">\t\t\t\tsubscriber.onNext(&quot;Hello World!&quot;);</span><br><span class=\"line\">\t\t\t\tsubscriber.onCompleted();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;第二步、创建观察者</span><br><span class=\"line\">\t\tSubscriber&lt;String&gt; mSubscriber &#x3D; new Subscriber&lt;String&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void onCompleted() &#123;</span><br><span class=\"line\">\t\t\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;onCompleted&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void onError(Throwable arg0) &#123;</span><br><span class=\"line\">\t\t\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;onError&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void onNext(String arg0) &#123;</span><br><span class=\"line\">\t\t\t\t&#x2F;&#x2F; TODO Auto-generated method stub</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;OnNext:&quot;+arg0);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#x2F;&#x2F;第三步、订阅事件</span><br><span class=\"line\">\t\tmObservable.subscribe(mSubscriber);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>例如代码中所演示的，RxJava的使用就是那么简单，通过订阅事件将被观察者和观察者进行绑定。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h3 id=\"响应式编程：\"><a href=\"#响应式编程：\" class=\"headerlink\" title=\"响应式编程：\"></a>响应式编程：</h3>在介绍RxJava前，我们先聊聊响应式编程。那么什么是响应式编程呢？响应式编程是一种基于异步数据流概念的编程模式。数据流就像一条河：它可以被观测，被过滤，被操作，或者为新的消费者与另外一条流合并为一条新的流。</li>\n</ul>\n<p>响应式编程的一个关键概念是事件。事件可以被等待，可以触发过程，也可以触发其它事件。事件是唯一的以合适的方式将我们的现实世界映射到我们的软件中：如果屋里太热了我们就打开一扇窗户。同样的，当我们的天气app从服务端获取到新的天气数据后，我们需要更新app上展示天气信息的UI；汽车上的车道偏移系统探测到车辆偏移了正常路线就会提醒驾驶者纠正，就是是响应事件。</p>\n<p>今天，响应式编程最通用的一个场景是UI：我们的移动App必须做出对网络调用、用户触摸输入和系统弹框的响应。在这个世界上，软件之所以是事件驱动并响应的是因为现实生活也是如此。</p>\n<blockquote>\n<p>本章节中部分概念摘自《RxJava Essentials》一书</p>\n</blockquote>\n<h3 id=\"RxJava简介：\"><a href=\"#RxJava简介：\" class=\"headerlink\" title=\"RxJava简介：\"></a>RxJava简介：</h3><p>RxJava本质上是一个异步操作库，是一个能让你用极其简洁的逻辑去处理繁琐复杂任务的异步事件库。</p>\n<p>Rx是微软.Net的一个响应式扩展，Rx借助可观测的序列提供一种简单的方式来创建异步的，基于事件驱动的程序。2012年Netflix为了应对不断增长的业务需求开始将.NET Rx迁移到JVM上面。并于13年二月份正式向外展示了RxJava。<br>从语义的角度来看，RxJava就是.NET Rx。从语法的角度来看，Netflix考虑到了对应每个Rx方法,保留了Java代码规范和基本的模式。<br><img data-src=\"https://pic1.zhimg.com/80/ca736fe59de94c221875cb428d7eaff0_1440w.png\"></p>\n<h3 id=\"RxJava好在哪\"><a href=\"#RxJava好在哪\" class=\"headerlink\" title=\"RxJava好在哪\"></a>RxJava好在哪</h3><ul>\n<li>供了AsyncTask,Handler等用来做异步操作的类库了AsyncTask,Handler等用来做异步操作的类库</li>\n<li>非常简洁的代码逻辑来解决复杂问题</li>\n</ul>\n","categories":["RxJava"],"tags":["RxJava"]},{"title":"Redis操作命令的使用","url":"/2023/08/11/Redis%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<p>Redis操作命令的使用笔记，涵盖基本数据类型的常见操作。以下是这份笔记：</p>\n<hr>\n<h2 id=\"Redis-操作命令使用指南\"><a href=\"#Redis-操作命令使用指南\" class=\"headerlink\" title=\"Redis 操作命令使用指南\"></a>Redis 操作命令使用指南</h2><h3 id=\"1-字符串（String）\"><a href=\"#1-字符串（String）\" class=\"headerlink\" title=\"1. 字符串（String）\"></a>1. 字符串（String）</h3><ul>\n<li>设置指定key的值: <code>SET key value</code></li>\n<li>获取指定key的值: <code>GET key</code></li>\n<li>设置指定key的值，并将 key 的过期时间设为 seconds 秒：<code>SETEX key seconds value</code></li>\n<li>只有在 key 不存在时设置 key 的值: <code>SETNX key value</code></li>\n<li>追加字符串：<code>APPEND key value</code></li>\n<li>获取字符串长度：<code>STRLEN key</code></li>\n<li>自增：<code>INCR key</code></li>\n<li>自增指定值：<code>INCRBY key increment</code></li>\n<li>自增浮点数：<code>INCRBYFLOAT key increment</code></li>\n<li>设置并获取旧值：<code>GETSET key value</code></li>\n<li>设置多个键值对：<code>MSET key1 value1 [key2 value2 ...]</code></li>\n<li>获取多个键值：<code>MGET key1 [key2 ...]</code></li>\n<li>设置键的过期时间：<code>EXPIRE key seconds</code></li>\n<li>设置键的过期时间（毫秒）：<code>PEXPIRE key milliseconds</code></li>\n<li>获取键的剩余生存时间：<code>TTL key</code></li>\n<li>获取键的剩余生存时间（毫秒）：<code>PTTL key</code></li>\n<li>移除键的过期时间：<code>PERSIST key</code>    <span id=\"more\"></span>\n\n</li>\n</ul>\n<h3 id=\"2-哈希（Hash）\"><a href=\"#2-哈希（Hash）\" class=\"headerlink\" title=\"2. 哈希（Hash）\"></a>2. 哈希（Hash）</h3><ul>\n<li>设置哈希字段值：<code>HSET key field value</code></li>\n<li>获取哈希字段值：<code>HGET key field</code></li>\n<li>获取整个哈希表：<code>HGETALL key</code></li>\n<li>获取哈希表所有字段：<code>HKEYS key</code></li>\n<li>获取哈希表所有值：<code>HVALS key</code></li>\n<li>删除存储在哈希表中的指定字段: <code>HDEL key field    </code></li>\n</ul>\n<h3 id=\"3-列表（List）\"><a href=\"#3-列表（List）\" class=\"headerlink\" title=\"3. 列表（List）\"></a>3. 列表（List）</h3><ul>\n<li>在列表头部插入元素：<code>LPUSH key value</code></li>\n<li>在列表尾部插入元素：<code>RPUSH key value</code></li>\n<li>弹出并返回列表头部元素：<code>LPOP key</code></li>\n<li>弹出并返回列表尾部元素：<code>RPOP key</code></li>\n<li>获取列表范围内的元素：<code>LRANGE key start stop</code></li>\n</ul>\n<h3 id=\"4-集合（Set）\"><a href=\"#4-集合（Set）\" class=\"headerlink\" title=\"4. 集合（Set）\"></a>4. 集合（Set）</h3><ul>\n<li>向集合添加一个或多个成员：     <code>SADD key member1 [member2]</code></li>\n<li>删除集合中一个或多个成员:     <code>SREM key member1 [member2]</code></li>\n<li>获取集合所有成员：           <code>SMEMBERS key</code></li>\n<li>判断元素是否在集合中：        <code>SISMEMBER key member</code></li>\n<li>获取集合的成员数:            <code>SCARD key</code></li>\n<li>返回给定所有集合的交集:       <code>SINTER key1 [key2]</code></li>\n<li>返回所有给定集合的并集:       <code>SUNION key1 [key2]     </code> </li>\n</ul>\n<h3 id=\"5-有序集合（Sorted-Set）\"><a href=\"#5-有序集合（Sorted-Set）\" class=\"headerlink\" title=\"5. 有序集合（Sorted Set）\"></a>5. 有序集合（Sorted Set）</h3><ul>\n<li>获取有序集合成员的分数：<code>ZSCORE key member</code></li>\n<li>获取有序集合的排名：<code>ZRANK key member</code></li>\n<li>向有序集合添加一个或多个成员: <code>ZADD key score1 member1 [score2 member2]</code></li>\n<li>通过索引区间返回有序集合中指定区间内的成员: <code>ZRANGE key start stop [WITHSCORES]</code></li>\n<li>获取有序集合范围内的元素：<code>ZRANGEBYSCORE key min max</code>        </li>\n<li>有序集合中对指定成员的分数加上增量increment: <code>ZINCRBY key increment member</code>             </li>\n<li>移除有序集合中的一个或多个成员:   <code>ZREM key member [member ...] </code>            </li>\n</ul>\n<h3 id=\"Redis的通用命令是不分数据类型的，都可以使用的命令\"><a href=\"#Redis的通用命令是不分数据类型的，都可以使用的命令\" class=\"headerlink\" title=\"Redis的通用命令是不分数据类型的，都可以使用的命令\"></a>Redis的通用命令是不分数据类型的，都可以使用的命令</h3><ul>\n<li>查找所有符合给定模式( pattern)的 key:  <code>KEYS pattern</code>        </li>\n<li>检查给定 key 是否存在: <code>EXISTS key</code>    </li>\n<li>返回 key 所储存的值的类型: <code>TYPE key</code></li>\n<li>该命令用于在 key 存在是删除 key: <code>DEL key</code></li>\n</ul>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><ul>\n<li>发布消息：<code>PUBLISH channel message</code></li>\n<li>订阅消息：<code>SUBSCRIBE channel</code></li>\n<li>事务操作：<code>MULTI</code>、<code>EXEC</code>、<code>WATCH</code></li>\n<li>执行 Lua 脚本：<code>EVAL</code>、<code>EVALSHA</code></li>\n</ul>\n<hr>\n","categories":["中间件"],"tags":["Redis"]},{"title":"Ubuntu虚拟机中安装应用商店","url":"/2023/06/29/Ubuntu%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E5%AE%89%E8%A3%85%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97/","content":"<p>如果您的Ubuntu虚拟机中没有应用商店，您可以尝试安装和使用其他的应用商店工具来获取和安装应用程序。以下是一些常见的应用商店工具：</p>\n<ol>\n<li><p>GNOME Software：GNOME Software是一个流行的图形化应用商店工具，适用于使用GNOME桌面环境的Ubuntu。打开终端，运行以下命令来安装GNOME Software：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install gnome-software</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，您可以在应用程序菜单中搜索并打开GNOME Software。通过GNOME Software，您可以浏览、搜索和安装各种应用程序。</p>\n<span id=\"more\"></span></li>\n<li><p>Discover：Discover是KDE桌面环境的默认应用商店工具，适用于使用Kubuntu等基于KDE的Ubuntu变体。如果您使用的是KDE桌面环境，Discover可能已经预装在系统中。您可以在应用程序菜单中搜索并打开Discover。</p>\n</li>\n<li><p>Deepin Software Center：Deepin Software Center是深度操作系统的默认应用商店工具，它也可以在其他Ubuntu发行版上使用。打开终端，运行以下命令来安装Deepin Software Center：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install deepin-software-center</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，您可以在应用程序菜单中搜索并打开Deepin Software Center。</p>\n</li>\n</ol>\n<p>请注意，这些应用商店工具可能适用于特定的桌面环境或Ubuntu变体。根据您的系统和个人喜好，您可以选择安装适合您的应用商店工具。</p>\n<p>另外，您还可以尝试通过命令行来安装应用程序，如之前所述的使用<code>apt</code>命令或Snap来安装软件包。这些方法也可以帮助您获取和安装所需的应用程序。</p>\n","categories":["Linux"],"tags":["环境配置"]},{"title":"Node.js 版本管理工具:nvm","url":"/2024/06/13/Node-js-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-nvm/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTgxNTg4L2FydGljbGUvZGV0YWlscy8xMzkyMjc1MDQ=\">参考原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>nvm 是一款 Node.js 版本管理工具，允许用户通过命令行快速安装、切换和管理不同的 Node.js 版本。</p>\n<p>图片<img data-src=\"https://img-blog.csdnimg.cn/img_convert/49f67ddef04c0f95bf84de1a72a19853.png\"><br>（图片来自：github）</p>\n<blockquote>\n<p>nvm 只适用于 macOS 和 Linux 用户的项目，如果是 Windows 用户，可以使用 nvm-windows 、nodist 或 nvs 替换。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<h3 id=\"安装方式\"><a href=\"#安装方式\" class=\"headerlink\" title=\"安装方式\"></a>安装方式</h3><p>macOS 下载方式：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方式1 浏览器打开下面链接下载</span></span><br><span class=\"line\">https://github.com/nvm-sh/nvm/blob/v0.39.7/install.sh</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载完成后，通过命令安装</span></span><br><span class=\"line\">sh install.sh</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方式2 推荐</span></span><br><span class=\"line\">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 方式3</span></span><br><span class=\"line\">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</span><br></pre></td></tr></table></figure>\n<p>安装过程中如果遇到一些奇怪的问题，可以查看下 nvm 补充说明</p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvm ls                # 查看版本安装所有版本</span><br><span class=\"line\">nvm ls-remote         # 查看远程所有的 Node.js 版本</span><br><span class=\"line\">nvm install 17.0.0    # 安装指定的 Node.js 版本</span><br><span class=\"line\">nvm use 17.0.0        # 使用指定的 Node.js 版本</span><br><span class=\"line\">nvm alias default 17.0.0  # 设置默认 Node.js 版本</span><br><span class=\"line\">nvm alias dev 17.0.0  # 设置指定版本的别名，如将 17.0.0 版本别名设置为 dev</span><br></pre></td></tr></table></figure>\n","categories":["开发工具"],"tags":["环境"]},{"title":"android:duplicateParentState属性解释","url":"/2019/12/31/android-duplicateParentState%E5%B1%9E%E6%80%A7%E8%A7%A3%E9%87%8A/","content":"<p><strong>android:duplicateParentState指的是当前控件是否跟随父控件的(点击、焦点等)状态</strong></p>\n<blockquote>\n<p>例：假设一Layout有两子View，对Layout进行监听点击事件；子ViewA一个设置duplicateParentState为true，子ViewB设置为false，当点击Layout后，子ViewA的点击态背景变色成功，子ViewB背景态变色无效，因为点击事件被Layout捕获。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>————————————————</p>\n<p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ZhbmN5bG92ZWphdmEvYXJ0aWNsZS9kZXRhaWxzLzM4MDM5ODQ3\">https://blog.csdn.net/fancylovejava/article/details/38039847<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["布局"]},{"title":"Spring Cache入门使用教程","url":"/2023/08/17/Spring-Cache%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","content":"<h2 id=\"Spring-Cache入门使用教程\"><a href=\"#Spring-Cache入门使用教程\" class=\"headerlink\" title=\"Spring Cache入门使用教程\"></a>Spring Cache入门使用教程</h2><h3 id=\"什么是Spring-Cache？\"><a href=\"#什么是Spring-Cache？\" class=\"headerlink\" title=\"什么是Spring Cache？\"></a>什么是Spring Cache？</h3><p>Spring Cache是Spring框架提供的一个模块，用于在应用程序中实现缓存功能。它允许你将方法的结果缓存起来，以便在后续调用中重复使用，从而提高应用程序的性能。</p>\n<h3 id=\"步骤-1：添加依赖\"><a href=\"#步骤-1：添加依赖\" class=\"headerlink\" title=\"步骤 1：添加依赖\"></a>步骤 1：添加依赖</h3><p>在你的Spring项目中，首先需要添加Spring Cache的依赖。在Maven项目中，你可以在<code>pom.xml</code>文件中添加以下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-cache<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-2：配置缓存管理器\"><a href=\"#步骤-2：配置缓存管理器\" class=\"headerlink\" title=\"步骤 2：配置缓存管理器\"></a>步骤 2：配置缓存管理器</h3><p>在Spring Boot应用程序中，默认情况下，会自动配置一个适合的缓存管理器。如果你需要自定义缓存管理器，你可以在配置类中添加如下配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CacheConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置其他缓存管理器的Bean，如Redis、Ehcache等</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-3：在方法上添加缓存注解\"><a href=\"#步骤-3：在方法上添加缓存注解\" class=\"headerlink\" title=\"步骤 3：在方法上添加缓存注解\"></a>步骤 3：在方法上添加缓存注解</h3><p>在你想要启用缓存的方法上添加缓存注解，如<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>。</p>\n<ul>\n<li><code>@Cacheable</code>：用于标记方法的结果应该被缓存。如果有缓存可用，方法将不会被调用，而是直接从缓存中返回结果。</li>\n<li><code>@CachePut</code>：用于标记方法的结果应该被缓存，并且每次方法被调用时都会执行方法体，并将结果放入缓存。</li>\n<li><code>@CacheEvict</code>：用于标记方法执行后应该清除缓存。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.cache.annotation.Cacheable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Cacheable(&quot;myCache&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCachedData</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里是实际方法逻辑</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Cached Data&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-4：配置缓存参数\"><a href=\"#步骤-4：配置缓存参数\" class=\"headerlink\" title=\"步骤 4：配置缓存参数\"></a>步骤 4：配置缓存参数</h3><p>你可以在<code>@Cacheable</code>、<code>@CachePut</code>和<code>@CacheEvict</code>注解中指定缓存的参数，如缓存的名称、键生成器等。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cacheable(value = &quot;myCache&quot;, key = &quot;#key&quot;)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getCachedData</span><span class=\"params\">(String key)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-5：运行和测试\"><a href=\"#步骤-5：运行和测试\" class=\"headerlink\" title=\"步骤 5：运行和测试\"></a>步骤 5：运行和测试</h3><p>现在，你的Spring应用程序已经配置了缓存。你可以运行并测试你的方法，观察缓存的工作情况。</p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>通过遵循以上步骤，你就可以在Spring应用程序中开始使用缓存功能。记得根据你的应用程序需求和性能优化要求来选择适合的缓存管理器和注解。</p>\n","categories":["Java"],"tags":["Cache"]},{"title":"ScrollView与RecyclerView解决滑动冲突","url":"/2019/09/02/ScrollView%E4%B8%8ERecyclerView%E8%A7%A3%E5%86%B3%E6%BB%91%E5%8A%A8%E5%86%B2%E7%AA%81/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zZTBhZDcwNGJlZTU=\">原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>RecyclerView 嵌套RecyclerView是不存在冲突的 因为内部已经解决，ScrollVIew嵌套RecyclerView会存在现实不全的问题，滑动的时候会导致不流畅，所以我换用的是NestedScrollView嵌套RecyclerView不会存在显示不完全的现象，但是还会有一点的滑动冲突</strong></p>\n <span id=\"more\"></span>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;android.support.v4.widget.NestedScrollView</span><br><span class=\"line\">    xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;TextView</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">            android:text&#x3D;&quot;标题党&quot;&#x2F;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;android.support.v7.widget.RecyclerView</span><br><span class=\"line\">            android:id&#x3D;&quot;@+id&#x2F;recyclerView&quot;</span><br><span class=\"line\">            android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">            android:layout_height&#x3D;&quot;wrap_content&quot;&#x2F;&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &lt;&#x2F;LinearLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;android.support.v4.widget.NestedScrollView&gt;</span><br></pre></td></tr></table></figure>\n\n<p><strong>上面只是布局代码而已，滑动冲突还是没有解决，我们只要在recyclerView 设置一下这个属性就可以了</strong><br>    <code>recyclerView.setNestedScrollingEnabled(false);</code></p>\n","categories":["Android"],"tags":["Android","冲突"]},{"title":"Markdown 入门指南一","url":"/2019/01/04/Markdown-%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97%E4%B8%80/","content":"<h3 id=\"一、Markdown-是什么？\"><a href=\"#一、Markdown-是什么？\" class=\"headerlink\" title=\"一、Markdown 是什么？\"></a><strong>一、Markdown 是什么？</strong></h3><hr>\n<p>Markdown 是一种轻量级的「标记语言」，创始人为约翰·格鲁伯，用简洁的语法代替排版，目前被越来越多的知识工作者、写作爱好者、程序员或研究员广泛使用。其常用的标记符号不超过十个，相对于更为复杂的 HTML 标记语言来说，Markdown 十分的轻量，学习成本也不需要太多，且一旦熟悉这种语法规则，会有沉浸式编辑的效果。</p>\n<span id=\"more\"></span>\n<p>另外，印象笔记 Markdown 支持 CommonMark 和 GFM (GitHub Flavored Markdown) 标准。</p>\n<h3 id=\"二、印象笔记里-Markdown-有什么特点？\"><a href=\"#二、印象笔记里-Markdown-有什么特点？\" class=\"headerlink\" title=\"二、印象笔记里 Markdown 有什么特点？\"></a><strong>二、印象笔记里 Markdown 有什么特点？</strong></h3><hr>\n<ul>\n<li><strong>一键创建</strong>：支持 Markdown 独立的一键新建入口，为深度 Markdown 用户提供更好的效率体验；</li>\n<li><strong>支持丰富的主流 Markdown 语法</strong>：支持文字相关样式、序号列表、任务列表、表格、TOC 目录、多种图表、数学公式、流程图、时序图、甘特图等；</li>\n<li><strong>支持插入图片</strong>：可插入网络图片 或 直接拖动本地图片、复制剪贴板中的图片到 Markdown 笔记中；</li>\n<li><strong>支持多种模式切换</strong>：编辑与预览模式、纯编辑模式以及纯预览模式；</li>\n<li><strong>支持多种编辑主题</strong>：预置了白色、黑色、深空灰和印象绿主题，默认为印象绿，未来会有更多主题提供；</li>\n<li><strong>跨平台同步</strong>：创建的 Markdown 笔记可在登录了印象笔记帐户的各端查看，未来更多端会支持创建和编辑 Markdown 笔记；<br>演示模式：Markdown 笔记支持演示模式查看；</li>\n<li><strong>支持其他印象笔记特点功能</strong>：笔记标注、导出 PDF、设置提醒、工作群聊共享-查看&amp;编辑笔记等。<br><img data-src=\"https://list.yinxiang.com/media/images/6f6fbdf5d5880bba878cccdb6fde7dc2.png\"><h3 id=\"三、如何创建-Markdown-笔记？\"><a href=\"#三、如何创建-Markdown-笔记？\" class=\"headerlink\" title=\"三、如何创建 Markdown 笔记？\"></a><strong>三、如何创建 Markdown 笔记？</strong></h3></li>\n</ul>\n<hr>\n<ol>\n<li>点击左上角「新建 Markdown 笔记」来创建新的 Markdown 笔记，另外，也支持配置隐藏「新建 Markdown 笔记」按钮，Windows 用户直接右单击「新建 Markdown 笔记」按钮，即可隐藏，Mac 用户可以右单击左侧边栏空白处，取消勾选「新建 Markdown 笔记」来完成隐藏此按钮</li>\n<li>点击菜单栏-文件-新建笔记-新建 Markdown 笔记（Mac 上为顶部菜单栏-文件-新建 Markdown笔记）</li>\n<li>使用快捷键 Ctrl+alt+D（Mac 上 CMD+D）来快速创建 Markdown 笔记<h3 id=\"四、印象笔记-Markdown-笔记支持哪些语法？\"><a href=\"#四、印象笔记-Markdown-笔记支持哪些语法？\" class=\"headerlink\" title=\"四、印象笔记 Markdown 笔记支持哪些语法？\"></a><strong>四、印象笔记 Markdown 笔记支持哪些语法？</strong></h3></li>\n</ol>\n<hr>\n<p>—— 以下语法均支持在编辑工具栏直接操作 —— </p>\n<h4 id=\"1-设置分级标题语法示例：\"><a href=\"#1-设置分级标题语法示例：\" class=\"headerlink\" title=\"1. 设置分级标题语法示例：\"></a>1. 设置分级标题语法示例：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/4d01db13595e47a605bdcee58863bcc9.png\"></p>\n<hr>\n<h4 id=\"2-加粗文本\"><a href=\"#2-加粗文本\" class=\"headerlink\" title=\"2. 加粗文本\"></a>2. 加粗文本</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">**印象笔记**</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/c6bdf4f7243a65e9d265f8354a985133.png\"></p>\n<hr>\n<h4 id=\"3-斜体\"><a href=\"#3-斜体\" class=\"headerlink\" title=\"3. 斜体\"></a>3. 斜体</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">*印象笔记*</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/013f1b9f886759dd2881a90594505be7.png\"></p>\n<hr>\n<h4 id=\"4-下划线\"><a href=\"#4-下划线\" class=\"headerlink\" title=\"4. 下划线\"></a>4. 下划线</h4><p>语法示例：</p>\n<p>&lt;u&gt;印象笔记&lt;/u&gt;</p>\n<p><img data-src=\"https://list.yinxiang.com/media/images/e9dfb2393770d6b3f9797251828fc64a.png\"></p>\n<hr>\n<h4 id=\"5-删除线\"><a href=\"#5-删除线\" class=\"headerlink\" title=\"5. 删除线\"></a>5. 删除线</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">~~印象笔记不支持Markdown~~</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/801daebf96b7c608324f653b8919d20b.png\"></p>\n<hr>\n<h4 id=\"6-添加分隔线\"><a href=\"#6-添加分隔线\" class=\"headerlink\" title=\"6. 添加分隔线\"></a>6. 添加分隔线</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">* * *</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/17e2f842833974e024ddbfe8601db88a.png\"></p>\n<hr>\n<h4 id=\"7-引用文本语法示例：\"><a href=\"#7-引用文本语法示例：\" class=\"headerlink\" title=\"7. 引用文本语法示例：\"></a>7. 引用文本语法示例：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;近日，印象笔记宣布完成重组。作为Evernote已在中国独立运营近6年的品牌，印象笔记将成为由中方控股的中美合资独立运营实体，并获得红杉宽带跨境数字产业基金首轮数亿元人民币投资。</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/5e7bc153735b23aa620131c3b53c4bbe.png\"></p>\n<hr>\n<h4 id=\"8-添加符号列表或者数字列表\"><a href=\"#8-添加符号列表或者数字列表\" class=\"headerlink\" title=\"8. 添加符号列表或者数字列表\"></a>8. 添加符号列表或者数字列表</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">使用 iOS 版本印象笔记如何快速保存内容？</span><br><span class=\"line\">1. 启用印象笔记 Widget ——印象笔记·剪贴板</span><br><span class=\"line\">2. 复制粘贴任意内容     </span><br><span class=\"line\">      * 微信</span><br><span class=\"line\">3. 滑动到 Widget 插件区域即可完成保存</span><br><span class=\"line\">印象笔记·剪贴板有什么特点？</span><br><span class=\"line\">* 快：开启自动模式，可以自动保存剪贴板的任意内容</span><br><span class=\"line\">* 一切：只要可以复制粘贴就可以保存</span><br><span class=\"line\">* 有序：全部保存在「我的剪贴板」笔记本并以时间来命名</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/50ffb8685cde14d6f94ba56d048eb484.png\"></p>\n<hr>\n<h4 id=\"9-添加待办事项\"><a href=\"#9-添加待办事项\" class=\"headerlink\" title=\"9. 添加待办事项\"></a>9. 添加待办事项</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">三只青蛙</span><br><span class=\"line\">* [x] 第一只青蛙</span><br><span class=\"line\">* [ ] 第二只青蛙</span><br><span class=\"line\">* [ ] 第三只青蛙</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/aeec9223706ba3fc5ff64649a1026b4a.png\"></p>\n<hr>\n<h4 id=\"10-插入链接\"><a href=\"#10-插入链接\" class=\"headerlink\" title=\"10. 插入链接\"></a>10. 插入链接</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[印象笔记官网](https:&#x2F;&#x2F;www.yinxiang.com&#x2F;)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/262a54f32549f26feb2a8ca094ebd7e2.png\"></p>\n<hr>\n<h4 id=\"11-插入图片\"><a href=\"#11-插入图片\" class=\"headerlink\" title=\"11. 插入图片\"></a>11. 插入图片</h4><p>印象笔记支持嵌入网络图片或者直接拖入本地图片，其中本地图片格式支持 jpg、png 和 gif。<br>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">![image](https:&#x2F;&#x2F;www.yinxiang.com&#x2F;blog&#x2F;wp-content&#x2F;uploads&#x2F;2018&#x2F;07&#x2F;%E5%94%AE%E7%A5%A8%E5%BE%AE%E4%BF%A1%E5%B0%81%E9%9D%A22.png)</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://www.yinxiang.com/blog/wp-content/uploads/2018/07/%E5%94%AE%E7%A5%A8%E5%BE%AE%E4%BF%A1%E5%B0%81%E9%9D%A22.png\" alt=\"image\"></p>\n<p>另外，针对插入的本地图片可以控制图片大小，在拖拽、拷贝或者点击插入本地图片之后，直接在图片名称后面（无需空格）添加以下语法均可以按照以下要求控制图片大小：<br>@w=300<br>@h=150<br>@w=200h=100<br>@h=100w=200<br>示例笔记<br>782d277a1dbc7dea8480267cf5f87ebd.png@w=300<br><img data-src=\"https://list.yinxiang.com/media/images/fb2dde021cec7c807b177af6956664b6.png\"></p>\n<hr>\n<h4 id=\"12-插入表格\"><a href=\"#12-插入表格\" class=\"headerlink\" title=\"12. 插入表格\"></a>12. 插入表格</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">| 帐户类型 | 免费帐户 | 标准帐户 | 高级帐户 |</span><br><span class=\"line\">| --- | --- | --- | --- |</span><br><span class=\"line\">| 帐户流量 | 60M | 1GB | 10GB |</span><br><span class=\"line\">| 设备数目 | 2台 | 无限制 | 无限制 |</span><br><span class=\"line\">| 当前价格 | 免费 | ￥8.17&#x2F;月 | ￥12.33&#x2F;月| </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/42bec0bb39317b0a5d7cbf799a079c11.png\"></p>\n<hr>\n<h4 id=\"13-插入图表\"><a href=\"#13-插入图表\" class=\"headerlink\" title=\"13. 插入图表\"></a>13. 插入图表</h4><p>目前支持饼状图、折线图、柱状图和条形图，只需将 type 改为对应的pie、line、column 和 bar。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;chart</span><br><span class=\"line\">,预算,收入,花费,债务</span><br><span class=\"line\">June,5000,8000,4000,6000</span><br><span class=\"line\">July,3000,1000,4000,3000</span><br><span class=\"line\">Aug,5000,7000,6000,3000</span><br><span class=\"line\">Sep,7000,2000,3000,1000</span><br><span class=\"line\">Oct,6000,5000,4000,2000</span><br><span class=\"line\">Nov,4000,3000,5000,</span><br><span class=\"line\"></span><br><span class=\"line\">type: pie</span><br><span class=\"line\">title: 每月收益</span><br><span class=\"line\">x.title: Amount</span><br><span class=\"line\">y.title: Month</span><br><span class=\"line\">y.suffix: $&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/8e02032f85f6612a4c2bb85797251f23.png\"></p>\n<hr>\n<h4 id=\"14-插入行内代码或代码块\"><a href=\"#14-插入行内代码或代码块\" class=\"headerlink\" title=\"14. 插入行内代码或代码块\"></a>14. 插入行内代码或代码块</h4><p>印象笔记 Markdown 语法支持几十种编程语言的高亮的显示。<br>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">python</span><br><span class=\"line\">#!&#x2F;usr&#x2F;bin&#x2F;python</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\">line &#x3D; &quot;Cats are smarter than dogs&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">matchObj &#x3D; re.match( r&#39;(.*) are (.*?) .*&#39;, line, re.M|re.I)</span><br><span class=\"line\"></span><br><span class=\"line\">if matchObj:   </span><br><span class=\"line\">    print &quot;matchObj.group() : &quot;, matchObj.group()    </span><br><span class=\"line\">    print &quot;matchObj.group(1) : &quot;, matchObj.group(1)    </span><br><span class=\"line\">    print &quot;matchObj.group(2) : &quot;, matchObj.group(2)</span><br><span class=\"line\">else:    </span><br><span class=\"line\">    print &quot;No match!!&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"15-插入数学公式印象笔记-Markdown-支持绝大多数的-LaTeX-数学公式\"><a href=\"#15-插入数学公式印象笔记-Markdown-支持绝大多数的-LaTeX-数学公式\" class=\"headerlink\" title=\"15. 插入数学公式印象笔记 Markdown 支持绝大多数的 LaTeX 数学公式\"></a>15. 插入数学公式印象笔记 Markdown 支持绝大多数的 LaTeX 数学公式</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mathe^&#123;i\\pi&#125; + 1 &#x3D; 0</span><br></pre></td></tr></table></figure>\n<p>更多数学公式的输入可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9raGFuLmdpdGh1Yi5pby9LYVRlWC9kb2NzL3N1cHBvcnRlZC5odG1s\">https://khan.github.io/KaTeX/docs/supported.html<i class=\"fa fa-external-link-alt\"></i></span><br><img data-src=\"https://list.yinxiang.com/media/images/c93e418911efa9fef085f5cf5fef5ccb.png\"></p>\n<hr>\n<h4 id=\"16-插入流程图\"><a href=\"#16-插入流程图\" class=\"headerlink\" title=\"16. 插入流程图\"></a>16. 插入流程图</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mermaid</span><br><span class=\"line\">graph TD</span><br><span class=\"line\">A[模块A] --&gt;;|A1| B(模块B)</span><br><span class=\"line\">B --&gt;; C&#123;判断条件C&#125;</span><br><span class=\"line\">C --&gt;;|条件C1|D[模块D]</span><br><span class=\"line\">C --&gt;;|条件C2|E[模块E]</span><br><span class=\"line\">C --&gt;;|条件C3|F[模块F]</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/3f18e5911a3342af4871115ba519f544.png\"></p>\n<hr>\n<h4 id=\"17-插入时序图\"><a href=\"#17-插入时序图\" class=\"headerlink\" title=\"17.  插入时序图\"></a>17.  插入时序图</h4><p>语法示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mermaid</span><br><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">A-&gt;&gt;B: 是否已收到消息？B--&gt;&gt;A: 已收到消息</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/c54a131fbcbc0167c0a2ffa6e1c53a9b.png\"></p>\n<hr>\n<h4 id=\"18-插入甘特图语法示例：\"><a href=\"#18-插入甘特图语法示例：\" class=\"headerlink\" title=\"18. 插入甘特图语法示例：\"></a>18. 插入甘特图语法示例：</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mermaid</span><br><span class=\"line\">gantt</span><br><span class=\"line\">title甘特图</span><br><span class=\"line\">dateFormat YYYY-MM-DD</span><br><span class=\"line\">section 项目A</span><br><span class=\"line\">任务1 :a1, 2018-06-06, 30d</span><br><span class=\"line\">任务2 :after a1 , 20d</span><br><span class=\"line\">section 项目B</span><br><span class=\"line\">任务3 :2018-06-12 , 12d</span><br><span class=\"line\">任务4 : 24d</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://list.yinxiang.com/media/images/cb24dc3b1004d6f07119e60fcb86f5a8.png\"></p>\n<hr>\n<h4 id=\"19-设置目录\"><a href=\"#19-设置目录\" class=\"headerlink\" title=\"19. 设置目录\"></a>19. 设置目录</h4><p>设置之后可以自动根据设置的分级标题来自动生成目录。<br>语法示例[TOC]：</p>\n<hr>\n<p>[[TOC]]</p>\n<p><img data-src=\"https://list.yinxiang.com/media/images/3caad079bbafbb2f7ba3dbd59fbdc057.png\">\n </p>\n","categories":["工具使用"],"tags":["工具使用"]},{"title":"dynamic、var、Object三者的区别","url":"/2020/09/23/dynamic%E3%80%81var%E3%80%81Object%E4%B8%89%E8%80%85%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<h3 id=\"dynamic：\"><a href=\"#dynamic：\" class=\"headerlink\" title=\"dynamic：\"></a>dynamic：</h3><p>是所有Dart对象的基础类型， 在大多数情况下，通常不直接使用它，<br>通过它定义的变量会关闭类型检查，这意味着<br><code>dynamic x = &#39;hal&#39;;x.foo();</code><br>这段代码静态类型检查不会报错，但是运行时会crash，因为x并没有foo()方法，所以建议大家在编程时不要直接使用dynamic；</p>\n<h3 id=\"var：\"><a href=\"#var：\" class=\"headerlink\" title=\"var：\"></a>var：</h3><p>是一个关键字，意思是“我不关心这里的类型是什么。”，系统会自动推断类型runtimeType；</p>\n<h3 id=\"Object：\"><a href=\"#Object：\" class=\"headerlink\" title=\"Object：\"></a>Object：</h3><p>是Dart对象的基类，当你定义：Object o=xxx；时这时候系统会认为o是个对象，你可以调用o的toString()和hashCode()方法<br>因为Object提供了这些方法，但是如果你尝试调用o.foo()时，静态类型检查会进行报错；</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>综上不难看出dynamic与Object的最大的区别是在静态类型检查上；</p>\n","categories":["flutter"],"tags":["dart"]},{"title":"error: <item> inner element must either be a resource reference or empty.","url":"/2019/12/25/error-item-inner-element-must-either-be-a-resource-reference-or-empty/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FAQ:</span><br><span class=\"line\"></span><br><span class=\"line\">Android resource compilation failed</span><br><span class=\"line\">Output: &#x2F;home&#x2F;cmm&#x2F;code&#x2F;AndroidHttpCapture&#x2F;app&#x2F;build&#x2F;intermediates&#x2F;incremental&#x2F;mergeDebugResources&#x2F;merged.dir&#x2F;values&#x2F;values.xml:733: error: &lt;item&gt; inner element must either be a resource reference or empty.</span><br><span class=\"line\"></span><br><span class=\"line\">Command: &#x2F;home&#x2F;cmm&#x2F;.gradle&#x2F;caches&#x2F;transforms-1&#x2F;files-1.1&#x2F;aapt2-3.2.0-4818971-linux.jar&#x2F;8e0275d065e63c2601af4fb5800833ab&#x2F;aapt2-3.2.0-4818971-linux&#x2F;aapt2 compile --legacy \\</span><br><span class=\"line\">-o \\</span><br><span class=\"line\">&#x2F;home&#x2F;cmm&#x2F;code&#x2F;AndroidHttpCapture&#x2F;app&#x2F;build&#x2F;intermediates&#x2F;res&#x2F;merged&#x2F;debug \\</span><br><span class=\"line\">&#x2F;home&#x2F;cmm&#x2F;code&#x2F;AndroidHttpCapture&#x2F;app&#x2F;build&#x2F;intermediates&#x2F;incremental&#x2F;mergeDebugResources&#x2F;merged.dir&#x2F;values&#x2F;values.xml</span><br><span class=\"line\">Daemon: AAPT2 aapt2-3.2.0-4818971-linux Daemon #1</span><br></pre></td></tr></table></figure>\n\n\n<p>如上错误原来是values.xm资源文件中，元素定义了id后，就不能在后面给值了</p>\n<p>发现 :<br><code>&lt;item name=&quot;split&quot; type=&quot;id&quot;&gt;false&lt;/item&gt;</code></p>\n<p>改为 :<br><code>&lt;item name=&quot;split&quot; type=&quot;id&quot;/&gt;</code><br>即可.</p>\n","categories":["Android"],"tags":["Error"]},{"title":"flutter开发插件和包","url":"/2019/07/02/flutter%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6%E5%92%8C%E5%8C%85/","content":"<h2 id=\"cmd-命令创建开发插件包\"><a href=\"#cmd-命令创建开发插件包\" class=\"headerlink\" title=\"cmd 命令创建开发插件包\"></a>cmd 命令创建开发插件包</h2><p> <code>flutter create --org com.mark --template markplugin</code><br>  使用该–org选项以反向域名表示法指定您的组织。此值用于生成的Android和iOS代码中的各种包和包标识符。<br>  其中 com.mark 就是我的组织名，markplugin 就是我的插件项目名字<br>  生成如下：</p>\n<span id=\"more\"></span>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190702095035265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01hcmtfQ0hZTA==,size_16,color_FFFFFF,t_70\" alt=\"&quot;插件包生成内容&quot;\"></p>\n<p><strong><em>默认情况下，插件项目使用Objective-C for iOS代码和Java for Android代码。如果您更喜欢Swift或Kotlin，您可以使用-i和/或使用Android语言指定iOS语言-a.</em></strong></p>\n<p>例如：<br><code> flutter create --org com.mark --template=plugin -i swift -a kotlin markkotlinpugin</code></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190702101606454.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"如何通过命令创建Flutter包\"><a href=\"#如何通过命令创建Flutter包\" class=\"headerlink\" title=\"如何通过命令创建Flutter包\"></a>如何通过命令创建Flutter包</h2><p>要创建Dart包，请使用以下–template=package标志flutter create：<br> <code>flutter create --org com.mark --template=package hello</code></p>\n<p>这将在hello/文件夹中创建一个包项目，其中包含以下专门内容：</p>\n<p>`<br>lib/hello.dart：包的Dart代码。</p>\n<p>test/hello_test.dart：该单元测试包装。`</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190702102101747.png\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"配置好pubspec-paml上的信息-添加开源协议，编写使用说明\"><a href=\"#配置好pubspec-paml上的信息-添加开源协议，编写使用说明\" class=\"headerlink\" title=\"配置好pubspec.paml上的信息,添加开源协议，编写使用说明\"></a>配置好pubspec.paml上的信息,添加开源协议，编写使用说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">name: flutter_tools</span><br><span class=\"line\">description: A new Flutter Tools package. it works on ios and android</span><br><span class=\"line\">version: 0.0.1</span><br><span class=\"line\">author: MarkCHYL &lt;2285581945@qq.com&gt;</span><br><span class=\"line\">homepage: https:&#x2F;&#x2F;github.com&#x2F;MarkCHYL&#x2F;flutter_tools</span><br></pre></td></tr></table></figure>\n<h2 id=\"发布包\"><a href=\"#发布包\" class=\"headerlink\" title=\"发布包\"></a>发布包</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mbHV0dGVyLmRldi9kb2NzL2RldmVsb3BtZW50L3BhY2thZ2VzLWFuZC1wbHVnaW5zL2RldmVsb3BpbmctcGFja2FnZXM=\">参考地址<i class=\"fa fa-external-link-alt\"></i></span><br>首先我们执行：<br><code>flutter pub pub publish --dry-run</code><br>会检查发布包时是否准备好，是否有错误。<br><code>flutter packages pub publish</code>发布包，<br>但是我因网络原因，没上传成功过。首次大包上传需要登陆谷歌的网站，谷歌账号登陆便好。</p>\n","categories":["Flutter"],"tags":["Flutter"]},{"title":"go的简介","url":"/2023/07/03/go%E7%9A%84%E7%AE%80%E4%BB%8B/","content":"<h3 id=\"go的简介\"><a href=\"#go的简介\" class=\"headerlink\" title=\"go的简介\"></a>go的简介</h3><p>Go（也被称为Golang）是一种由Google开发的开源编程语言。Go的设计目标是提供简单、高效、可靠的编程体验，同时具备并发性和可扩展性。</p>\n<p>以下是Go语言的一些关键特点和优势：</p>\n<ol>\n<li><p>简洁易学：Go语言采用了简洁的语法和设计，减少了冗余和复杂性，使其易于学习和上手。它拥有清晰的语法结构和直观的语义，使得编写和阅读代码变得简单。</p>\n</li>\n<li><p>并发编程：Go语言内置了轻量级的并发模型，通过goroutine和channel机制实现并发编程变得简单和高效。它使得编写并发代码变得容易，并能充分利用多核处理器的优势。</p>\n<span id=\"more\"></span></li>\n<li><p>高性能：Go语言通过优化编译器和运行时环境，以及并发原语的支持，提供了出色的性能。它具有低延迟、高吞吐量和高并发处理能力，适用于处理高负载和大规模应用。</p>\n</li>\n<li><p>内存安全：Go语言提供了垃圾回收机制，自动管理内存，减少了程序员的负担和错误。它还具有严格的类型安全性和内存安全性，有效地防止了一些常见的编程错误和安全漏洞。</p>\n</li>\n<li><p>跨平台：Go语言支持多种操作系统和架构，包括Windows、Linux、macOS等。你可以在不同的平台上编写一次代码，并在不需要修改的情况下进行编译和运行。</p>\n</li>\n<li><p>开发效率：Go语言的设计强调开发效率，提供了丰富的标准库和工具，使得开发人员能够快速构建可靠的应用程序。它还支持自动化测试、代码格式化和文档生成等功能，有助于提高团队的协作和代码质量。</p>\n</li>\n<li><p>开源生态系统：Go语言拥有活跃的开源社区和丰富的第三方库，你可以轻松地找到各种用于开发Web应用、数据库操作、网络编程、并发处理等方面的库和框架。</p>\n</li>\n</ol>\n<p>由于上述特点和优势，Go语言在后端开发、云计算、容器技术、网络服务和分布式系统等领域得到了广泛的应用。它适合构建高性能、可扩展的应用程序，并在Google等大型科技公司以及许多初创企业中得到了广泛采用。</p>\n<h3 id=\"能做什么世面上的岗位\"><a href=\"#能做什么世面上的岗位\" class=\"headerlink\" title=\"能做什么世面上的岗位\"></a>能做什么世面上的岗位</h3><p>Go语言在世界上的工作市场上可以涵盖多个岗位和角色。以下是一些使用Go语言的常见岗位：</p>\n<ol>\n<li><p>后端开发工程师：作为后端开发工程师，你可以使用Go语言构建高性能、可扩展的服务器端应用程序。你将负责设计和实现后端逻辑、处理数据存储和数据库操作，并与前端开发人员协作构建完整的应用。</p>\n</li>\n<li><p>分布式系统工程师：Go语言在构建分布式系统和微服务架构方面表现出色。作为分布式系统工程师，你可以使用Go语言开发和维护分布式应用程序、处理服务间通信和负载均衡等问题。</p>\n</li>\n<li><p>DevOps工程师：Go语言具有强大的并发性和性能优势，因此在DevOps领域也有应用。作为DevOps工程师，你可以使用Go语言编写自动化脚本和工具，简化部署、监控和运维任务。</p>\n</li>\n<li><p>区块链开发工程师：Go语言在区块链开发领域也有广泛的应用。作为区块链开发工程师，你可以使用Go语言构建区块链节点、智能合约和分布式应用程序。</p>\n</li>\n<li><p>云原生工程师：Go语言在云原生技术中扮演重要角色。作为云原生工程师，你可以使用Go语言开发和管理容器化应用程序、使用云原生工具和框架，如Docker和Kubernetes。</p>\n</li>\n<li><p>系统工程师：Go语言的高性能和并发性使其成为开发系统级软件的理想选择。作为系统工程师，你可以使用Go语言构建操作系统组件、网络协议栈或高性能服务器。</p>\n</li>\n<li><p>后台服务开发工程师：许多公司和产品需要可靠的后台服务来支持业务逻辑和数据处理。作为后台服务开发工程师，你可以使用Go语言构建高吞吐量、低延迟的后台服务，处理请求和响应。</p>\n</li>\n</ol>\n<p>这只是一些常见的岗位，使用Go语言的应用广泛。实际上，Go语言的简洁性、并发性和性能使其成为处理大规模应用和分布式系统的理想选择，因此在不同行业和领域中都有可能找到适合Go开发技能的岗位。</p>\n","categories":["Go"],"tags":["基础知识"]},{"title":"android retrofit End of input at line 1 column 1 path","url":"/2020/09/03/android-retrofit-End-of-input-at-line-1-column-1-path/","content":"<p>在使用retrofit作为项目的网络请求库时，接口定义如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@GET(ACT_GET_NEW_STAFF)</span><br><span class=\"line\">Call&lt;TaskEn&gt; reqGetNewStaff();</span><br></pre></td></tr></table></figure>\n<p>接口从服务端获取了数据，通过GsonConverterFactory将服务端相应内容解析成对应的实体类。在接口正常响应时（有数据返回），并没有什么异常发生，但当接口请求的数据为空，我们的服务端人员并不是返回理论意义上的空，null或者[]（数据集合空），而是返回没有响应体body，只有响应头header，content-length为0的Response</p>\n<p>这时候GsonConverterFactory就解析异常了，并抛出如下异常：</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>java.io.EOFException:End of input at line 1 column 1 path </p>\n</blockquote>\n<p>一般来说，如果接口本身就是不需要处理body的，那么我们通常定义接口为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Call&lt;Void&gt;</span><br></pre></td></tr></table></figure>\n<p> 这和上面的那两个接口是不一样的。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ul>\n<li><p>请服务端人员吃顿饭，让他们规范接口，当数据为空时，返回null或者[]</p>\n</li>\n<li><p>自己动手丰衣足食</p>\n<p>自定义一个ConverterFactory</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public class NullOnEmptyConverterFactory extends Converter.Factory &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations, Retrofit retrofit) &#123;</span><br><span class=\"line\">        final Converter&lt;ResponseBody, ?&gt; delegate &#x3D; retrofit.nextResponseBodyConverter(this, type, annotations);</span><br><span class=\"line\">        return new Converter&lt;ResponseBody,Object&gt;() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public Object convert(ResponseBody body) throws IOException &#123;</span><br><span class=\"line\">                if (body.contentLength() &#x3D;&#x3D; 0) return null;</span><br><span class=\"line\">                return delegate.convert(body);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后设置到retrofit</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Retrofit retrofit &#x3D; new Retrofit.Builder()</span><br><span class=\"line\">    ....</span><br><span class=\"line\">    .addConverterFactory(new NullOnEmptyConverterFactory())</span><br><span class=\"line\">    .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">    .build();</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>需要注意的是，NullOnEmptyConverterFactory必需在GsonConverterFactory之前addConverterFactory</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52b2lkY24uY29tL2FydGljbGUvcC14b2lxZGl1ei1yZS5odG1s\">原文连接<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["Error","Retrofit"]},{"title":"flutter入门之常见的flutter问题汇总","url":"/2019/07/11/flutter%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B8%B8%E8%A7%81%E7%9A%84flutter%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VtYWlsX2phZGUvYXJ0aWNsZS9kZXRhaWxzLzg1MzE3ODU5IyMj\">csdn上原博文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>【原创不易，转载请注明出处：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VtYWlsX2phZGUvYXJ0aWNsZS9kZXRhaWxzLzg1MzE3ODU5JUUzJTgwJTkx\">https://blog.csdn.net/email_jade/article/details/85317859】<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n<ol>\n<li><p>使用AppBar后如何去掉左边的返回箭头。左边的图标对应的是leading，源代码如下（吐槽一下，CSDN暂不支持dart语言）：</p>\n<p> Widget leading = widget.leading;<br> if (leading == null &amp;&amp; widget.automaticallyImplyLeading) {<br>   if (hasDrawer) {</p>\n<pre><code> leading = IconButton(\n   icon: const Icon(Icons.menu),\n   onPressed: _handleDrawerButton,\n   tooltip: MaterialLocalizations.of(context).openAppDrawerTooltip,\n );</code></pre>\n<p>   } else {</p>\n<pre><code> if (canPop)\n   leading = useCloseButton ? const CloseButton() : const BackButton();</code></pre>\n<p>   }<br> }<br> if (leading != null) {<br>   leading = ConstrainedBox(</p>\n<pre><code> constraints: const BoxConstraints.tightFor(width: _kLeadingWidth),\n child: leading,</code></pre>\n<p>   );<br> }<br>修改方式为， leading为null，automaticallyImplyLeading为false：</p>\n</li>\n</ol>\n<p>appBar: AppBar(<br>        leading: null,<br>        automaticallyImplyLeading: false,)<br>2. 使用flutter的canvas做文字绘制的时候用到的api为TextPainter</p>\n<ol start=\"3\">\n<li>使用flutter绘制控件的时候想做到控件超出屏幕范围后自动换行，那么请参考Wrap，可以轻松实现如下的布局：</li>\n</ol>\n<ol start=\"4\">\n<li><p>要实现类似安卓原生ViewPager的UI，请使用PageView，注意定义自己的PageController，然后可以利用PageController的jumpToPage（int）实现自定义的Page页的跳转</p>\n</li>\n<li><p>要实现类似顶部和底部导航栏，请参考TabBar，适当的时候可以和AppBar结合使用</p>\n</li>\n</ol>\n<p>6. flutter is a SingleTickerProviderStateMixin but multiple tickers were created. 报错，原因是多个地方调用setState请求重绘，但是state使用的是SingleTickerProviderStateMixin ，将其改成TickerProviderStateMixin即可。</p>\n<ol start=\"7\">\n<li>解决类冲突的问题，比如，我自定义一个Banner.dart类，这个类跟系统的Banner冲突，那么我们可以这样解决。</li>\n</ol>\n<p>import ‘package:flutter/material.dart’;<br>import ‘package:myproject/Banner.dart’ as myproject;</p>\n<p>//这样使用我们自己的Banner<br>myproject.Banner _myBanner;<br>//系统的Banner<br>Banner _banner;<br>8. 解决Android手机布局浸入到状态栏的问题，用一个SafeArea进行包装即可，如下：</p>\n<p>SafeArea(top: true,<br>      child: MaterialApp(<br>        home: ,<br>      ),);<br>9. 在切换tabbar或者pageview的时候要保存上一个tab widget的状态，参考AutomaticKeepAliveClientMixin既可，如下：</p>\n<p>//假如PageView有四个子页面</p>\n<p> @override<br>  Widget build(BuildContext context) {<br>    return Scaffold(<br>        body: PageView(<br>          controller: pageController,<br>          children: <Widget>[<br>            ArticlesPage(),<br>            ProjectPage(),<br>            NavigationPage(),<br>            CollectionArticlesPage(),<br>          ],<br>          onPageChanged: changePage,<br>        ),<br>        bottomNavigationBar: Navigations(_page, changePage));<br>  }</p>\n<p>//然后在子Page的State分别实现with AutomaticKeepAliveClientMixin，wantkeepAlive返回true</p>\n<p>class ArticlesPageState extends State<ArticlesPage> with AutomaticKeepAliveClientMixin{<br>  @override<br>  bool get wantKeepAlive =&gt; true;<br>}</p>\n<p>class ProjectPageState extends State<ProjectPage> with AutomaticKeepAliveClientMixin{<br>  @override<br>  bool get wantKeepAlive =&gt; true;<br>}</p>\n<p>class NavigationPageState extends State<NavigationPage> with AutomaticKeepAliveClientMixin{<br>  @override<br>  bool get wantKeepAlive =&gt; true;<br>}</p>\n<p>class CollectionArticlesPageState extends State<CollectionArticlesPage> with AutomaticKeepAliveClientMixin{<br>  @override<br>  bool get wantKeepAlive =&gt; true;<br>}<br>10. Android手机启动时候白屏的问题解决，android/app/src/main/res/drawable/launch_background.xml中定义了自定义splash的方法：</p>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!-- Modify this file to customize your launch splash screen -->\n<layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item android:drawable=\"@android:color/white\" />\n\n<pre><code>&lt;!-- You can insert your own image assets here --&gt;\n&lt;!-- &lt;item&gt;\n    &lt;bitmap\n        android:gravity=&quot;center&quot;\n        android:src=&quot;@mipmap/launch_image&quot; /&gt;\n&lt;/item&gt; --&gt;</code></pre>\n</layer-list>\n将<item>注释去掉，替换为自己的launcher_image即可 。\n\n<p>11.  界面存在输入框的时候，点击后软键盘将页面顶起来导致页面重绘的问题（Android fitsystem），可以通过将Scaffold的resizeToAvoidBottomPadding属性设置为false来关闭重绘，如下：</p>\n<p>return Scaffold(<br>      resizeToAvoidBottomPadding: false,<br>);<br>12. 修改TextFiled的边界宽度，可以通过decoration的contentPadding属性进行修改，如下：</p>\n<p>return TextField(<br>        decoration: InputDecoration(<br>          contentPadding: EdgeInsets.all(8),<br>        ),<br>);<br>13. 如果想实现一个布局，在某些条件下显示，可以采用Offstage布局，动态控制其offstage属性值即可</p>\n<ol start=\"14\">\n<li><p>如果出现弹出输入法的时候导致Overflow错误，可以将布局镶嵌到SingleChildScrollView中，比如：</p>\n<p>return Scaffold(<br>  body: SingleChildScrollView(</p>\n<pre><code>child: Container(\n  constraints: BoxConstraints(\n    maxHeight: MediaQuery.of(context).size.height,\n    maxWidth: MediaQuery.of(context).size.width,\n  ),\n),</code></pre>\n<p>),<br>);</p>\n</li>\n<li><p>GridView的item宽高默认是1:1，可以通过修改childAspectRatio的值来进行宽高的修改，该值代表宽：高</p>\n</li>\n<li><p>flutter中绘制虚线，使用path_drawing</p>\n</li>\n<li><p>flutter 中禁用GridView的滚动，可以使用physics属性，取值为NeverScrollableScrollPhysics()，如下：</p>\n</li>\n</ol>\n<p>GridView.count(<br>      physics: NeverScrollableScrollPhysics(),<br>);<br>18. flutter隐藏状态栏，使用：</p>\n<p>SystemChrome.setEnabledSystemUIOverlays([]);<br>19. 监听某个widget是否已经渲染完成，使用WidgetsBinding，方法是在initstate或者build中注册回调，如下：</p>\n<pre><code>WidgetsBinding.instance.addPostFrameCallback((callback)&#123;\n  print(&quot;complete&quot;);\n&#125;);</code></pre>\n<ol start=\"20\">\n<li>flutter设置屏幕支持的方向：</li>\n</ol>\n<p>   以下设置为设置整个项目运行到时候只允许横屏，如果需要其他方向，可以参考设置。</p>\n<p>  SystemChrome.setPreferredOrientations([DeviceOrientation.landscapeLeft, DeviceOrientation.landscapeRight]).then((_){<br>    runApp(MyApp());<br>  });<br>对于IOS来说，可能我们设置只允许横屏了，但是效果确依旧可以竖屏，记得修改xcode的General–Deployment Info–Device Orientation属性，自己勾选对应的方向，如下。</p>\n<p>设置屏幕显示方向，由于flutter中有bug，在IOS端可能不生效，需要插件支持，见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phZGVubm4vZmx1dHRlcl9vcmllbnRhdGlvbg==\">https://github.com/jadennn/flutter_orientation<i class=\"fa fa-external-link-alt\"></i></span> </p>\n<p>21. flutter设置多语言支持的时候发现在IOS端只显示英语的bug，是由于xcode中默认没有添加中文（其他语言类似）的选择，解决办法，在Info–Locallzations中选择需要的语言，如下：</p>\n<ol start=\"22\">\n<li><p>flutter中禁止控件复用，可以使用不同的key，比如说，如果我们有一个stateful的控件，在initstate中进行了一些值的初始计算，在页面中需要展示多个这样的控件，不想多个控件公用同一套参数（换句话说，initstate只会在第一次初始化的时候调用），那么可以设置不同的key。</p>\n</li>\n<li><p>裁剪图片的方法：</p>\n</li>\n</ol>\n<p>import ‘dart:ui’ as DartUi;</p>\n<p>///根据src和dst裁剪图片<br>  static DartUi.Image getCroppedImage(DartUi.Image image, Rect src, Rect dst) {<br>    var pictureRecorder = new DartUi.PictureRecorder();<br>    Canvas canvas = new Canvas(pictureRecorder);<br>    canvas.drawImageRect(image, src, dst, Paint());<br>    return pictureRecorder<br>        .endRecording()<br>        .toImage(dst.width.floor(), dst.height.floor());<br>  }<br>24. 在不使用BuildContext的情况下进行页面跳转：</p>\n<p>    a. 创建一个global的key</p>\n<p>static GlobalKey<NavigatorState> gNavigatorKey = new GlobalKey<NavigatorState>();<br>    b. 在MaterialApp初始化的时候使用</p>\n<p>return MaterialApp(<br>      navigatorKey: Global.gNavigatorKey,<br>      routes: &lt;String, WidgetBuilder&gt; {<br>        ‘/login’: (BuildContext context) =&gt; new LoginPage(),<br>      },<br>      //….代码省略<br>    c. 需要的地方使用：</p>\n<p>Global.gNavigatorKey.currentState.pushNamedAndRemoveUntil(‘/login’,(_) =&gt; false);<br>    注意的是这种方法代价比较大，除非特殊情况，否则不建议使用。使用的时候根据不同的场景调用不同的push方法</p>\n<hr>\n<p>作者：Hirabbit_jaden<br>来源：CSDN<br>原文：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VtYWlsX2phZGUvYXJ0aWNsZS9kZXRhaWxzLzg1MzE3ODU5\">https://blog.csdn.net/email_jade/article/details/85317859<i class=\"fa fa-external-link-alt\"></i></span><br>版权声明：本文为博主原创文章，转载请附上博文链接！</p>\n","categories":["Flutter"],"tags":["Flutter","Flutter问题"]},{"title":"android反编译apktool---dex2jar---jdgui","url":"/2020/12/14/android%E5%8F%8D%E7%BC%96%E8%AF%91apktool-dex2jar-jdgui/","content":"<h2 id=\"反编译的工具（MAC环境下）\"><a href=\"#反编译的工具（MAC环境下）\" class=\"headerlink\" title=\"反编译的工具（MAC环境下）\"></a>反编译的工具（MAC环境下）</h2><p>下载地址：</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pYm90cGVhY2hlcy5naXRodWIuaW8vQXBrdG9vbC9pbnN0YWxsLw==\">apkTool：一款用于反编译apk资源文件<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZGV4Mmphci9maWxlcy8=\">dex2jar：是用于将class.dex 转换成classes-dex2jar.jar的工具<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL2phdmEtZGVjb21waWxlci5naXRodWIuaW8v\">jdgui：这个用于查看classes-dex2jar.jar 源码工具<i class=\"fa fa-external-link-alt\"></i></span></p>\n<span id=\"more\"></span>\n\n</li>\n</ul>\n<h2 id=\"apktool下载安装使用\"><a href=\"#apktool下载安装使用\" class=\"headerlink\" title=\"apktool下载安装使用\"></a>apktool下载安装使用</h2><p>1、下载</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20191226175801984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\"></p>\n<ul>\n<li>将你下载的apkttool工具放到/usr/local/bin<br><img data-src=\"https://img-blog.csdnimg.cn/20191226185054248.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\"></li>\n<li>指向对应的文件夹cd /usr/local/bin<br><img data-src=\"https://img-blog.csdnimg.cn/20191226185223643.png\"></li>\n<li>给apktool权限：输入以下两个命令行给予这两个文件夹权限<ul>\n<li>chmod a+x apktool.jar</li>\n<li>chmod a+x apktool</li>\n</ul>\n</li>\n<li>验证是否成功<br>终端输入<code>apktool -version</code></li>\n</ul>\n<p>2、使用反编译命令行 apktool d xxxx.apk<br>反编译之后的文件夹中的文件介绍<br><img data-src=\"https://img-blog.csdnimg.cn/20191226190211334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\"><br><img data-src=\"https://img-blog.csdnimg.cn/20191226190234935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\"><br>假如只需要获取app的xml或者图片资源，则到这一步则完成啦！</p>\n<p>如果要获取到java的代码，那么我们还要进行回编译，这样，我们就能获取到classex.dex文件了</p>\n<p>在终端执行命令 <code>apktool b app反编译的文件夹名称</code> ，执行完毕后，我们就可以在刚刚的文件夹里面多了一个<code>build</code>文件夹了，里面的 <code>classess.dex </code>则是我们想要获取到的源码文件</p>\n<h2 id=\"dex2jar操作流程\"><a href=\"#dex2jar操作流程\" class=\"headerlink\" title=\"dex2jar操作流程\"></a>dex2jar操作流程</h2><p>下载<br><img data-src=\"https://img-blog.csdnimg.cn/20191226190424255.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\"><br>下载完成解压文件后，再终端执行 <code>chmod +x d2j-dex2jar.sh </code>和 <code>chmod +x d2j_invoke.sh</code> 添加运行权限：</p>\n<ul>\n<li>拿出里面的<code>classe.dex</code>，放入到<code>dex2jar</code>文件夹中</li>\n<li>使用命令行 <code>sh d2j-dex2jar.sh classes.dex</code>,就可以转换成<code>classes-dex2jar.jar </code><br><img data-src=\"https://img-blog.csdnimg.cn/20191226190907884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1YWlndWFpXzIwMTU=,size_16,color_FFFFFF,t_70\"></li>\n</ul>\n<h2 id=\"jd-gui反编译class文件查看java代码\"><a href=\"#jd-gui反编译class文件查看java代码\" class=\"headerlink\" title=\"jd-gui反编译class文件查看java代码\"></a>jd-gui反编译class文件查看java代码</h2><p>下载文件放入自己的安装目录，解压即可使用<br>然后把刚刚我们获取到的<code>classes-dex2jar.jar</code>拖进去打开文件即可。</p>\n","categories":["Android"],"tags":["反编译","工具搭建"]},{"title":"kotlin学习笔记第一章","url":"/2019/11/19/kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E7%AC%AC%E4%B8%80%E7%AB%A0/","content":"<h2 id=\"第一章-搭建-Kotlin-开发环境\"><a href=\"#第一章-搭建-Kotlin-开发环境\" class=\"headerlink\" title=\"第一章 搭建 Kotlin 开发环境\"></a>第一章 搭建 Kotlin 开发环境</h2><hr>\n<h3 id=\"一、Kotlin简介：\"><a href=\"#一、Kotlin简介：\" class=\"headerlink\" title=\"一、Kotlin简介：\"></a>一、Kotlin简介：</h3><p>Kotlin是一种基于JVM的新型编程语言，它完全兼容Java语言。<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb25neXViYW8uY29tL2Jvb2svcHJpbWFyeS9sZXNzb24tc3VtbWFyeS5odG1s\">慕课网电子书<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"Kotlin-优先意味着什么？\"><a href=\"#Kotlin-优先意味着什么？\" class=\"headerlink\" title=\"Kotlin 优先意味着什么？\"></a>Kotlin 优先意味着什么？</h3><p>在构建新的 Android 开发工具和内容（例如 Jetpack 库、示例、文档和培训内容）时，google会在设计层面考虑到 Kotlin 用户</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Java 语言</th>\n<th>Kotlin</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>平台 SDK 支持</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Android Studio 支持</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Lint</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>==引导式文档支持</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>API 文档支持</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>AndroidX 支持</td>\n<td>是</td>\n<td>是</td>\n</tr>\n<tr>\n<td>AndroidX Kotlin 特有 API（KTX、协程等）</td>\n<td>无</td>\n<td>是</td>\n</tr>\n<tr>\n<td>在线培训</td>\n<td>尽力而为</td>\n<td>是</td>\n</tr>\n<tr>\n<td>示例</td>\n<td>尽力而为</td>\n<td>是</td>\n</tr>\n<tr>\n<td>多平台项目</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>Jetpack Compose</td>\n<td>否</td>\n<td>是</td>\n</tr>\n</tbody></table>\n<span id=\"more\"></span>\n\n<h3 id=\"Kotlin能做什么\"><a href=\"#Kotlin能做什么\" class=\"headerlink\" title=\"Kotlin能做什么?\"></a>Kotlin能做什么?</h3><p>如果对 Kotlin 的能力仅仅停留在 JVM平 台，那是片面的。如今的 Kotlin 已经从当初的更好 Java 目标完成了它华丽的大变身，他们的目标已经瞄准了星辰大海。目前 Kotlin 可以适用于<strong>移动端跨平台、原生 JVM、服务端开发、Web 开发、Android 开发、数据科学</strong>等多个领域。此外近年来 Kotlin 团队已经将重心转移到了语言层面的跨平台，多平台的支持。<br><img data-src=\"https://songyubao.com/book/primary/kotlin/kotlin-ablility.png\"></p>\n<h3 id=\"Kotlin与Java的异同\"><a href=\"#Kotlin与Java的异同\" class=\"headerlink\" title=\"Kotlin与Java的异同\"></a>Kotlin与Java的异同</h3><p><strong>打印日志</strong></p>\n<blockquote>\n<p>Java </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">System.out.print(<span class=\"string\">&quot;hello world&quot;</span>); </span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin </p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&quot;hello world&quot;</span>) println(<span class=\"string\">&quot;hello world&quot;</span>) </span><br></pre></td></tr></table></figure>\n\n<p><strong>定义变量与常量常</strong></p>\n<blockquote>\n<p>Java </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String name = <span class=\"string\">&quot;hello world&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">final</span> String name = <span class=\"string\">&quot;hello world&quot;</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin </p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;hello world&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">val</span> name = <span class=\"string\">&quot;hello world&quot;</span> </span><br></pre></td></tr></table></figure>\n<p><strong>null声明</strong></p>\n<blockquote>\n<p>Java </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String otherName; </span><br><span class=\"line\">otherName = <span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> otherName : String? </span><br><span class=\"line\">otherName = <span class=\"literal\">null</span> </span><br></pre></td></tr></table></figure><br><strong>空判断</strong><br>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (text != <span class=\"keyword\">null</span>) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = text.length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">text?.let &#123; </span><br><span class=\"line\">    <span class=\"keyword\">val</span> length = text.length</span><br><span class=\"line\">&#125; <span class=\"comment\">// </span></span><br><span class=\"line\">or </span><br><span class=\"line\">simply <span class=\"keyword\">val</span> length = text?.length </span><br></pre></td></tr></table></figure><br><strong>字符串拼接</strong><br>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String firstName = <span class=\"string\">&quot;Android&quot;</span>; </span><br><span class=\"line\">String lastName = <span class=\"string\">&quot;Architect&quot;</span>; </span><br><span class=\"line\">String message = <span class=\"string\">&quot;My name is: &quot;</span> + firstName + <span class=\"string\">&quot; &quot;</span> + lastName; </span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> firstName = <span class=\"string\">&quot;Android&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">val</span> lastName = <span class=\"string\">&quot;Architect&quot;</span> </span><br><span class=\"line\"><span class=\"keyword\">val</span> message = <span class=\"string\">&quot;My name is: <span class=\"variable\">$firstName</span> <span class=\"variable\">$lastName</span>&quot;</span> </span><br></pre></td></tr></table></figure><br><strong>换行</strong><br>Java </p>\n</blockquote>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String text = <span class=\"string\">&quot;First Line\\n&quot;</span> + <span class=\"string\">&quot;Second Line\\n&quot;</span> + <span class=\"string\">&quot;Third Line&quot;</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin </p>\n</blockquote>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> text = <span class=\"string\">&quot;&quot;&quot; |First Line |Second Line |Third Line &quot;&quot;&quot;</span>.trimMargin() </span><br></pre></td></tr></table></figure>\n<p><strong>三元表达式</strong></p>\n<blockquote>\n<p>Java </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">String text = x &gt; <span class=\"number\">5</span> ? <span class=\"string\">&quot;x &gt; 5&quot;</span> : <span class=\"string\">&quot;x &lt;= 5&quot;</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin </p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> text = <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">5</span>) <span class=\"string\">&quot;x &gt; 5&quot;</span> <span class=\"keyword\">else</span> <span class=\"string\">&quot;x &lt;= 5&quot;</span> </span><br></pre></td></tr></table></figure>\n<p><strong>操作符</strong></p>\n<blockquote>\n<p>java </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">final int andResult &#x3D; a &amp; b; </span><br><span class=\"line\">final int orResult &#x3D; a | b; </span><br><span class=\"line\">final int xorResult &#x3D; a ^ b; </span><br><span class=\"line\">final int rightShift &#x3D; a &gt;&gt; 2;</span><br><span class=\"line\">final int leftShift &#x3D; a &lt;&lt; 2; </span><br><span class=\"line\">final int unsignedRightShift &#x3D; a &gt;&gt;&gt; 2;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> Kotlin </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">val andResult &#x3D; a and b </span><br><span class=\"line\">val orResult &#x3D; a or b </span><br><span class=\"line\">val xorResult &#x3D; a xor b </span><br><span class=\"line\">val rightShift &#x3D; a shr 2 </span><br><span class=\"line\">val leftShift &#x3D; a shl 2 </span><br><span class=\"line\">val unsignedRightShift &#x3D; a ushr 2 </span><br></pre></td></tr></table></figure>\n<p><strong>类型判断和转换 (声明式)</strong></p>\n<blockquote>\n<p>Java </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Car car &#x3D; (Car) object;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">var car &#x3D; object as Car </span><br></pre></td></tr></table></figure>\n<p><strong>类型判断和转换 (隐式)</strong> </p>\n<blockquote>\n<p>Java </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> Car) &#123;</span><br><span class=\"line\">    Car car = (Car) object; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">object</span> <span class=\"keyword\">is</span> Car) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> car = <span class=\"keyword\">object</span> <span class=\"comment\">// 自动识别 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>多重条件</strong> </p>\n<blockquote>\n<p>Java </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">0</span> &amp;&amp; score &lt;= <span class=\"number\">300</span>) &#123; &#125; </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (score in 0..300) &#123; &#125; </span><br></pre></td></tr></table></figure>\n<p><strong>更灵活的case语句</strong></p>\n<blockquote>\n<p>Java</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> score = <span class=\"comment\">// some score;String grade; </span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (score) &#123; </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">10</span>: </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">9</span>: </span><br><span class=\"line\">    grade = <span class=\"string\">&quot;Excellent&quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">break</span>; </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">8</span>: </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">7</span>: </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6</span>: </span><br><span class=\"line\">    grade = <span class=\"string\">&quot;Good&quot;</span>; </span><br><span class=\"line\">    <span class=\"keyword\">break</span>; </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5</span>: </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>: </span><br><span class=\"line\">    grade = <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>; </span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    grade = <span class=\"string\">&quot;Fail&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    grade = <span class=\"string\">&quot;Fail&quot;</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Kotlin</p>\n</blockquote>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> score = <span class=\"comment\">// some score </span></span><br><span class=\"line\"><span class=\"keyword\">var</span> grade = <span class=\"keyword\">when</span> (score) &#123; </span><br><span class=\"line\">    <span class=\"number\">9</span>, <span class=\"number\">10</span> -&gt; <span class=\"string\">&quot;Excellent&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">in</span> <span class=\"number\">6</span>..<span class=\"number\">8</span> -&gt; <span class=\"string\">&quot;Good&quot;</span> </span><br><span class=\"line\">    <span class=\"number\">4</span>, <span class=\"number\">5</span> -&gt; <span class=\"string\">&quot;OK&quot;</span> </span><br><span class=\"line\">    <span class=\"keyword\">in</span> <span class=\"number\">1</span>..<span class=\"number\">3</span> -&gt; <span class=\"string\">&quot;Fail&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> -&gt; <span class=\"string\">&quot;Fail&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>for循环</strong></p>\n<blockquote>\n<p>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span> ; i++) &#123; &#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span> ; i++) &#123; &#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; i &gt;= <span class=\"number\">0</span> ; i--) &#123; &#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span> ; i+=<span class=\"number\">2</span>) &#123; &#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">10</span>; i &gt;= <span class=\"number\">0</span> ; i-=<span class=\"number\">2</span>) &#123; &#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> (String item : collection) &#123; &#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Map.Entry entry: map.entrySet()) &#123; &#125; </span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">for (i in 1..10) &#123; &#125;</span><br><span class=\"line\">for (i in 1 until 10) &#123; &#125;</span><br><span class=\"line\">for (i in 10 downTo 0) &#123; &#125;</span><br><span class=\"line\">for (i in 1..10 step 2) &#123; &#125;</span><br><span class=\"line\">for (i in 10 downTo 0 step 2) &#123; &#125;</span><br><span class=\"line\">for (item in collection) &#123; &#125;</span><br><span class=\"line\">for ((key, value) in map) &#123; &#125;</span><br></pre></td></tr></table></figure><br><strong>更方便的集合操作</strong><br>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> List listOfNumber = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>); </span><br><span class=\"line\"><span class=\"keyword\">final</span> Map keyValue = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">map.put(<span class=\"number\">1</span>, <span class=\"string\">&quot;Android&quot;</span>); </span><br><span class=\"line\">map.put(<span class=\"number\">2</span>, <span class=\"string\">&quot;Ali&quot;</span>);</span><br><span class=\"line\">map.put(<span class=\"number\">3</span>, <span class=\"string\">&quot;Mindorks&quot;</span>); <span class=\"comment\">// Java 9 </span></span><br><span class=\"line\"><span class=\"keyword\">final</span> List listOfNumber = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">final</span> Map keyValue = Map.of(<span class=\"number\">1</span>, <span class=\"string\">&quot;Android&quot;</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;Ali&quot;</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;Mindorks&quot;</span>);</span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">val listOfNumber &#x3D; listOf(1, 2, 3, 4)</span><br><span class=\"line\">val keyValue &#x3D; mapOf(1 to &quot;Android&quot;, 2 to &quot;Ali&quot;, 3 to &quot;Mindorks&quot;)</span><br></pre></td></tr></table></figure><br><strong>遍历</strong><br>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Java 7 and below </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Car car : cars) &#123; </span><br><span class=\"line\">    System.out.println(car.speed); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java 8+ </span></span><br><span class=\"line\">cars.forEach(car -&gt; System.out.println(car.speed)); </span><br><span class=\"line\"><span class=\"comment\">// Java 7 and below </span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (Car car : cars) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (car.speed &gt; <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">        System.out.println(car.speed);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Java 8+ </span></span><br><span class=\"line\">cars.stream()</span><br><span class=\"line\">    .filter(car -&gt; car.speed &gt; <span class=\"number\">100</span>)</span><br><span class=\"line\">    .forEach(car -&gt; System.out.println(car.speed)); </span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\">cars.forEach &#123; println(it.speed) &#125; </span><br><span class=\"line\">cars.filter &#123; it.speed &gt; <span class=\"number\">100</span> &#125; </span><br><span class=\"line\">    .forEach &#123; println(it.speed)&#125; </span><br></pre></td></tr></table></figure><br><strong>方法定义</strong><br>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">   <span class=\"comment\">// logic here</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">doSomething</span><span class=\"params\">(<span class=\"keyword\">int</span>... numbers)</span> </span>&#123; </span><br><span class=\"line\">   <span class=\"comment\">// logic here </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Kotlin</p>\n</blockquote>\n <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">// logic here </span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doSomething</span><span class=\"params\">(<span class=\"keyword\">vararg</span> numbers: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// logic here </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>带返回值的方法</strong></p>\n<blockquote>\n<p>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">   <span class=\"comment\">// logic here </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> score; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// logic here </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> score </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// as a single-expression function </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">()</span></span>: <span class=\"built_in\">Int</span> = score</span><br></pre></td></tr></table></figure><br><strong>无结束符号</strong><br>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123; </span><br><span class=\"line\">   <span class=\"comment\">// logic here </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">2</span> * value; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(value: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// logic here </span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"number\">2</span> * value </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// as a single-expression function </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(value: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> = <span class=\"number\">2</span> * value </span><br></pre></td></tr></table></figure><br><strong>constructor 构造器</strong><br>Java<br> <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span> </span>&#123; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Utils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// This utility class is not publicly instantiable </span></span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getScore</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span> * value; </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Utils</span> <span class=\"keyword\">private</span> <span class=\"keyword\">constructor</span></span>() &#123;</span><br><span class=\"line\">   <span class=\"keyword\">companion</span> <span class=\"keyword\">object</span> &#123;</span><br><span class=\"line\">       <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(value: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">2</span> * value</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// another way </span></span><br><span class=\"line\"><span class=\"keyword\">object</span> Utils &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getScore</span><span class=\"params\">(value: <span class=\"type\">Int</span>)</span></span>: <span class=\"built_in\">Int</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"number\">2</span> * value</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br> <strong>Get Set 构造器</strong><br>Java<br>  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Developer</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Developer</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.name = name; <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getAge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>Kotlin<br> <figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Developer</span></span>(<span class=\"keyword\">val</span> name: String, <span class=\"keyword\">val</span> age: <span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","categories":["Android"],"tags":["Android","Kotlin","学习笔记"]},{"title":"android 修改项目包名详解","url":"/2019/08/06/android-%E4%BF%AE%E6%94%B9%E9%A1%B9%E7%9B%AE%E5%8C%85%E5%90%8D%E8%AF%A6%E8%A7%A3/","content":"<p>再简单的东西也的记下来，不然容易忘记。<br>此处原文地址来源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xODkxZDVhMWExMjE=\">https://www.jianshu.com/p/1891d5a1a121<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<p>在android 平常项目开发中，修改项目包名是很常见的事，哪如何有限修改包名一步到位呢？经过几次痛苦的经历后，觉得有必要记录一番！<br> <span id=\"more\"></span><br>对于修改包名，一般有两种情况：<br>1）一个是包名目录结构不变，比如说，将包名“com.zlc.xuexi”，改成”com.xuexi.zlc”<br>2）另一个是包名目录结构改变了，目录级数改变了，比如说，从”com.xuexi.zlc”，改变成”com.xuexi.zlc.zlc”，这里包名的目录结构就从3级改变成为了4级<br>下面分别来讲解一下这两种情况<br>1、第一种情况：包名目录结构不变<br>针对第一种情况，其实特别好改，步骤截图如下：<br>切换的Progject结构，查看java包名结构，一般是这样的</p>\n</blockquote>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-a0f6b84a3fcd681d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/507/format/webp\"></p>\n<p>点击show options menu按钮</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-8e9f64f76dd666e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/534/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-ca64b8ff27c0e2f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/350/format/webp\"></p>\n<p>去掉勾上的 Hide Empty Middle Packages  和 Show Members</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-245a095cfef4c8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/293/format/webp\"></p>\n<p>java包的展示目录结构就改变了</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-b188356d6a454df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/538/format/webp\"></p>\n<p>对于包名目录结构不改变的。就分别改各个层次对应的包名或者直接按快捷键 Shift + F6</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-5748e03a357ac8d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/747/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-bbf9f6e3517de803.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/629/format/webp\"></p>\n<p>同理，假如是3级目录结构包名，每一个都要改变的话，就按照上图的做法一个个更改<br>接着，去改app模块下的build.gradle文件</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-c2b0a1b594ceb7a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/531/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-b50f2f39318e3a86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/651/format/webp\"></p>\n<p>然后去修改AndroidManifest.xml文件</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-f7573970e99b92ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/672/format/webp\"></p>\n<p>最后，点击sync同步一下就大功告成了<br>2、第二种情况：包名目录结构要改变的<br>针对第二种情况，步骤截图如下：</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-a0f6b84a3fcd681d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/507/format/webp\"><br>点击show options menu按钮</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-8e9f64f76dd666e4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/534/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-ca64b8ff27c0e2f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/350/format/webp\"></p>\n<p>去掉勾上的 Hide Empty Middle Packages  和 Show Members</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-245a095cfef4c8c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/293/format/webp\"></p>\n<p>java包的展示目录结构就改变了</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-b188356d6a454df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/538/format/webp\"></p>\n<p>对于包名目录结构不改变的。就分别改各个层次对应的包名或者直接按快捷键 Shift + F6</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-5748e03a357ac8d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/747/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-bbf9f6e3517de803.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/629/format/webp\"></p>\n<p>假如是3级目录结构包名，改成4级包名目录机构，首先要新建包然后去移动其他的目录包</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-e43fefa7fb413d3b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/692/format/webp\"></p>\n<p>新建好多一级的目录包之后，需要移动启动文件夹到该目录包下</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-33d2a624c533d767.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/635/format/webp\"></p>\n<p>接着，去改app模块下的build.gradle文件</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-c2b0a1b594ceb7a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/531/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-b50f2f39318e3a86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/651/format/webp\"></p>\n<p>然后去修改AndroidManifest.xml文件</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-f7573970e99b92ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/672/format/webp\"></p>\n<p>最后，点击sync同步一下就大功告成了<br>3、注意<br>如果项目上用了DataBinding框架，特别是第二种情况，恭喜你，你肯能有得忙了。项目上有DataBinding框架的时候，当你按照上面的步骤修改了包名，就会报一个这样的错</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-534897b4744d5df5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-feb5f5023ca50e8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\"></p>\n<p>遇到这个情况，肯定是修改包名或者移动了包名结构，但是布局文件或者java文件的的dataBinding的引用没有改变</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-9a32a6931bffa51b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/631/format/webp\"></p>\n<hr>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-849db258b30d1aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/650/format/webp\"></p>\n<p>这里我没找到特别快速修改的方法，放在我是一个个去检查java文件的导包和xml布局文件的应用，看对不对，不对就要手动改过来了，呜呜。。。。。。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-73e253453e85f5a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/538/format/webp\"></p>\n<p>如果，确定全部改完无误之后，重新Rebuild Project</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-8f5d3f454854f75c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/519/format/webp\"></p>\n<p>万一，还是有刚才那个错误的话，记得再回头检查一遍java文件和布局文件，看看各自的引用对不对，如果全部都改对之后，还是有错误的话，哪就静下心来错误提示</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/2108792-77579a031568c1a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp\"></p>\n<p>如果不是DataBinding引起的话，一般都会找到比较明显的提示</p>\n<p>==========我是有分割线的：2019.04.15更新=================================<br>如果真不好遇到第二种情况的话，面对databanding这种框架，那就只能使用全局替换的方法了<br>ctrl + Shift + R</p>\n","categories":["Android"],"tags":["Android"]},{"title":"mac 安装homebrew","url":"/2021/10/09/mac-%E5%AE%89%E8%A3%85homebrew/","content":"<p>问题：macOS安装Homebrew时总是报错（Failed to connect to raw.githubusercontent.com port 443: Connection refused）</p>\n<p>原因：由于某些你懂的因素，导致GitHub的raw.githubusercontent.com域名解析被污染了。</p>\n<p>解决办法：通过修改hosts解决此问题。<br>查询真实IP</p>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXBhZGRyZXNzLmNvbS8lRTYlOUYlQTUlRTglQUYlQTJyYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tJUU3JTlBJTg0JUU3JTlDJTlGJUU1JUFFJTlFSVAlRTMlODAlODI=\">https://www.ipaddress.com/查询raw.githubusercontent.com的真实IP。<i class=\"fa fa-external-link-alt\"></i></span><br><img data-src=\"https://imgconvert.csdnimg.cn/aHR0cDovL29zY2ltZy5vc2NoaW5hLm5ldC9vc2NuZXQvdXAtNzMwZGI4MDg5OGIzYmI5NzU2NDdlOTk1NzViZTEyZWY4N2EucG5n?x-oss-process=image/format,png\"><br>修改hosts</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;etc&#x2F;hosts</span><br></pre></td></tr></table></figure>\n<p>添加如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure>\n<p>可以使用国内源啦</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;bin&#x2F;zsh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;gitee.com&#x2F;cunkai&#x2F;HomebrewCN&#x2F;raw&#x2F;master&#x2F;Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure>","categories":["工具使用"],"tags":["工具使用"]},{"title":"mac上使用svn(subversion)","url":"/2021/10/09/mac%E4%B8%8A%E4%BD%BF%E7%94%A8svn-subversion/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83OTExNmM2ZjhmNzI=\">原文：Wanna_1314<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在Windows中，我们常用TortoiseSVN这个软件来进行搭建SVN环境，那么在macOS中，我们应当如何去搭建SVN环境呢？在以前的老版本的macOS中，macOS中Xcode已经为我们提供了SVN的服务端和客户端。但是在如今的新版本当中，已经没有SVN了，我们可以使用Homebrew进行安装SVN。</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><p>如何安装呢？我们使用Homebrew进行安装，关于Homebrew的安装，可以从参考我往期的文章，下面直接讲述安装之后的安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install subversion</span><br></pre></td></tr></table></figure>\n<p>我们使用如下的命令进行检查是否安装了这个软件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew list</span><br></pre></td></tr></table></figure>\n<p>得到如下的结果<br><img data-src=\"https://upload-images.jianshu.io/upload_images/24412352-77bcc086d7bbdce9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1170/format/webp\"><br>使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">svn help</span><br></pre></td></tr></table></figure>\n<p>命令查看svn是否可以全局访问，如图所示，则安装成功！<br><img data-src=\"https://upload-images.jianshu.io/upload_images/24412352-e47e3ebfa90a4882.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1158/format/webp\"></p>\n<h3 id=\"2-安装之后的配置\"><a href=\"#2-安装之后的配置\" class=\"headerlink\" title=\"2.安装之后的配置\"></a>2.安装之后的配置</h3><p>使用如下命令创建一个SVN的代码仓库（目录改成你想要创建的目录）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">svnadmin create &#x2F;Users&#x2F;wanna&#x2F;Desktop&#x2F;Code&#x2F;SVN</span><br></pre></td></tr></table></figure>\n<p><strong>当然我的电脑上自动给我创建了</strong><br><code>/Users/mark/.subversion</code><br>以下不多赘述，结合原文查看。</p>\n","categories":["工具使用"],"tags":["工具使用"]},{"title":"mac上已损坏，无法打开。 您应该将它移到废纸篓。解决方案","url":"/2023/04/14/mac%E4%B8%8A%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E3%80%82-%E6%82%A8%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93%E3%80%82%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","content":"<ul>\n<li>1.首先先看你电脑的安全设置<br>​<br>如果没有设置任何来源，那把小锁打开，添加一下任何来源。在尝试安装</li>\n<li>2.如果还不行，在终端粘贴复制输入命令：“sudo xattr -r -d com.apple.quarantine ”（注意最后有一个空格），先不要按回车</li>\n<li>3.打开 “访达”（Finder）进入 “应用程序” 目录，找到该软件图标，将图标拖到刚才的终端窗口里面，会得到如下组合：“sudo xattr -r -d com.apple.quarantine /Applications/Bartender\\ 3.app”，回到终端窗口按回车，输入系统密码回车即可。<br>完成</li>\n</ul>\n","categories":["工具"],"tags":["Error"]},{"title":"mac上打开安卓项目 The C compiler identification is Clang 14.0.6","url":"/2024/06/04/mac%E4%B8%8A%E6%89%93%E5%BC%80%E5%AE%89%E5%8D%93%E9%A1%B9%E7%9B%AE-The-C-compiler-identification-is-Clang-14-0-6/","content":"<p>这个错误信息通常出现在尝试在Mac上构建一个Android项目时，特别是使用CMake作为构建系统时。它表明C编译器识别为Clang版本14.0.6。</p>\n<p>解释：<br>这个信息是CMake在尝试确定编译器标识和版本时输出的。通常，这个信息是正面的，表明CMake能够找到一个合适的C编译器。</p>\n<p>解决方法：</p>\n<p>确保你的系统已经安装了Clang 14.0.6或更高版本。如果没有，你可以通过Mac的包管理器Homebrew来安装它：</p>\n<p>brew install llvm</p>\n<p>确保CMakeLists.txt文件中指定的编译器是Clang 14.0.6或兼容版本。</p>\n<p>如果你已经安装了正确版本的Clang，但是CMake仍然报告错误，可能需要指定CMake在构建时使用的C编译器路径。你可以通过CMake命令行参数来实现这一点：</p>\n<p>cmake -DCMAKE_C_COMPILER=/path/to/clang ..</p>\n<p>确保你的构建环境（例如Android NDK）与Clang 14.0.6版本兼容。</p>\n<p>如果你使用的是特定的IDE（如Android Studio），确保它配置了正确的编译器路径。</p>\n<p>如果上述步骤无法解决问题，请提供更多的错误信息和上下文，以便进一步诊断问题。</p>\n","categories":["Android"],"tags":["error"]},{"title":"mac下VMware安装Ubuntu设置允许在虚拟机与主机之间复制文字与文件","url":"/2023/04/03/mac%E4%B8%8BVMware%E5%AE%89%E8%A3%85Ubuntu%E8%AE%BE%E7%BD%AE%E5%85%81%E8%AE%B8%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8E%E4%B8%BB%E6%9C%BA%E4%B9%8B%E9%97%B4%E5%A4%8D%E5%88%B6%E6%96%87%E5%AD%97%E4%B8%8E%E6%96%87%E4%BB%B6/","content":"<h3 id=\"1、在终端执行如下三行命令\"><a href=\"#1、在终端执行如下三行命令\" class=\"headerlink\" title=\"1、在终端执行如下三行命令\"></a>1、在终端执行如下三行命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get autoremove open-vm-tools</span><br><span class=\"line\">sudo apt-get install open-vm-tools</span><br><span class=\"line\">sudo apt-get install open-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、重启-Ubuntu。\"><a href=\"#2、重启-Ubuntu。\" class=\"headerlink\" title=\"2、重启 Ubuntu。\"></a>2、重启 Ubuntu。</h3>","categories":["Linux"],"tags":["工具，虚拟机"]},{"title":"macbook上安装nginx和配置步骤","url":"/2023/07/27/macbook%E4%B8%8A%E5%AE%89%E8%A3%85nginx%E5%92%8C%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4/","content":"<h2 id=\"Nginx-笔记\"><a href=\"#Nginx-笔记\" class=\"headerlink\" title=\"Nginx 笔记\"></a>Nginx 笔记</h2><h3 id=\"1-安装-Homebrew\"><a href=\"#1-安装-Homebrew\" class=\"headerlink\" title=\"1. 安装 Homebrew\"></a>1. 安装 Homebrew</h3><p>在 Mac 上使用以下命令安装 Homebrew：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">/bin/bash -c <span class=\"string\">&quot;<span class=\"subst\">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"2-安装-Nginx\"><a href=\"#2-安装-Nginx\" class=\"headerlink\" title=\"2. 安装 Nginx\"></a>2. 安装 Nginx</h3><p>在终端中运行以下命令来使用 Homebrew 安装 Nginx：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">brew install nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-查找-Nginx-配置文件路径\"><a href=\"#3-查找-Nginx-配置文件路径\" class=\"headerlink\" title=\"3. 查找 Nginx 配置文件路径\"></a>3. 查找 Nginx 配置文件路径</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo find / -name <span class=\"string\">&quot;nginx.conf&quot;</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure>\n\n<p>根据您的输出显示，Nginx 配置文件位于 <code>/opt/homebrew/etc/nginx/nginx.conf</code>。</p>\n<h3 id=\"4-查看-Nginx-配置文件\"><a href=\"#4-查看-Nginx-配置文件\" class=\"headerlink\" title=\"4. 查看 Nginx 配置文件\"></a>4. 查看 Nginx 配置文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo cat /opt/homebrew/etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<p>使用上述命令可以查看 Nginx 配置文件的内容，您可以在此文件中进行配置更改。</p>\n<h3 id=\"5-启动、停止和查看-Nginx-状态\"><a href=\"#5-启动、停止和查看-Nginx-状态\" class=\"headerlink\" title=\"5. 启动、停止和查看 Nginx 状态\"></a>5. 启动、停止和查看 Nginx 状态</h3><p>启动 Nginx 服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx</span><br></pre></td></tr></table></figure>\n\n<p>停止 Nginx 服务器：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx -s stop</span><br></pre></td></tr></table></figure>\n\n<p>查看 Nginx 配置是否正确：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx -t</span><br></pre></td></tr></table></figure>\n\n<p>查看 Nginx 运行状态：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx -s status</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-自动启动-Nginx\"><a href=\"#6-自动启动-Nginx\" class=\"headerlink\" title=\"6. 自动启动 Nginx\"></a>6. 自动启动 Nginx</h3><p>如果希望 Nginx 在系统启动时自动运行，可以使用以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo brew services start nginx</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-高级配置\"><a href=\"#7-高级配置\" class=\"headerlink\" title=\"7. 高级配置\"></a>7. 高级配置</h3><p>Nginx 具有丰富的功能和选项，您可以根据需求进行高级配置。配置文件路径：<code>/opt/homebrew/etc/nginx/nginx.conf</code></p>\n<p>以上是更新后的 Nginx 笔记，现在已经包含了 Homebrew 的安装记录。如果您有其他问题或需要进一步协助，请随时向我询问。</p>\n<h3 id=\"8、html静态文件放在哪儿\"><a href=\"#8、html静态文件放在哪儿\" class=\"headerlink\" title=\"8、html静态文件放在哪儿\"></a>8、html静态文件放在哪儿</h3><p>在使用 Homebrew 安装 Nginx 的情况下，Nginx 的默认根目录路径是 <code>/opt/homebrew/var/www</code> 而不是 <code>/usr/local/var/www</code>。因此，将 HTML 静态文件放置在正确的 Nginx 根目录下的步骤如下：</p>\n<ol>\n<li>将您的 HTML 静态文件复制到 Nginx 根目录：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /path/to/your/html/files/* /opt/homebrew/var/www/</span><br></pre></td></tr></table></figure>\n\n<p>请将 <code>/path/to/your/html/files/</code> 替换为您实际存放 HTML 静态文件的路径。</p>\n<ol start=\"2\">\n<li>在 <code>/opt/homebrew/etc/nginx/nginx.conf</code> 配置</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    root   /opt/homebrew/var/www/sky;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">````</span><br><span class=\"line\">* `/opt/homebrew/var/www/` 静态文件配置路径</span><br><span class=\"line\">* `sky`是我的项目</span><br><span class=\"line\"></span><br><span class=\"line\">3. 确认文件已成功复制到 Nginx 根目录：</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">ls /opt/homebrew/var/www/</span><br></pre></td></tr></table></figure>\n\n<p>您应该能够看到您复制过来的 HTML 文件列表。</p>\n<ol start=\"4\">\n<li>启动或重新加载 Nginx 以使更改生效：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx -s stop  <span class=\"comment\"># 先停止 Nginx（如果已经运行）</span></span><br><span class=\"line\">sudo nginx         <span class=\"comment\"># 再启动 Nginx</span></span><br></pre></td></tr></table></figure>\n\n<p>或者，您可以直接使用以下命令来重新加载 Nginx 配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>现在，您的 HTML 静态文件应该位于正确的 Nginx 根目录，可以通过 Nginx 服务器访问了。通过在浏览器中输入 <code>http://localhost</code>，您应该能够看到您的静态文件在浏览器中显示。</p>\n<p>请注意，如果您在 Nginx 配置中进行了自定义根目录设置，则根目录可能不是默认的 <code>/opt/homebrew/var/www</code>，而是您在配置中指定的目录。如果存在自定义根目录，请将 HTML 静态文件放置在自定义根目录下。</p>\n","categories":["服务器"],"tags":["Nginx"]},{"title":"Mark的架构学习笔记— Android_MVP(二)","url":"/2019/01/25/Mark%E7%9A%84%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94-Android-MVP-%E4%BA%8C/","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>之前我写的一个笔记，没有结合网络请求，现在我想记录下我这次结合网络请求Retrofit的MVP编程。<br>我上一篇的笔记：<a href=\"https://markchyl.github.io/2018/12/17/Mark%E7%9A%84%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-Android-MVP/\">马克的架构学习笔记— Android_MVP</a>,代码笔记中有链接。</p>\n<p>根据慕课网上的学习的代码链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtUZWxsTnVtSW5mb19tdnA=\">根据手机号查询号码信息<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>这篇笔记我不贴代码，制作个笔记记录，项目代码不能外泄。</p>\n<span id=\"more\"></span>\n<h3 id=\"老话重提，啥事MVP模式？\"><a href=\"#老话重提，啥事MVP模式？\" class=\"headerlink\" title=\"老话重提，啥事MVP模式？\"></a>老话重提，啥事MVP模式？</h3><p>这个问题是真的很重要，MVP就是一个编程思想，让代码具有层次感，逻辑鲜明。</p>\n<p>在MVP里，Presenter完全把Model和View进行了分离，主要的程序逻辑在Presenter里实现。而且，Presenter与具体的View是没有直接关联的，而是通过定义好的接口进行交互，从而使得在变更View时候可以保持Presenter的不变，即重用！ 不仅如此，我们还可以编写测试用的View，模拟用户的各种操作，从而实现对Presenter的测试–而不需要使用自动化的测试工具。</p>\n<ul>\n<li><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li><p>模型与视图完全分离，我们可以修改视图而不影响模型</p>\n</li>\n<li><p>可以更高效地使用模型，因为所有的交互都发生在一个地方——Presenter内部</p>\n</li>\n<li><p>我们可以将一个Presenter用于多个视图，而不需要改变Presenter的逻辑。这个特性非常的有用，因为视图的变化总是比模型的变化频繁。</p>\n</li>\n<li><p>如果我们把逻辑放在Presenter中，那么我们就可以脱离用户接口来测试这些逻辑（单元测试）</p>\n</li>\n<li><p>(1)降低耦合度</p>\n<p>(2)模块职责划分明显</p>\n<p>(3)利于测试驱动开发</p>\n<p>(4)代码复用</p>\n<p>(5)隐藏数据</p>\n<p>(6)代码灵活性</p>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3>由于对视图的渲染放在了Presenter中,所以视图和Presenter的交互会过于频繁。还有一点需要明白,如果Presenter过多地渲染了视图,往往会使得它与特定的视图的联系过于紧密。一旦视图需要变更,那么Presenter也需要变更了</li>\n</ul>\n<h3 id=\"大白话\"><a href=\"#大白话\" class=\"headerlink\" title=\"大白话\"></a>大白话</h3><ul>\n<li>View层就是用于自己显示的，你需要什么样的显示接口，就可以在View层中定义。</li>\n<li>Presenter层就是协调View和Model层的，可以将网络请求和接 main 显示的方法调用放在P层，然后调用model层的方法，我这一般就是保存数据和获取数据。</li>\n<li>model其实就是数据管理类</li>\n</ul>\n<p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEB3a6a0577e5958e93f8a25e14eade5b77?method=download&shareKey=f7d60e8b528af13a443d9b56d1d4a6ab\" alt=\"image\"></p>\n","categories":["Android"],"tags":["Android","架构"]},{"title":"implementation、api、compileOnly区别","url":"/2022/09/16/implementation%E3%80%81api%E3%80%81compileOnly%E5%8C%BA%E5%88%AB/","content":"<h3 id=\"2-x和3-x版本依赖方式比较\"><a href=\"#2-x和3-x版本依赖方式比较\" class=\"headerlink\" title=\"2.x和3.x版本依赖方式比较\"></a>2.x和3.x版本依赖方式比较</h3><table>\n<thead>\n<tr>\n<th>2.x</th>\n<th>3.x</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>compile</td>\n<td>implementation、api</td>\n</tr>\n<tr>\n<td>provided</td>\n<td>compile only</td>\n</tr>\n<tr>\n<td>apk</td>\n<td>runtime only</td>\n</tr>\n<tr>\n<td>api</td>\n<td>api</td>\n</tr>\n</tbody></table>\n<h3 id=\"替代关系：\"><a href=\"#替代关系：\" class=\"headerlink\" title=\"替代关系：\"></a>替代关系：</h3><ul>\n<li>compile依赖关系已被弃⽤，被implementation和api替代;</li>\n<li>provided被compile only替代;</li>\n<li>apk被runtime only替代;</li>\n<li>api：跟2.x版本的 compile完全相同。</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"implementation和api区别：\"><a href=\"#implementation和api区别：\" class=\"headerlink\" title=\"implementation和api区别：\"></a>implementation和api区别：</h3><blockquote>\n<p>implementation：只能在内部使⽤此模块，⽐如我在⼀个libiary中使⽤implementation依赖了gson库，然后我的主项⽬依赖了libiary，那么，我的主项⽬就⽆法访问gson库中的⽅法。这样的好处是编译速度会加快，推荐使⽤implementation的⽅式去依赖，如果你需要提供给外部访问，那么就使⽤api依赖即可</p>\n</blockquote>\n<h3 id=\"provided（compileOnly）作⽤：\"><a href=\"#provided（compileOnly）作⽤：\" class=\"headerlink\" title=\"provided（compileOnly）作⽤：\"></a>provided（compileOnly）作⽤：</h3><blockquote>\n<p>只在编译时有效，不会参与打包可以在⾃⼰的moudle中使⽤该⽅式依赖⼀些⽐如com.android.support，gson这些使⽤者常⽤的库，避免冲突。</p>\n</blockquote>\n<h3 id=\"apk（runtimeOnly）作⽤：\"><a href=\"#apk（runtimeOnly）作⽤：\" class=\"headerlink\" title=\"apk（runtimeOnly）作⽤：\"></a>apk（runtimeOnly）作⽤：</h3><blockquote>\n<p>只在⽣成apk的时候参与打包，编译时不会参与，很少⽤。</p>\n</blockquote>\n<h3 id=\"testCompile（testImplementation）作⽤：\"><a href=\"#testCompile（testImplementation）作⽤：\" class=\"headerlink\" title=\"testCompile（testImplementation）作⽤：\"></a>testCompile（testImplementation）作⽤：</h3><blockquote>\n<p>testCompile 只在单元测试代码的编译以及最终打包测试apk时有效。</p>\n</blockquote>\n<h3 id=\"debugCompile（debugImplementation）作⽤：\"><a href=\"#debugCompile（debugImplementation）作⽤：\" class=\"headerlink\" title=\"debugCompile（debugImplementation）作⽤：\"></a>debugCompile（debugImplementation）作⽤：</h3><blockquote>\n<p>debugCompile 只在debug模式的编译和最终的debug apk打包时有效</p>\n</blockquote>\n<h3 id=\"releaseCompile（releaseImplementation）作⽤：\"><a href=\"#releaseCompile（releaseImplementation）作⽤：\" class=\"headerlink\" title=\"releaseCompile（releaseImplementation）作⽤：\"></a>releaseCompile（releaseImplementation）作⽤：</h3><blockquote>\n<p>Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。</p>\n</blockquote>\n","categories":["Android"],"tags":["Android"]},{"title":"mac下安装rz sz","url":"/2021/09/17/mac%E4%B8%8B%E5%AE%89%E8%A3%85rz-sz/","content":"<p>我们在linux上部署代码的时候经常需要上传文件到linux，有时候也需要从linux上下载文件到本地，大部分人都直接借助于ftp工具，<br>然而其实我们可以直接通过rz和sz上传下载文件，但是rz和sz命令不是linux默认自带的命令，需要我们自己安装，那么如何安装呢</p>\n<h3 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h3><ul>\n<li>下载lrzsz安装包<br><code>wget http://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz </code></li>\n<li>解压并切换到lrzsz-0.12.20目录下面<br><code>tar zxvf lrzsz-0.12.20.tar.gz &amp;&amp; cd lrzsz-0.12.20</code></li>\n<li>编译<br>切换到文件解压目录下，在终端中执行如下命令编译<br><code>./configure &amp;&amp; make &amp;&amp; make install</code></li>\n<li>上面安装过程默认把lsz和lrz安装到了/usr/local/bin/目录下，现在我们并不能直接使用，下面创建软链接，并命名为rz/sz：  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &#x2F;usr&#x2F;bin</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;lrz rz</span><br><span class=\"line\">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;lsz sz</span><br></pre></td></tr></table></figure>\n<h3 id=\"yum命令安装\"><a href=\"#yum命令安装\" class=\"headerlink\" title=\"yum命令安装\"></a>yum命令安装</h3>  yum -y install lrzsz</li>\n</ul>\n<h3 id=\"使用：\"><a href=\"#使用：\" class=\"headerlink\" title=\"使用：\"></a>使用：</h3><pre><code>sz -y 下载\nrz -y 上传</code></pre>\n","categories":["Linux"],"tags":["工具"]},{"title":"ubuntu中安装的GoLAnd如何配置开发环境","url":"/2023/06/29/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85%E7%9A%84GoLAnd%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","content":"<p>安装 GoLand IDE 并配置开发环境的步骤如下：</p>\n<ol>\n<li><p>下载和安装 GoLand：前往 JetBrains 官方网站（<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS9nby8lRUYlQkMlODklRTQlQjglOEIlRTglQkQlQkQlRTklODAlODIlRTclOTQlQTglRTQlQkElOEU=\">https://www.jetbrains.com/go/）下载适用于<i class=\"fa fa-external-link-alt\"></i></span> Linux 的 GoLand 安装包。解压下载的安装包，并进入解压后的目录。</p>\n</li>\n<li><p>启动 GoLand：在终端中进入 GoLand 安装目录的 <code>bin</code> 子目录，并运行以下命令启动 GoLand：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">.&#x2F;goland.sh</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li><p>配置 Go SDK：在首次启动 GoLand 时，它将提示您配置 Go SDK。选择 “Configure”，然后点击 “Add SDK” 按钮。</p>\n<p>如果您尚未安装 Go SDK，可以选择 “Download” 选项自动下载并安装 Go SDK。或者，如果您已经手动安装了 Go SDK，请选择 “Custom” 选项并指定 Go SDK 的安装路径。</p>\n</li>\n<li><p>创建或导入项目：在 GoLand 中，您可以创建新的 Go 项目或导入现有的 Go 项目。根据您的需求选择适当的选项。</p>\n</li>\n<li><p>配置 GOPATH 和环境变量：在 GoLand 中打开 “Settings”（菜单栏中的 “File” -&gt; “Settings”）。</p>\n<p>在 “Settings” 对话框中，选择 “Go” -&gt; “Go Libraries”。点击右上角的 “+” 按钮，添加您的项目目录作为 Go 项目的根目录。</p>\n<p>接下来，选择 “Go” -&gt; “Go Modules”，确保启用了 Go Modules 支持。如果您的项目使用 Go Modules，则可以手动初始化和下载依赖项。</p>\n</li>\n<li><p>运行和调试代码：在 GoLand 中，您可以使用内置的运行和调试工具来运行和调试您的 Go 代码。您可以使用菜单栏中的 “Run” 和 “Debug” 选项，或使用相应的快捷键来执行这些操作。</p>\n</li>\n</ol>\n<p>这样，您就成功配置了 GoLand 的开发环境。您可以开始编写、运行和调试 Go 代码了。请注意，GoLand 是一款商业软件，您可能需要购买许可证才能使用其完整功能。您可以在 JetBrains 的网站上获取有关购买许可证的详细信息。</p>\n","categories":["Linux"],"tags":["环境配置"]},{"title":"python的爬虫学习实战笔记一","url":"/2018/12/17/python%E7%9A%84%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0%E4%B8%80/","content":"<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><h4 id=\"Python3的爬虫基础学习，编写URL管理器、网页下载器、网页分析器、数据输出器、如何连接到MySQL。网上能搜到许多的库，在这我只是开始我的基础学起，瞎猫死猫能运行就可以。\"><a href=\"#Python3的爬虫基础学习，编写URL管理器、网页下载器、网页分析器、数据输出器、如何连接到MySQL。网上能搜到许多的库，在这我只是开始我的基础学起，瞎猫死猫能运行就可以。\" class=\"headerlink\" title=\"Python3的爬虫基础学习，编写URL管理器、网页下载器、网页分析器、数据输出器、如何连接到MySQL。网上能搜到许多的库，在这我只是开始我的基础学起，瞎猫死猫能运行就可以。\"></a>Python3的爬虫基础学习，编写URL管理器、网页下载器、网页分析器、数据输出器、如何连接到MySQL。网上能搜到许多的库，在这我只是开始我的基础学起，瞎猫死猫能运行就可以。</h4><hr>\n<span id=\"more\"></span>\n<h4 id=\"编写的环境：\"><a href=\"#编写的环境：\" class=\"headerlink\" title=\"编写的环境：\"></a>编写的环境：</h4><p>Mac电脑、MySQL数据库、pymysql库、urllib库、bs4库、Python3、PyCharm编辑器</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydW5vb2IuY29tL3B5dGhvbjMvcHl0aG9uMy1kaWN0aW9uYXJ5Lmh0bWw=\">学习网址<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a>定义：</h3><p>网络爬虫（Web Spider），又被称为网页蜘蛛，是一种按照一定的规则，自动地抓取网站信息的程序或者脚本。</p>\n<h3 id=\"简介：\"><a href=\"#简介：\" class=\"headerlink\" title=\"简介：\"></a>简介：</h3><p>网络蜘蛛是一个很形象的名字。如果把互联网比喻成一个蜘蛛网，那么Spider就是在网上爬来爬去的蜘蛛。网络蜘蛛是通过网页的链接地址来寻找网页，从 网站某一个页面开始，读取网页的内容，找到在网页中的其它链接地址，然后通过这些链接地址寻找下一个网页，这样一直循环下去，直到把这个网站所有的网页都抓取完为止</p>\n<h3 id=\"爬虫流程：\"><a href=\"#爬虫流程：\" class=\"headerlink\" title=\"爬虫流程：\"></a>爬虫流程：</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">①先由urllib的request打开Url得到网页html文档</span><br><span class=\"line\">——②浏览器打开网页源代码分析元素节点</span><br><span class=\"line\">——③通过BeautifulSoup或则正则表达式提取想要的数据</span><br><span class=\"line\">——④存储数据到本地磁盘或数据库（抓取，分析，存储）</span><br></pre></td></tr></table></figure>\n<h2 id=\"上代码\"><a href=\"#上代码\" class=\"headerlink\" title=\"上代码\"></a>上代码</h2><p>爬虫程序入口：Spider_Main<br>爬虫目标URL：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5oYm9va2VyLmNvbS9ib29rLzEwMDA3MTg4\">http://www.hbooker.com/book/10007188<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">from hbooker_spider import html_downloader</span><br><span class=\"line\">from hbooker_spider import html_outputer</span><br><span class=\"line\">from hbooker_spider import html_parser</span><br><span class=\"line\">from hbooker_spider import url_manager</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class SpiderMain(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        # 初始化 URL 管理器</span><br><span class=\"line\">        self.urls &#x3D; url_manager.UrlManager()</span><br><span class=\"line\">        # 初始化 html 下载器</span><br><span class=\"line\">        self.downloader &#x3D; html_downloader.HtmlDownLoader()</span><br><span class=\"line\">        # 初始化 html 解析器</span><br><span class=\"line\">        self.parser &#x3D; html_parser.HtmlParser()</span><br><span class=\"line\">        # 初始化 数据 输出管理器</span><br><span class=\"line\">        self.outputer &#x3D; html_outputer.HtmlOutputer()</span><br><span class=\"line\"></span><br><span class=\"line\">    def craw(self, root_url):</span><br><span class=\"line\">        count &#x3D; 1</span><br><span class=\"line\">        self.urls.add_new_url(root_url)</span><br><span class=\"line\">        while self.urls.has_new_url():</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                new_url &#x3D; self.urls.get_new_url()</span><br><span class=\"line\">                html_cont &#x3D; self.downloader.downloader(new_url)</span><br><span class=\"line\">                new_urls, new_datas &#x3D; self.parser.parse(new_url, html_cont)</span><br><span class=\"line\">                self.urls.add_new_urls(new_urls)</span><br><span class=\"line\">                print(&#39;craw %d : %s&#39; % (count, new_datas))</span><br><span class=\"line\">                self.outputer.collect_data(new_datas)</span><br><span class=\"line\"></span><br><span class=\"line\">                if count &#x3D;&#x3D; 100:</span><br><span class=\"line\">                    break</span><br><span class=\"line\">                count +&#x3D; 1</span><br><span class=\"line\">            except:</span><br><span class=\"line\">                print(&#39;craw failed&#39;)</span><br><span class=\"line\">        self.outputer.output_html()</span><br><span class=\"line\">        self.outputer.output_mysql()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class=\"line\">    root_url &#x3D; &#39;http:&#x2F;&#x2F;www.hbooker.com&#x2F;book&#x2F;100071888&#39;</span><br><span class=\"line\">    obj_spider &#x3D; SpiderMain()</span><br><span class=\"line\">    obj_spider.craw(root_url)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网页下载器-html-downloader\"><a href=\"#网页下载器-html-downloader\" class=\"headerlink\" title=\"网页下载器 html_downloader\"></a>网页下载器 html_downloader</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># URL下载器</span><br><span class=\"line\">from urllib import request</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HtmlDownLoader(object):</span><br><span class=\"line\">    def downloader(self, new_url):</span><br><span class=\"line\">        if new_url is None:</span><br><span class=\"line\">            return</span><br><span class=\"line\"></span><br><span class=\"line\">        response &#x3D; request.urlopen(new_url)</span><br><span class=\"line\">        if response.getcode() !&#x3D; 200:</span><br><span class=\"line\">            return None</span><br><span class=\"line\">        return response.read()</span><br></pre></td></tr></table></figure>\n<h3 id=\"网页解析器-html-parser\"><a href=\"#网页解析器-html-parser\" class=\"headerlink\" title=\"网页解析器 html_parser\"></a>网页解析器 html_parser</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># html 解析器</span><br><span class=\"line\">import re</span><br><span class=\"line\">from bs4 import BeautifulSoup</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HtmlParser(object):</span><br><span class=\"line\">    def _get_new_datas(self, url, soup):</span><br><span class=\"line\">        res_data &#x3D; &#123;&#125;</span><br><span class=\"line\">        res_data[&#39;url&#39;] &#x3D; url</span><br><span class=\"line\">        # &lt;div class&#x3D;&quot;book-title&quot;&gt;&lt;h1&gt;假紫剑圣与B套奶妈&lt;&#x2F;h1&gt;</span><br><span class=\"line\">        title_nodes &#x3D; soup.find(&#39;div&#39;, class_&#x3D;&#39;book-title&#39;).find(&#39;h1&#39;)</span><br><span class=\"line\">        res_data[&#39;title&#39;] &#x3D; title_nodes.get_text()</span><br><span class=\"line\">        return res_data</span><br><span class=\"line\"></span><br><span class=\"line\">    def _get_new_urls(self, url, soup):</span><br><span class=\"line\">        new_urls &#x3D; set()</span><br><span class=\"line\">        # &lt;a class&#x3D;&quot;img&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.hbooker.com&#x2F;book&#x2F;100075809&quot; target&#x3D;&quot;_blank&quot;&gt;</span><br><span class=\"line\">        links &#x3D; soup.find_all(&#39;a&#39;, class_&#x3D;&#39;img&#39;)</span><br><span class=\"line\">        for link in links:</span><br><span class=\"line\">            new_d_url &#x3D; link[&#39;href&#39;]</span><br><span class=\"line\">            new_urls.add(new_d_url)</span><br><span class=\"line\">        return new_urls</span><br><span class=\"line\"></span><br><span class=\"line\">    def parse(self, url, html_cont):</span><br><span class=\"line\">        if url is None or html_cont is None:</span><br><span class=\"line\">            return</span><br><span class=\"line\"></span><br><span class=\"line\">        soup &#x3D; BeautifulSoup(html_cont, &#39;html.parser&#39;, from_encoding&#x3D;&#39;utf-8&#39;)</span><br><span class=\"line\">        new_urls &#x3D; self._get_new_urls(url, soup)</span><br><span class=\"line\">        new_html_cont &#x3D; self._get_new_datas(url, soup)</span><br><span class=\"line\">        return new_urls, new_html_cont</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输出起-html-outputer\"><a href=\"#输出起-html-outputer\" class=\"headerlink\" title=\"输出起 html_outputer\"></a>输出起 html_outputer</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 数据输出</span><br><span class=\"line\">import pymysql</span><br><span class=\"line\"></span><br><span class=\"line\">#格式化字符串把字典</span><br><span class=\"line\">def dic2sql(sql, data):</span><br><span class=\"line\">    sql2 &#x3D; sql % (str(data[&#39;url&#39;]), str(data[&#39;title&#39;]))</span><br><span class=\"line\">    return sql2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class HtmlOutputer(object):</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        self.datas &#x3D; []</span><br><span class=\"line\"></span><br><span class=\"line\">    def collect_data(self, new_datas):</span><br><span class=\"line\">        if new_datas is None:</span><br><span class=\"line\">            return</span><br><span class=\"line\">        self.datas.append(new_datas)</span><br><span class=\"line\"></span><br><span class=\"line\">    def output_html(self):</span><br><span class=\"line\">        fout &#x3D; open(&#39;output.html&#39;, &#39;w&#39;)</span><br><span class=\"line\">        fout.write(&#39;&lt;html&gt;&#39;)</span><br><span class=\"line\">        fout.write(&#39;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;&#39;)</span><br><span class=\"line\">        fout.write(&#39;&lt;body&gt;&#39;)</span><br><span class=\"line\">        fout.write(&#39;&lt;table&gt;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">        for data in self.datas:</span><br><span class=\"line\">            fout.write(&#39;&lt;tr&gt;&#39;)</span><br><span class=\"line\">            fout.write(&#39;&lt;td&gt;%s&lt;&#x2F;td&gt;&#39; % data[&#39;url&#39;])</span><br><span class=\"line\">            fout.write(&#39;&lt;td&gt;%s&lt;&#x2F;td&gt;&#39; % data[&#39;title&#39;])</span><br><span class=\"line\">            fout.write(&#39;&lt;&#x2F;tr&gt;&#39;)</span><br><span class=\"line\"></span><br><span class=\"line\">        fout.write(&#39;&lt;&#x2F;table&gt;&#39;)</span><br><span class=\"line\">        fout.write(&#39;&lt;&#x2F;body&gt;&#39;)</span><br><span class=\"line\">        fout.write(&#39;&lt;&#x2F;html&gt;&#39;)</span><br><span class=\"line\">        fout.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    def output_mysql(self):</span><br><span class=\"line\"></span><br><span class=\"line\">        # 打开数据库连接</span><br><span class=\"line\">        db &#x3D; pymysql.connect(&quot;localhost&quot;, &quot;root&quot;, &quot;MarkCHYL&quot;, &quot;TESTDB&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 使用 cursor() 方法创建一个游标对象 cursor</span><br><span class=\"line\">        cursor &#x3D; db.cursor()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 使用 execute() 方法执行 SQL，如果表存在则删除</span><br><span class=\"line\">        cursor.execute(&quot;DROP TABLE IF EXISTS HBOOKER&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">        # # 使用预处理语句创建表</span><br><span class=\"line\">        sql &#x3D; &quot;&quot;&quot;CREATE TABLE HBOOKER (</span><br><span class=\"line\">         TITLE  VARCHAR (200) NOT NULL,</span><br><span class=\"line\">         URL  VARCHAR (200))&quot;&quot;&quot;</span><br><span class=\"line\">        print(sql)</span><br><span class=\"line\"></span><br><span class=\"line\">        cursor.execute(sql)</span><br><span class=\"line\">        #</span><br><span class=\"line\">        for data in self.datas:</span><br><span class=\"line\">            # SQL 插入语句</span><br><span class=\"line\">            # sql &#x3D; &quot;INSERT INTO HBOOKER(TITLE, URL) VALUES (\\&#39;&quot; + str(data[&#39;title&#39;]) + &quot;&#39;,&#39;&quot; + str(data[&#39;url&#39;]) + &quot;&#39;)&quot;</span><br><span class=\"line\">            sql &#x3D; &quot;INSERT INTO HBOOKER(URL,TITLE) VALUES (&#39;%s&#39;,&#39;%s&#39;)&quot;</span><br><span class=\"line\">            sql1 &#x3D; dic2sql(sql, data)</span><br><span class=\"line\">            print(sql1)</span><br><span class=\"line\">            try:</span><br><span class=\"line\">                # 执行sql语句</span><br><span class=\"line\">                cursor.execute(sql1)</span><br><span class=\"line\">                # 提交到数据库执行</span><br><span class=\"line\">                db.commit()</span><br><span class=\"line\">            except:</span><br><span class=\"line\">                # 如果发生错误则回滚</span><br><span class=\"line\">                db.rollback()</span><br><span class=\"line\"></span><br><span class=\"line\">        # 关闭数据库连接</span><br><span class=\"line\">        db.close()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>后记：代码可能比较多  我只是为了更好的了解整个爬虫的过程</p>\n","categories":["Python"],"tags":["Python","爬虫"]},{"title":"ping端口是否开放(macos)","url":"/2019/10/30/ping%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E5%BC%80%E6%94%BE-macos/","content":"<p><em>简单的实用积累</em></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dvb2R3aW5kZm9yd2FyZC9hcnRpY2xlL2RldGFpbHMvODk2NDE2MzY=\">原文转自<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"mac中：\"><a href=\"#mac中：\" class=\"headerlink\" title=\"mac中：\"></a>mac中：</h3><p>打开终端：</p>\n<ul>\n<li><p>输入 ping 域名：ping <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20v\">www.baidu.com<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><img data-src=\"https://img2018.cnblogs.com/blog/1368523/201904/1368523-20190425193812807-428916356.png\"></p>\n</li>\n<li><p>ping端口：nc -vz -w 2 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20v\">www.baidu.com<i class=\"fa fa-external-link-alt\"></i></span> 8080</p>\n<p><img data-src=\"https://img2018.cnblogs.com/blog/1368523/201904/1368523-20190425193241938-258296742.png\"></p>\n</li>\n</ul>\n","categories":["网络编程"],"tags":["网络编程"]},{"title":"ubuntu中安装mysql","url":"/2023/09/08/ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85mysql/","content":"<p>要在Ubuntu中安装MySQL，可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>打开终端：你可以按下<code>Ctrl+Alt+T</code>组合键来打开终端。</p>\n</li>\n<li><p>更新包列表：首先，运行以下命令来确保你的系统上的包列表是最新的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li><p>安装MySQL服务器：运行以下命令来安装MySQL服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>\n\n<p>在安装过程中，系统会要求你设置MySQL root用户的密码。请务必选择一个强密码，并确保记住它。</p>\n</li>\n<li><p>启动MySQL服务：安装完成后，MySQL服务将会自动启动。你可以使用以下命令来检查MySQL服务状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl status mysql</span><br></pre></td></tr></table></figure>\n\n<p>如果MySQL没有自动启动，你可以使用以下命令手动启动它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl start mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置MySQL安全性：运行以下命令来配置MySQL的基本安全性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n\n<p>在这个过程中，你可以选择进行一些基本的安全设置，如删除匿名用户、禁止远程root登录等。按照提示进行操作即可。</p>\n</li>\n<li><p>连接到MySQL：安装完成后，你可以使用以下命令来连接到MySQL服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n\n<p>然后输入你之前设置的MySQL root密码。</p>\n</li>\n</ol>\n<p>现在，你已经成功在Ubuntu上安装了MySQL数据库服务器。你可以使用命令行工具或图形界面工具（如phpMyAdmin）来管理MySQL数据库。如果需要更多详细信息或有其他问题，请随时提问。</p>\n<h3 id=\"安装过程中没有要求我设置账号密码，我现在需要重新安装\"><a href=\"#安装过程中没有要求我设置账号密码，我现在需要重新安装\" class=\"headerlink\" title=\"安装过程中没有要求我设置账号密码，我现在需要重新安装\"></a>安装过程中没有要求我设置账号密码，我现在需要重新安装</h3><p>如果在安装MySQL过程中没有要求你设置账号密码，你可以尝试重新安装MySQL并确保按照以下步骤操作：</p>\n<ol>\n<li><p>首先，确保你的系统处于最新状态，以获取最新的软件包信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后，安装MySQL服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装过程中，你应该会看到一个对话框，要求你设置MySQL root用户的密码。如果你没有看到这个对话框，可以尝试卸载MySQL并重新安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt remove --purge mysql-server mysql-client mysql-common</span><br><span class=\"line\">sudo apt autoremove</span><br><span class=\"line\">sudo apt autoclean</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成卸载后，再次安装MySQL服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install mysql-server</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在重新安装MySQL时，确保注意看控制台上的任何提示，以设置MySQL root 用户的密码。遵循提示进行操作。</p>\n</li>\n<li><p>安装完成后，你可以使用以下命令来检查MySQL服务状态：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl status mysql</span><br></pre></td></tr></table></figure>\n<h3 id=\"sudo-apt-install-mysql-server执行后没有提示设置密码。默认密码是啥\"><a href=\"#sudo-apt-install-mysql-server执行后没有提示设置密码。默认密码是啥\" class=\"headerlink\" title=\"sudo apt install mysql-server执行后没有提示设置密码。默认密码是啥\"></a>sudo apt install mysql-server执行后没有提示设置密码。默认密码是啥</h3></li>\n</ol>\n<p>如果在安装MySQL时没有提示设置密码，并且没有默认密码，那么可能是因为MySQL版本或配置文件的不同。在某些MySQL安装中，默认情况下可能没有设置root密码。</p>\n<p>尝试使用以下步骤来设置root密码：</p>\n<ol>\n<li><p>通过以下方式登录到MySQL服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在MySQL中，使用以下命令来更改root用户的密码（将<code>your_new_password</code>替换为你希望设置的新密码）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;your_new_password&#39;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>刷新MySQL权限：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>退出MySQL：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXIT;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>现在，你应该已经成功设置了MySQL root 用户的密码。你可以使用新密码来登录MySQL。</p>\n<h3 id=\"ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements\"><a href=\"#ERROR-1819-HY000-Your-password-does-not-satisfy-the-current-policy-requirements\" class=\"headerlink\" title=\"ERROR 1819 (HY000): Your password does not satisfy the current policy requirements\"></a>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</h3><p>这个错误是因为MySQL的密码策略要求密码必须符合一定的安全性要求。默认情况下，MySQL要求密码满足以下条件：</p>\n<ol>\n<li>至少包含8个字符。</li>\n<li>包含大写字母。</li>\n<li>包含小写字母。</li>\n<li>包含数字。</li>\n<li>包含特殊字符（例如：!、@、#、$等）。</li>\n</ol>\n<p>如果你的密码不符合这些要求，你可以尝试以下方法来解决这个问题：</p>\n<ol>\n<li><p><strong>使用更强密码</strong>：尝试创建一个更复杂的密码，满足上述要求。</p>\n</li>\n<li><p><strong>修改密码策略</strong>：如果你不想使用这些复杂的密码策略，可以修改MySQL的密码策略。但要注意，这可能会降低数据库的安全性。要修改密码策略，可以按照以下步骤：</p>\n<ul>\n<li><p>编辑MySQL配置文件（通常是<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo nano &#x2F;etc&#x2F;mysql&#x2F;mysql.conf.d&#x2F;mysqld.cnf</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在配置文件中找到或添加以下行来禁用密码策略：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">skip-policy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存文件并退出编辑器。</p>\n</li>\n<li><p>重新启动MySQL服务：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart mysql</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p><strong>使用密码生成工具</strong>：你还可以使用密码生成工具来创建一个符合要求的密码，然后将其用作MySQL的密码。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">openssl rand -base64 12</span><br></pre></td></tr></table></figure>\n\n<p>这将生成一个12个字符长的随机密码。</p>\n</li>\n</ol>\n<p>无论你选择哪种方法，都需要确保你的MySQL密码足够安全，以保护数据库的安全性。如果你对密码策略和安全性有疑问，最好咨询数据库管理员或安全专家的建议。</p>\n","categories":["ubuntu"],"tags":["mysql"]},{"title":"shell脚本提示 ll:command not found","url":"/2023/03/06/shell%E8%84%9A%E6%9C%AC%E6%8F%90%E7%A4%BA-ll-command-not-found/","content":"<p>shell脚本test.sh代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看<span class=\"built_in\">test</span>目录下的文件列表</span></span><br><span class=\"line\">ll /test</span><br></pre></td></tr></table></figure>\n<p>执行报错：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">test.sh: line 3: ll: command not found</span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看<span class=\"built_in\">test</span>目录下的文件列表</span></span><br><span class=\"line\">ls -l /test</span><br></pre></td></tr></table></figure>","categories":["Linux"],"tags":["Error"]},{"title":"从Mac系统中卸载MySql","url":"/2021/11/03/%E4%BB%8EMac%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%8D%B8%E8%BD%BDMySql/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhbmNlZ2VudHJ5L2FydGljbGUvZGV0YWlscy83OTE0NDEzMQ==\">原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo rm &#x2F;usr&#x2F;local&#x2F;mysql</span><br><span class=\"line\">sudo rm -rf &#x2F;usr&#x2F;local&#x2F;mysql*</span><br><span class=\"line\">sudo rm -rf &#x2F;Library&#x2F;StartupItems&#x2F;MySQLCOM</span><br><span class=\"line\">sudo rm -rf &#x2F;Library&#x2F;PreferencePanes&#x2F;MySQL*</span><br><span class=\"line\">sudo rm -rf ~&#x2F;Library&#x2F;PreferencePanes&#x2F;MySQL*</span><br><span class=\"line\">sudo rm -rf &#x2F;Library&#x2F;Receipts&#x2F;mysql*</span><br><span class=\"line\">sudo rm -rf &#x2F;Library&#x2F;Receipts&#x2F;MySQL*</span><br></pre></td></tr></table></figure>\n<p>最后删除/etc/hostconfig文件中的  MYSQLCOM=-YES-</p>\n<p>这个选项有些用户有，有些没有</p>\n<p>最后如果系统偏好设置中没有了MySql证明卸载成功</p>\n","categories":["数据库"],"tags":["mysql"]},{"title":"vue基础使用-2","url":"/2020/08/25/vue%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8-2/","content":"","categories":["vue"],"tags":["vue"]},{"title":"使用 Gradle 工具检查此项目的依赖","url":"/2020/12/18/%E4%BD%BF%E7%94%A8-Gradle-%E5%B7%A5%E5%85%B7%E6%A3%80%E6%9F%A5%E6%AD%A4%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BE%9D%E8%B5%96/","content":"<p>使用 Gradle 工具检查此项目的依赖，进入项目目录，执行如下指令进行依赖检查：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd app</span><br><span class=\"line\">gradle dependencies</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>打印出如下图所示的依赖树，依赖树显示了你 build 脚本声明的顶级依赖和它们的传递依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--- androidx.test.ext:junit:1.1.1</span><br><span class=\"line\">|    +--- junit:junit:4.12</span><br><span class=\"line\">|    |    \\--- org.hamcrest:hamcrest-core:1.3</span><br><span class=\"line\">|    +--- androidx.test:core:1.2.0</span><br><span class=\"line\">|    |    +--- androidx.annotation:annotation:1.0.0 -&gt; 1.1.0</span><br><span class=\"line\">|    |    +--- androidx.test:monitor:1.2.0</span><br><span class=\"line\">|    |    |    \\--- androidx.annotation:annotation:1.0.0 -&gt; 1.1.0</span><br><span class=\"line\">|    |    \\--- androidx.lifecycle:lifecycle-common:2.0.0 -&gt; 2.1.0</span><br><span class=\"line\">|    |         \\--- androidx.annotation:annotation:1.1.0</span><br><span class=\"line\">|    +--- androidx.test:monitor:1.2.0 (*)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["Android","Gradle"]},{"title":"ubuntu安装jdk1.8和jdk11","url":"/2023/06/29/ubuntu%E5%AE%89%E8%A3%85jdk1-8%E5%92%8Cjdk11/","content":"<p>如果您需要在Ubuntu虚拟机上同时安装JDK 1.8和JDK 11，您可以按照以下步骤进行操作：</p>\n<ol>\n<li><p>安装JDK 1.8：<br>打开终端，运行以下命令安装OpenJDK 8：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，可以使用<code>java -version</code>命令验证安装的JDK版本。</p>\n<span id=\"more\"></span></li>\n<li><p>安装JDK 11：<br>打开终端，运行以下命令安装OpenJDK 11：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install openjdk-11-jdk</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，可以使用<code>java -version</code>命令验证安装的JDK版本。</p>\n</li>\n<li><p>配置默认JDK版本：<br>如果您需要将JDK 1.8或JDK 11设置为默认的Java版本，可以使用<code>update-alternatives</code>命令进行配置。运行以下命令选择默认的Java版本：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>\n\n<p>系统将显示可用的Java版本列表，并要求您选择默认版本。根据提示输入相应的数字，然后按Enter键进行选择。</p>\n</li>\n</ol>\n<p>现在，您的Ubuntu虚拟机已经同时安装了JDK 1.8和JDK 11，并且您可以根据需要选择默认的Java版本。</p>\n","categories":["Linux"],"tags":["环境配置"]},{"title":"上传本地代码到指定的Git仓库","url":"/2019/05/29/%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84Git%E4%BB%93%E5%BA%93/","content":"<h3 id=\"1、本地安装git环境\"><a href=\"#1、本地安装git环境\" class=\"headerlink\" title=\"1、本地安装git环境\"></a>1、本地安装git环境</h3><p>下载安装包安装即可，在这里不加记录。</p>\n<hr>\n<h3 id=\"2、初始化git项目，生成-git-配置目录\"><a href=\"#2、初始化git项目，生成-git-配置目录\" class=\"headerlink\" title=\"2、初始化git项目，生成 .git 配置目录\"></a>2、初始化git项目，生成 .git 配置目录</h3><p>进入项目根目录,右键 git bash here打开控制台 ，输入git init即可完成。<br> <span id=\"more\"></span></p>\n<hr>\n<h3 id=\"3、将项目加入本地git仓库\"><a href=\"#3、将项目加入本地git仓库\" class=\"headerlink\" title=\"3、将项目加入本地git仓库\"></a>3、将项目加入本地git仓库</h3><p>git add . （此处add后面有空格 和点号）<br>git status<br>touch README.md （可不要<br>git add README.md （可不要<br>git commit -m “first commit”</p>\n<hr>\n<h3 id=\"4、在git、码云建好云端项目，生成git-url\"><a href=\"#4、在git、码云建好云端项目，生成git-url\" class=\"headerlink\" title=\"4、在git、码云建好云端项目，生成git url\"></a>4、在git、码云建好云端项目，生成git url</h3><p>建好项目，在项目的克隆下载处复制url即可</p>\n<hr>\n<h3 id=\"5、连接云端仓库-将本地仓库代码提交到云端仓库\"><a href=\"#5、连接云端仓库-将本地仓库代码提交到云端仓库\" class=\"headerlink\" title=\"5、连接云端仓库,将本地仓库代码提交到云端仓库\"></a>5、连接云端仓库,将本地仓库代码提交到云端仓库</h3><p>连接云端仓库<br>*git remote add origin <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20veHh4L3h4eC5naXQ=\">https://gitee.com/xxx/xxx.git<i class=\"fa fa-external-link-alt\"></i></span><br><em>git push origin master<br>为解决本地与云端版本冲突，加上-f参数，push文件<br>git push –set-upstream origin master -f<br>之后会提示输入云端仓库的用户名，密码，验证成功开始上传并完成，实测码云可通过。</em></p>\n<hr>\n<p>不加f会提示错误：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">! [rejected] master -&gt; master (non-fast-forward)</span><br><span class=\"line\">error: failed to push some refs to &#39;https:&#x2F;&#x2F;gitee.com&#x2F;xxx&#x2F;xxx.git&#39;</span><br><span class=\"line\">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class=\"line\">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class=\"line\">hint: &#39;git pull ...&#39;) before pushing again.</span><br><span class=\"line\">hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</span><br></pre></td></tr></table></figure>\n\n\n<p>到此就完成了目的。<br>以后每次提交是先提交到本地仓库，需重新运行 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push --set-upstream origin master -f</span><br></pre></td></tr></table></figure>\n<p>更新到云端<br>或是<code>commit </code>后 <code>push</code><br>git 修改用户名，邮箱：<br>当前 project：<br>直接修改 .git目录下 config文件的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[user]</span><br><span class=\"line\">name &#x3D;xxx</span><br><span class=\"line\">email &#x3D; xxx</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config user.name 用户名;</span><br><span class=\"line\">git config user.email 邮箱;</span><br></pre></td></tr></table></figure>\n<p>全局：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config  --global user.name 用户名；</span><br><span class=\"line\">git config  --global user.email 邮箱名;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、git-删除-项目remote\"><a href=\"#6、git-删除-项目remote\" class=\"headerlink\" title=\"6、git 删除 项目remote\"></a>6、<code>git</code> 删除 项目<code>remote</code></h3><p>终端执行<code>git remote remove origin</code>,origin为项目<code>remote</code>的名字</p>\n<p>添加远程仓库(远程仓库引用)命令：</p>\n<blockquote>\n<p>使用命令：<strong>git remove add 远程仓库到本地的名称  远程仓库的路径</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDcwMzM1OC9hcnRpY2xlL2RldGFpbHMvMTAwNTE0MDg1\">更多指令学习参考<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","categories":["Git"],"tags":["工具使用"]},{"title":"占位符 Broccoli 的使用","url":"/2019/01/18/%E5%8D%A0%E4%BD%8D%E7%AC%A6-Broccoli-%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<p><img data-src=\"https://github.com/samlss/Broccoli/raw/master/screenshots/Broccoli.png\" alt=\"Broccoli\"></p>\n<p>在预加载时显示view的占位符效果</p>\n<h3 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h3><h4 id=\"默认效果\"><a href=\"#默认效果\" class=\"headerlink\" title=\"默认效果:\"></a>默认效果:</h4><p><img data-src=\"https://github.com/samlss/Broccoli/raw/master/screenshots/screenshot1.gif\" alt=\"Broccoli\"></p>\n <span id=\"more\"></span>\n<h4 id=\"自定义动画效果\"><a href=\"#自定义动画效果\" class=\"headerlink\" title=\"自定义动画效果:\"></a>自定义动画效果:</h4><p><img data-src=\"https://github.com/samlss/Broccoli/raw/master/screenshots/screenshot2.gif\" alt=\"Broccoli\"></p>\n<h4 id=\"在RecyclerView使用\"><a href=\"#在RecyclerView使用\" class=\"headerlink\" title=\"在RecyclerView使用\"></a>在RecyclerView使用</h4><p><img data-src=\"https://github.com/samlss/Broccoli/raw/master/screenshots/screenshot3.gif\" alt=\"Broccoli\"></p>\n<h4 id=\"钉钉考勤\"><a href=\"#钉钉考勤\" class=\"headerlink\" title=\"钉钉考勤\"></a>钉钉考勤</h4><p><img data-src=\"https://github.com/samlss/Broccoli/raw/master/screenshots/screenshot4.png\" alt=\"Broccoli\"> </p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img data-src=\"https://github.com/samlss/Broccoli/raw/master/screenshots/screenshot5.png\" alt=\"Broccoli\"></h2><h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><h4 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h4><p>将其添加到你的module的build.gradle中： </p>\n  <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation <span class=\"string\">&#x27;me.samlss:broccoli:1.0.0&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h4><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;me.samlss&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;broccoli&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class=\"line\">  &lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码使用\"><a href=\"#代码使用\" class=\"headerlink\" title=\"代码使用\"></a>代码使用</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Broccoli broccoli = <span class=\"keyword\">new</span> Broccoli();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加默认的占位符</span></span><br><span class=\"line\">broccoli.addPlaceholders(<span class=\"string\">&#x27;activity&#x27;</span>, <span class=\"string\">&#x27;view_id&#x27;</span>, <span class=\"string\">&#x27;view_id&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"><span class=\"comment\">//添加默认的占位符</span></span><br><span class=\"line\">broccoli.addPlaceholders(<span class=\"string\">&#x27;view1&#x27;</span>, <span class=\"string\">&#x27;view2&#x27;</span>, <span class=\"string\">&#x27;view3&#x27;</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//添加自定义的占位符</span></span><br><span class=\"line\">broccoli.addPlaceholder(<span class=\"keyword\">new</span> PlaceholderParameter.Builder()</span><br><span class=\"line\">                        .setView(<span class=\"string\">&#x27;view&#x27;</span>)</span><br><span class=\"line\">                        .setAnimation(<span class=\"string\">&#x27;scaleAnimation&#x27;</span>);</span><br><span class=\"line\">                        .setDrawable(DrawableUtils.createRectangleDrawable(placeHolderColor, <span class=\"number\">0</span>))</span><br><span class=\"line\">                        .build()); </span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"><span class=\"comment\">//添加带渐变动画的占位符</span></span><br><span class=\"line\">broccoli.addPlaceholder(<span class=\"keyword\">new</span> PlaceholderParameter.Builder()</span><br><span class=\"line\">                        .setView(<span class=\"string\">&#x27;view&#x27;</span>)</span><br><span class=\"line\">                        .setDrawable(<span class=\"keyword\">new</span> BroccoliGradientDrawable(Color.parseColor(<span class=\"string\">&quot;#DDDDDD&quot;</span>),</span><br><span class=\"line\">                            Color.parseColor(<span class=\"string\">&quot;#CCCCCC&quot;</span>), <span class=\"number\">0</span>, <span class=\"number\">1000</span>, <span class=\"keyword\">new</span> LinearInterpolator())</span><br><span class=\"line\">                        .build()); </span><br><span class=\"line\">broccoli.show();</span><br></pre></td></tr></table></figure>\n\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtfQnJvY2NvbGlfZGVtbw==\">源码demo地址<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Android"],"tags":["Android","自定义控件"]},{"title":"ubuntu20.04虚拟机安装redis-3.2.8","url":"/2023/08/11/ubuntu20-04%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85redis-3-2-8/","content":"<p>安装 Redis-3.2.8 在 Ubuntu 20.04 虚拟机上可以按照以下步骤进行：</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><p>在终端中安装 <code>build-essential</code> 和 <code>tcl</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlCopy code</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install build-essential tcl</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li><p>下载 Redis-3.2.8 并解压缩：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-3.2.8.tar.gz</span><br><span class=\"line\">tar xzf redis-3.2.8.tar.gz</span><br><span class=\"line\">cd redis-3.2.8</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编译 Redis：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">goCopy code</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 Redis 测试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">make test</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Redis：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">goCopy code</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 Redis 配置文件目录和配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">sudo mkdir &#x2F;etc&#x2F;redis</span><br><span class=\"line\">sudo cp redis.conf &#x2F;etc&#x2F;redis</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改 Redis 配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">sudo nano &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到 <code>bind</code> 行并将其注释掉，以允许远程访问 Redis：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellCopy code</span><br><span class=\"line\"># bind 127.0.0.1</span><br></pre></td></tr></table></figure>\n\n<p>找到 <code>protected-mode</code> 行并将其改为 <code>no</code>，以允许远程访问 Redis：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">arduinoCopy code</span><br><span class=\"line\">protected-mode no</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动 Redis 服务器：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">redis-server &#x2F;etc&#x2F;redis&#x2F;redis.conf</span><br></pre></td></tr></table></figure>\n\n<p>如果出现错误，请查看 Redis 日志文件 <code>/var/log/redis.log</code>。</p>\n</li>\n</ol>\n<p>现在你应该已经成功安装和启动了 Redis-3.2.8 服务器。你可以通过运行 <code>redis-cli</code> 命令来测试 Redis 是否可以正常工作。</p>\n<h2 id=\"补充配置\"><a href=\"#补充配置\" class=\"headerlink\" title=\"补充配置\"></a>补充配置</h2><ul>\n<li><p>绑定ip：如果需要远程访问，可将此⾏注释，或绑定⼀个真实ip</p>\n<blockquote>\n<p>bind 127.0.0.1</p>\n</blockquote>\n</li>\n<li><p>端⼝，默认为6379</p>\n<blockquote>\n<p>port 6379</p>\n</blockquote>\n</li>\n<li><p>是否以守护进程运⾏</p>\n<ul>\n<li>如果以守护进程运⾏，则不会在命令⾏阻塞，类似于服务</li>\n<li>如果以⾮守护进程运⾏，则当前终端被阻塞</li>\n<li>设置为yes表示守护进程，设置为no表示⾮守护进程</li>\n<li>推荐设置为yes</li>\n</ul>\n<blockquote>\n<p>daemonize yes</p>\n</blockquote>\n</li>\n<li><p>数据⽂件</p>\n<blockquote>\n<p>dbfilename dump.rdb</p>\n</blockquote>\n</li>\n<li><p>数据⽂件存储路径</p>\n<blockquote>\n<p>dir /var/lib/redis</p>\n</blockquote>\n</li>\n<li><p>⽇志⽂件</p>\n<blockquote>\n<p>logfile /var/log/redis/redis-server.log</p>\n</blockquote>\n</li>\n<li><p>数据库，默认有16个</p>\n<blockquote>\n<p>database 16</p>\n</blockquote>\n</li>\n<li><p>主从复制，类似于双机备份。</p>\n<blockquote>\n<p>slaveof</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"加载配置启动时报错\"><a href=\"#加载配置启动时报错\" class=\"headerlink\" title=\"加载配置启动时报错\"></a>加载配置启动时报错</h2><blockquote>\n<p>‘logfile /var/log/redis/redis-server.log’ Can’t open the log file: Permission denied</p>\n</blockquote>\n<p>这个错误提示表明 Redis 没有权限在 <code>/var/log/redis/</code> 目录中创建日志文件。</p>\n<p>你可以按照以下步骤来解决这个问题：</p>\n<ol>\n<li><p>确认 <code>/var/log/redis/</code> 目录是否存在，如果不存在，你可以通过以下命令创建它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">sudo mkdir &#x2F;var&#x2F;log&#x2F;redis&#x2F;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>确认 Redis 进程的运行用户是否有权限在该目录中创建文件。默认情况下，Redis 进程会使用 <code>redis</code> 用户来运行，而该用户通常没有权限在 <code>/var/log/redis/</code> 目录中创建文件。</p>\n<p>如果你想让 <code>redis</code> 用户有权限在该目录中创建文件，可以通过以下命令更改该目录的所有者和组：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">sudo chown redis:redis &#x2F;var&#x2F;log&#x2F;redis&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p>这将把 <code>/var/log/redis/</code> 目录的所有者和组都更改为 <code>redis</code>。</p>\n<p>如果你不希望更改该目录的所有者和组，你可以考虑在 Redis 配置文件中指定其他的日志文件路径，例如 <code>/tmp/redis-server.log</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">bashCopy code</span><br><span class=\"line\">logfile &#x2F;tmp&#x2F;redis-server.log</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果你更改了 Redis 配置文件，记得重新启动 Redis 服务，以使更改生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Copy code</span><br><span class=\"line\">sudo systemctl restart redis-server</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>如果你遇到了其他问题或错误，请查看 Redis 的日志文件和系统日志文件以获取更多信息。</p>\n","categories":["中间件"],"tags":["Linux","Redis"]},{"title":"vue基础使用-1","url":"/2020/08/25/vue%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8-1/","content":"<h3 id=\"安装vue\"><a href=\"#安装vue\" class=\"headerlink\" title=\"安装vue\"></a>安装vue</h3><hr>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvaW5zdGFsbGF0aW9uLmh0bWw=\">官方文档<i class=\"fa fa-external-link-alt\"></i></span><br>我才用的是通过 <strong><em>npm</em></strong> 进行安装穿件vue项目的，首先切换到项目根目录下，终端先后执行如下：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm init &#x2F;&#x2F;如果你是第一次使用npm的话</span><br><span class=\"line\"></span><br><span class=\"line\">npm install --yes &#x2F;&#x2F;安装后会生成一个package.json的文件</span><br><span class=\"line\"></span><br><span class=\"line\">npm install vue &#x2F;&#x2F;执行完后会出现一个node_modules文件夹，这个便是我们vue.js的资源文件</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何开始使用\"><a href=\"#如何开始使用\" class=\"headerlink\" title=\"如何开始使用\"></a>如何开始使用</h3><ul>\n<li><p>1、在body中引包<br><code> &lt;script type=&quot;text/javascript&quot; src=&quot;./node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>2、创建实例化对象</p>\n<blockquote>\n<p>new Vue({</p>\n<pre><code>  el: &#39;#app&#39;, //目的地\n  data: data,\n  template: &#39;&#39;</code></pre>\n<p>  });  </p>\n</blockquote>\n</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML0JMT0cvYmxvYi9tYXN0ZXIvbWFya3NvdXJjZS8wMV92dWUlRTUlOUYlQkElRTclQTElODAlRTQlQkQlQkYlRTclOTQlQTguaHRtbA==\">本节练习代码<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>下一章<span class=\"exturl\" data-url=\"aHR0cDovL21hcmtjaHlsLmNuLzIwMjAvMDgvMjUvdnVlJUU1JTlGJUJBJUU3JUExJTgwJUU0JUJEJUJGJUU3JTk0JUE4LTIv\">vue基础使用-2<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["vue"],"tags":["vue"]},{"title":"图片加水印","url":"/2019/03/05/%E5%9B%BE%E7%89%87%E5%8A%A0%E6%B0%B4%E5%8D%B0/","content":"<h1 id=\"我尝试了两种实现水印的方式\"><a href=\"#我尝试了两种实现水印的方式\" class=\"headerlink\" title=\"我尝试了两种实现水印的方式\"></a>我尝试了两种实现水印的方式</h1><h2 id=\"1、一个轻量级是我文字和图片水印框架\"><a href=\"#1、一个轻量级是我文字和图片水印框架\" class=\"headerlink\" title=\"1、一个轻量级是我文字和图片水印框架\"></a>1、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtJbWFnZV9XYXRlcm1hcms=\">一个轻量级是我文字和图片水印框架<i class=\"fa fa-external-link-alt\"></i></span></h2><h2 id=\"2、通过Canvas绘制水印\"><a href=\"#2、通过Canvas绘制水印\" class=\"headerlink\" title=\"2、通过Canvas绘制水印\"></a>2、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtCaW5nQ2hlbmc=\">通过Canvas绘制水印<i class=\"fa fa-external-link-alt\"></i></span></h2><h4 id=\"轻量级的我就不做笔记了，因为很简单就能实现你想要的水印，留意内存溢出就好。\"><a href=\"#轻量级的我就不做笔记了，因为很简单就能实现你想要的水印，留意内存溢出就好。\" class=\"headerlink\" title=\"轻量级的我就不做笔记了，因为很简单就能实现你想要的水印，留意内存溢出就好。\"></a>轻量级的我就不做笔记了，因为很简单就能实现你想要的水印，留意内存溢出就好。</h4> <span id=\"more\"></span>\n<p>下面主要记录下第二种方式加水印。<br>效果图如下：<br><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEBdb77376deaca765aa7a3e6edb0356506?method=download&shareKey=562be4884a22b72841f3ecd26d15c5c2\" alt=\"&quot;扫码前&quot;\" title=\"扫码前\"></p>\n<p><img data-src=\"https://note.youdao.com/yws/api/personal/file/WEB88deb0577afd1cc96101d6982ecc978d?method=download&shareKey=3f220832549b9ac09e08d302731a8dc3\" alt=\"拍照后\" title=\"拍照后\"></p>\n<h3 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;打开相机</span><br><span class=\"line\"> openCamera(this);</span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\">  * 打开相机</span><br><span class=\"line\">  *&#x2F;</span><br><span class=\"line\"> private void openCamera(Activity activity) &#123;</span><br><span class=\"line\">     &#x2F;&#x2F;獲取系統版本</span><br><span class=\"line\">     int currentapiVersion &#x3D; android.os.Build.VERSION.SDK_INT;</span><br><span class=\"line\">     if (tvResult.getText().toString().length() &gt; 0) &#123;</span><br><span class=\"line\">         &#x2F;&#x2F;执行拍照前，应该先判断SD卡是否存在</span><br><span class=\"line\">         String SDState &#x3D; Environment.getExternalStorageState();</span><br><span class=\"line\">         Intent intent &#x3D; new Intent(MediaStore.ACTION_IMAGE_CAPTURE);&#x2F;&#x2F;&quot;android.media.action.IMAGE_CAPTURE&quot;</span><br><span class=\"line\">         if (SDState.equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">             File file &#x3D; new File(FileUtil.getInstance().getImageFile( tvResult.getText().toString()));</span><br><span class=\"line\">             if (!file.exists()) &#123;</span><br><span class=\"line\">                 file.mkdirs();</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             &#x2F;&#x2F; 从文件中创建uri</span><br><span class=\"line\">             imageUri &#x3D; Uri.fromFile(file);</span><br><span class=\"line\">             if (currentapiVersion &lt; 24) &#123;</span><br><span class=\"line\">                 intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class=\"line\">                 intent.putExtra(FILE_PATH, file.getAbsoluteFile());</span><br><span class=\"line\">             &#125; else &#123;</span><br><span class=\"line\">                 &#x2F;&#x2F;兼容android7.0 使用共享文件的形式</span><br><span class=\"line\">                 ContentValues contentValues &#x3D; new ContentValues(1);</span><br><span class=\"line\">                 contentValues.put(MediaStore.Images.Media.DATA, file.getAbsolutePath());</span><br><span class=\"line\">                 imageUri &#x3D; getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, contentValues);</span><br><span class=\"line\">                 intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             startActivityForResult(intent, TAKE_PICTURE);</span><br><span class=\"line\">             Log.d(&quot;tag&quot;, &quot;filepath &#x3D; &quot; + file.getAbsoluteFile());</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125; else &#123;</span><br><span class=\"line\">             Toast.makeText(this, getString(R.string.no_sd_card), Toast.LENGTH_LONG).show();</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         Toast.makeText(this, &quot;请先进行扫描或输入条形码&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>有人会说打开相机需要这么繁琐的代码吗？其实不需要，只是我的业务需要获取图片的路径，安卓碎片重，高版本的注重用户隐私的保护，相片就是用户隐私，所以需要区别对待。</p>\n<p>获取图片路径：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">    * 选择图片后，获取图片的路径</span><br><span class=\"line\">    *</span><br><span class=\"line\">    * @param requestCode</span><br><span class=\"line\">    * @param data</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">   private void doPhoto(int requestCode, Intent data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#x2F;**</span><br><span class=\"line\">        * 获取到的图片路径</span><br><span class=\"line\">        *&#x2F;</span><br><span class=\"line\">       String picPath &#x3D; null;</span><br><span class=\"line\">       SimpleDateFormat simpleDateFormat &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);&#x2F;&#x2F; HH:mm:ss</span><br><span class=\"line\">       &#x2F;&#x2F; 获取当前时间</span><br><span class=\"line\">       Date date &#x3D; new Date(System.currentTimeMillis());</span><br><span class=\"line\">       String dateStr &#x3D; simpleDateFormat.format(date).toString();</span><br><span class=\"line\"></span><br><span class=\"line\">       if (requestCode &#x3D;&#x3D; TAKE_PICTURE) &#123;</span><br><span class=\"line\">           String[] pojo &#x3D; &#123;MediaStore.Images.Media.DATA&#125;;</span><br><span class=\"line\">           Cursor cursor &#x3D; getContentResolver().query(imageUri, pojo, null, null, null);</span><br><span class=\"line\">           if (cursor !&#x3D; null) &#123;</span><br><span class=\"line\">               int columnIndex &#x3D; cursor.getColumnIndexOrThrow(pojo[0]);</span><br><span class=\"line\">               cursor.moveToFirst();</span><br><span class=\"line\">               picPath &#x3D; cursor.getString(columnIndex);</span><br><span class=\"line\">               cursor.close();</span><br><span class=\"line\">           &#125; else &#123;   &#x2F;&#x2F;小米4上取不到图片路径</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   String[] strPaths &#x3D; imageUri.toString().split(&quot;&#x2F;&#x2F;&quot;);</span><br><span class=\"line\">                   picPath &#x3D; strPaths[1];</span><br><span class=\"line\">               &#125; catch (Exception e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           if (picPath !&#x3D; null &amp;&amp; (picPath.toLowerCase().endsWith(&quot;.png&quot;) || picPath.toLowerCase().endsWith(&quot;.jpg&quot;))) &#123;</span><br><span class=\"line\">               if (picPath &#x3D;&#x3D; null || picPath.equals(&quot;&quot;)) &#123;</span><br><span class=\"line\">                   Toast.makeText(this, &quot;请重新拍照&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                   return;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               Toast.makeText(this, &quot;pic &#x3D; &quot; + picPath, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">               Bitmap bm &#x3D; null;</span><br><span class=\"line\">               try &#123;</span><br><span class=\"line\">                   bm &#x3D; FileUtil.getInstance().getImage(picPath, btnOpenCamera.getWidth(), btnOpenCamera.getHeight()); &#x2F;&#x2F;获取限定宽高的bitmap，不限定则容易占用内存过大及OOM</span><br><span class=\"line\">                   if (bm &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                       Toast.makeText(this, &quot;请重新拍照&quot;, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                   &#125; else &#123;</span><br><span class=\"line\">                       if (addWatermarkBitmap(bm, dateStr, btnOpenCamera.getWidth(), btnOpenCamera.getHeight())) &#123;</span><br><span class=\"line\">                           Toast.makeText(this, &quot;水印生成成功，文件已保存在 &quot; + FileUtil.getInstance().IMAGE_PATH, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">               &#125; catch (OutOfMemoryError e) &#123;</span><br><span class=\"line\">                   e.printStackTrace();</span><br><span class=\"line\">                   if (bm !&#x3D; null) &#123;</span><br><span class=\"line\">                       bm.recycle();</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   System.gc();</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125; else &#123;</span><br><span class=\"line\">               Toast.makeText(this, &quot;请重新拍照&quot;, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后调用加水印并保存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> private boolean addWatermarkBitmap(Bitmap bitmap, String str, int w, int h) &#123;</span><br><span class=\"line\">        int destWidth &#x3D; w;   &#x2F;&#x2F;此处的bitmap已经限定好宽高</span><br><span class=\"line\">        int destHeight &#x3D; h;</span><br><span class=\"line\">        Log.v(&quot;tag&quot;, &quot;width &#x3D; &quot; + destWidth + &quot; height &#x3D; &quot; + destHeight);</span><br><span class=\"line\"></span><br><span class=\"line\">        Bitmap icon &#x3D; Bitmap.createBitmap(destWidth, destHeight, Bitmap.Config.ARGB_8888); &#x2F;&#x2F;定好宽高的全彩bitmap</span><br><span class=\"line\">        Canvas canvas &#x3D; new Canvas(icon);&#x2F;&#x2F;初始化画布绘制的图像到icon上</span><br><span class=\"line\"></span><br><span class=\"line\">        Paint photoPaint &#x3D; new Paint(); &#x2F;&#x2F;建立画笔</span><br><span class=\"line\">        photoPaint.setDither(true); &#x2F;&#x2F;获取跟清晰的图像采样</span><br><span class=\"line\">        photoPaint.setFilterBitmap(true);&#x2F;&#x2F;过滤一些</span><br><span class=\"line\"></span><br><span class=\"line\">        Rect src &#x3D; new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());&#x2F;&#x2F;创建一个指定的新矩形的坐标</span><br><span class=\"line\">        Rect dst &#x3D; new Rect(0, 0, destWidth, destHeight);&#x2F;&#x2F;创建一个指定的新矩形的坐标</span><br><span class=\"line\">        canvas.drawBitmap(bitmap, src, dst, photoPaint);&#x2F;&#x2F;将photo 缩放或则扩大到 dst使用的填充区photoPaint</span><br><span class=\"line\"></span><br><span class=\"line\">        Paint textPaint &#x3D; new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DEV_KERN_TEXT_FLAG);&#x2F;&#x2F;设置画笔</span><br><span class=\"line\">        textPaint.setTextSize(destWidth &#x2F; 20);&#x2F;&#x2F;字体大小</span><br><span class=\"line\">        textPaint.setTextAlign(Paint.Align.CENTER);</span><br><span class=\"line\">        textPaint.setTypeface(Typeface.DEFAULT_BOLD);&#x2F;&#x2F;采用默认的宽度</span><br><span class=\"line\">        textPaint.setAntiAlias(true);  &#x2F;&#x2F;抗锯齿</span><br><span class=\"line\">        textPaint.setStrokeWidth(1);</span><br><span class=\"line\">        textPaint.setAlpha(30);</span><br><span class=\"line\">&#x2F;&#x2F;        textPaint.setStyle(Paint.Style.STROKE); &#x2F;&#x2F;空心</span><br><span class=\"line\">        textPaint.setColor(Color.WHITE);&#x2F;&#x2F;采用的颜色</span><br><span class=\"line\">&#x2F;&#x2F;        textPaint.setShadowLayer(1f, 0f, 3f, Color.LTGRAY);</span><br><span class=\"line\">&#x2F;&#x2F;        textPaint.setShadowLayer(3f, 1, 1,getResources().getColor(android.R.color.white));&#x2F;&#x2F;影音的设置</span><br><span class=\"line\">        canvas.drawText(str, destWidth &#x2F; 2, destHeight - 45, textPaint);&#x2F;&#x2F;绘制上去字，开始未知x,y采用那只笔绘制</span><br><span class=\"line\">&#x2F;&#x2F;        canvas.save(Canvas.ALL_SAVE_FLAG);</span><br><span class=\"line\">        canvas.save();</span><br><span class=\"line\">        canvas.restore();</span><br><span class=\"line\">        bitmap.recycle();</span><br><span class=\"line\">        btnOpenCamera.setImageBitmap(icon);</span><br><span class=\"line\">        return FileUtil.getInstance().saveMyBitmap(icon, tvResult.getText().toString()); &#x2F;&#x2F;保存至文件</span><br><span class=\"line\">&#x2F;&#x2F;        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>我在这个重点是实现功能。over，完成。返回显示不难，难在难在加水印，然后保存，代码中也可以看出，添加的水印是自己在控件上方画中来的，然后更具控件的大小新生成一张图保存。主要是其中的一句话：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Rect src &#x3D; new Rect(0, 0, bitmap.getWidth(),    bitmap.getHeight());&#x2F;&#x2F;创建一个指定的新矩形的坐标</span><br><span class=\"line\">Rect dst &#x3D; new Rect(0, 0, destWidth, destHeight);&#x2F;&#x2F;创建一个指定的新矩形的坐标</span><br><span class=\"line\">canvas.drawBitmap(bitmap, src, dst, photoPaint);&#x2F;&#x2F;将photo 缩放或则扩大到 dst使用的填充区photoPaint</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>那样先拍照的图片就在Canvas上面了，然后通过画笔Paint 在上面写字，保存图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Bitmap icon &#x3D; Bitmap.createBitmap(destWidth, destHeight, Bitmap.Config.ARGB_8888); &#x2F;&#x2F;定好宽高的全彩bitmap</span><br><span class=\"line\">Canvas canvas &#x3D; new Canvas(icon);&#x2F;&#x2F;初始化画布绘制的图像到icon上</span><br><span class=\"line\">     </span><br></pre></td></tr></table></figure>\n\n\n\n\n","categories":["Android"],"tags":["Android"]},{"title":"如何在macOS上安装使用scrcpy投屏软件？","url":"/2025/01/02/%E5%A6%82%E4%BD%95%E5%9C%A8macOS%E4%B8%8A%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8scrcpy%E6%8A%95%E5%B1%8F%E8%BD%AF%E4%BB%B6%EF%BC%9F/","content":"<h2 id=\"如何在macOS上安装使用scrcpy投屏软件？\"><a href=\"#如何在macOS上安装使用scrcpy投屏软件？\" class=\"headerlink\" title=\"如何在macOS上安装使用scrcpy投屏软件？\"></a>如何在macOS上安装使用scrcpy投屏软件？</h2><p>以下是在macOS上安装使用scrcpy投屏软件的步骤：</p>\n<ul>\n<li><strong>安装前的准备</strong>：确保你的macOS系统已经安装了Homebrew。Homebrew是macOS上的包管理器，很多软件都可以通过它来安装。如果你还没有安装Homebrew，可以访问<span class=\"exturl\" data-url=\"aHR0cHM6Ly9icmV3LnNoLw==\">Homebrew官方网站<i class=\"fa fa-external-link-alt\"></i></span>，按照其提供的安装教程进行安装。<span id=\"more\"></span></li>\n<li><strong>安装scrcpy</strong>：<ul>\n<li><strong>打开终端</strong>：在“聚焦搜索”中输入“终端”，或进入“应用程序” - &gt;“实用工具”找到“终端”并打开。</li>\n<li><strong>安装scrcpy</strong>：在终端中输入以下命令来安装scrcpy：<code>brew install scrcpy</code>。这将通过Homebrew自动下载并安装scrcpy及其依赖项。</li>\n<li><strong>安装ADB</strong>：由于scrcpy需要ADB（Android Debug Bridge）来与安卓设备通信，若电脑之前未安装过ADB，可在终端中输入：<code>brew install android-platform-tools</code>来安装。</li>\n</ul>\n</li>\n<li><strong>配置与使用</strong>：<ul>\n<li><strong>开启安卓设备的USB调试</strong>：打开安卓设备的“设置” - &gt;“关于手机” - &gt; 多次点击“版本号”来启用开发者选项。然后进入“设置” - &gt;“开发者选项”，找到并开启“USB调试”。如果是某些特定品牌的手机，如小米，可能还需要开启额外的“USB调试（安全设置）”选项，设置后需重新启动设备。</li>\n<li><strong>连接设备</strong>：用USB数据线将安卓设备连接到Mac电脑。打开终端，输入<code>adb devices</code>命令检查设备是否被正确识别。如果连接成功，你将看到设备的序列号以及“device”字样。</li>\n<li><strong>启动scrcpy</strong>：在终端中输入<code>scrcpy</code>命令，此时安卓设备的屏幕内容应该会显示在Mac电脑上，你可以使用鼠标和键盘来控制安卓设备。</li>\n</ul>\n</li>\n</ul>\n","categories":["Android"],"tags":["工具"]},{"title":"如何打Jar工具包","url":"/2019/12/10/%E5%A6%82%E4%BD%95%E6%89%93Jar%E5%B7%A5%E5%85%B7%E5%8C%85/","content":"<p><strong>打开Moudle包的build文件添加如下代码</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">task makeJar(type: Copy) &#123;</span><br><span class=\"line\">    def filename &#x3D; projects.name + &#39;-V&#39;</span><br><span class=\"line\">    delete &quot;build&#x2F;libs&#x2F;MarkZXing1.0.jar&quot;</span><br><span class=\"line\">    from(&#39;build&#x2F;intermediates&#x2F;packaged-classes&#x2F;release&#39;)</span><br><span class=\"line\">    into(&#39;build&#x2F;libs&#x2F;&#39;)</span><br><span class=\"line\">    include(&#39;classes.jar&#39;)</span><br><span class=\"line\">    rename(&#39;classes.jar&#39;, &#39;MarkZXing1.0.jar&#39;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">makeJar.dependsOn(build)</span><br></pre></td></tr></table></figure>\n<p><strong>点开我们右侧的Gradle，找到项目下的第一步新建的模块Module名称 ，点开 Tasks/other 文件 找到 makeJar， 双击即可，等待出现BUILD SUCCESSFUL， Task execution finished ‘makeJar’.==》编译完成，此时去Module目录下的libs/下找到的test.jar，便是制作的jar包。</strong></p>\n","categories":["Android"],"tags":["Android"]},{"title":"如何爬取一个网站的图片分组到指定的文件夹","url":"/2020/12/09/%E5%A6%82%E4%BD%95%E7%88%AC%E5%8F%96%E4%B8%80%E4%B8%AA%E7%BD%91%E7%AB%99%E7%9A%84%E5%9B%BE%E7%89%87%E5%88%86%E7%BB%84%E5%88%B0%E6%8C%87%E5%AE%9A%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9/","content":"<h3 id=\"开发工具：\"><a href=\"#开发工具：\" class=\"headerlink\" title=\"开发工具：\"></a>开发工具：</h3><ul>\n<li><p>Mac电脑    </p>\n</li>\n<li><p>PyCharm</p>\n</li>\n<li><p>Python3.7</p>\n</li>\n<li><p>工具包 <strong>bs4、os、requests</strong></p>\n</li>\n</ul>\n<h4 id=\"网页信息\"><a href=\"#网页信息\" class=\"headerlink\" title=\"网页信息\"></a>网页信息</h4><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/WGyNiboAjLV7cHtVA3p3bYOrDpxiaSCGicr8QmibfJePDfkanj24gu7Qjka5LEicltPQbZIKt7XSb94t43vG22UJxtw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<span id=\"more\"></span>\n\n<p><em>从上面这张图我们可以看出，一页有多套图，这个时候我们就要想怎么把每一套图分开存放（后边具体解释）</em><br>通过分析，所有信息在页面中都可以拿到，我们就不考虑异步加载，那么要考虑的就是分页问题了，通过点击不同的页面，很容易看清楚分页规则</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/WGyNiboAjLV7cHtVA3p3bYOrDpxiaSCGicroN6T3CN0vmAKkOdPIZ6GsL2LxAicSXDROH4NGvlssb2iaV7vT3I9PZgQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><em>很容易明白分页URL的构造，图片链接都在源码中，就不做具体说明了明白了这个之后就可以去写代码抓图片了</em></p>\n<h4 id=\"存图片的思路\"><a href=\"#存图片的思路\" class=\"headerlink\" title=\"存图片的思路\"></a>存图片的思路</h4><p>因为要把每一套图存入一个文件夹中（os模块），文件夹的命名我就以每一套图的URL的最后的几位数字命名，然后文件从文件路径分隔出最后一个字段命名,具体看下边的截图。</p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/WGyNiboAjLV7cHtVA3p3bYOrDpxiaSCGicrs1YO4cw4sWDegXqZ54ujz7VZ1fZds5TRIlUicRZqpJ0OzzPceeW71ng/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/WGyNiboAjLV7cHtVA3p3bYOrDpxiaSCGicrR89T7BTesr71ibH0iaYWZU7XnXEpcu4FdzmamOPib0ZefkEsUv8Ykx9pg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p>这些搞明白之后，接下来就是代码了（可以参考我的解析思路，只获取了30页作为测试）<strong>全部源码</strong>,下面的源码有原文中的有点不一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> bs4 <span class=\"keyword\">import</span> BeautifulSoup</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">doutuSpider</span>(<span class=\"params\">object</span>):</span></span><br><span class=\"line\">    headers = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;user-agent&quot;</span>: <span class=\"string\">&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_url</span>(<span class=\"params\">self, url</span>):</span></span><br><span class=\"line\">        data = requests.get(url, headers=self.headers)</span><br><span class=\"line\">        soup = BeautifulSoup(data.content, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">        totals = soup.findAll(<span class=\"string\">&quot;a&quot;</span>, &#123;<span class=\"string\">&quot;class&quot;</span>: <span class=\"string\">&quot;list-group-item&quot;</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> one <span class=\"keyword\">in</span> totals:</span><br><span class=\"line\">            sub_url = one.get(<span class=\"string\">&#x27;href&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">global</span> path</span><br><span class=\"line\">            path = <span class=\"string\">&quot;/Users/mark/Desktop/Mark/doutu/&quot;</span> + sub_url.split(<span class=\"string\">&#x27;/&#x27;</span>)[<span class=\"number\">-1</span>]</span><br><span class=\"line\">            os.makedirs(path, exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                self.get_img_url(sub_url)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_img_url</span>(<span class=\"params\">self, url</span>):</span></span><br><span class=\"line\">        data = requests.get(url, headers=self.headers)</span><br><span class=\"line\">        soup = BeautifulSoup(data.content, <span class=\"string\">&#x27;lxml&#x27;</span>)</span><br><span class=\"line\">        totals = soup.find_all(<span class=\"string\">&#x27;div&#x27;</span>, &#123;<span class=\"string\">&#x27;class&#x27;</span>: <span class=\"string\">&#x27;artile_des&#x27;</span>&#125;)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> one <span class=\"keyword\">in</span> totals:</span><br><span class=\"line\">            img = one.find(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                sub_url = img.get(<span class=\"string\">&#x27;src&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                <span class=\"keyword\">pass</span></span><br><span class=\"line\">            <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">                <span class=\"comment\"># http://ww1.sinaimg.cn/large/9150e4e5gy1g59ef4u9edg206o06ogni.gif</span></span><br><span class=\"line\">                print(sub_url)</span><br><span class=\"line\">                <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                    self.get_img(sub_url)</span><br><span class=\"line\">                <span class=\"keyword\">except</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_img</span>(<span class=\"params\">self, url</span>):</span></span><br><span class=\"line\">        filename = url.split(<span class=\"string\">&#x27;/&#x27;</span>)[<span class=\"number\">-1</span>]</span><br><span class=\"line\">        <span class=\"keyword\">global</span> path</span><br><span class=\"line\">        img_path = path + <span class=\"string\">&#x27;/&#x27;</span> + filename</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;正在下载----&#x27;</span>, url)</span><br><span class=\"line\">        print(<span class=\"string\">&#x27;存储地址为----&#x27;</span>, img_path)</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            img = requests.get(url, headers=self.headers)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> open(img_path, <span class=\"string\">&#x27;wb&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(img.content)</span><br><span class=\"line\">                f.close()</span><br><span class=\"line\">        <span class=\"keyword\">except</span> requests.RequestException:</span><br><span class=\"line\">            print(<span class=\"string\">&#x27;请求图片出错&#x27;</span>, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> count <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>, <span class=\"number\">2</span>):</span><br><span class=\"line\">            url = <span class=\"string\">&#x27;https://www.doutula.com/article/list/?page=&#123;&#125;&#x27;</span>.format(count)</span><br><span class=\"line\">            print(<span class=\"string\">&#x27;开始下载第&#123;&#125;页&#x27;</span>.format(count))</span><br><span class=\"line\">            self.get_url(url)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    doutu = doutuSpider()</span><br><span class=\"line\">    doutu.create()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/WGyNiboAjLV7cHtVA3p3bYOrDpxiaSCGicrTamKCbHGDr8Z4sGGZbnLOUGMOGickw2Raa1HVowjrgKDib0wwXmqKQmw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/WGyNiboAjLV7cHtVA3p3bYOrDpxiaSCGicrhzHDdct4Y6FZ4melwBj3NdY5lKUicvrk9ib5ZNFdN140PicmQiaSBxRMwQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<p><img data-src=\"https://mmbiz.qpic.cn/mmbiz_png/WGyNiboAjLV7cHtVA3p3bYOrDpxiaSCGicrMWzicYkDdR1nC7viaw97CTmzynWs7JJexuF297FWdChrJNNAn25lNSAg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1\" alt=\"img\"></p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>总的来说，这个网站结构相对来说不是很复杂，大家可以参考一下，爬一些有趣的</p>\n<p>原创作者：loading_miracle，原文链接:<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84ODA5ODcyOGFhZmQ=\">https://www.jianshu.com/p/88098728aafd<i class=\"fa fa-external-link-alt\"></i></span></p>\n","categories":["Python"],"tags":["爬虫","Python3.7"]},{"title":"如何修改表结构：ALERT语句","url":"/2021/04/19/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%9AALERT%E8%AF%AD%E5%8F%A5/","content":"<p>应用场景：当我们的业务需要对已经存在的表进行表结构修改时，我们需要使用 ALERT 语句进行修改。</p>\n<h3 id=\"增加表列\"><a href=\"#增加表列\" class=\"headerlink\" title=\"增加表列:\"></a>增加表列:</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALERT TABLE tablenamme ADD</span><br><span class=\"line\">(</span><br><span class=\"line\">    column dataType [DEFAULT expr][NOT NULL],</span><br><span class=\"line\">    column dataType [DEFAULT expr][NOT NULL],</span><br><span class=\"line\">    ....</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改表列\"><a href=\"#修改表列\" class=\"headerlink\" title=\"修改表列:\"></a>修改表列:</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALERT TABLE tablenamme MODIFY</span><br><span class=\"line\">(</span><br><span class=\"line\">    column dataType [DEFAULT expr][NOT NULL],</span><br><span class=\"line\">    column dataType [DEFAULT expr][NOT NULL],</span><br><span class=\"line\">    ....</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>注意事项</strong>：</p>\n<ul>\n<li>修改表列时，可以增加 <code>NOT NULL</code>及默认值约束，不能增加其他约束</li>\n<li>增加的默认值只会影响到后来插入的值</li>\n<li>若是要缩小列的宽度时，只有表中该列为空后者表里没有记录</li>\n<li>如若这列有空值，则不能添加非空约束</li>\n<li>若是改变该列的类型，只有表中该列为空后者表里没有记录</li>\n</ul>\n<h3 id=\"删除表中的列\"><a href=\"#删除表中的列\" class=\"headerlink\" title=\"删除表中的列\"></a>删除表中的列</h3><p><code>ALERT TABLE tablenamme DROP column col_name;</code></p>\n<h3 id=\"增加约束\"><a href=\"#增加约束\" class=\"headerlink\" title=\"增加约束\"></a>增加约束</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALERT TABLE tablenamme </span><br><span class=\"line\">ADD [CONSTRAINT constraint] type (column);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>增加 <code>NOT NULL</code>约束只能在增加列和修改列的时候添加</li>\n</ul>\n","categories":["数据库"],"tags":["Oracle"]},{"title":"安全码SHA1如何获取","url":"/2020/01/15/%E5%AE%89%E5%85%A8%E7%A0%81SHA1%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96/","content":"<p>在高德地图集成的时候遇到那玩意。<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzNzA0MDk1L2FydGljbGUvZGV0YWlscy84MDg2MTE0Ng==\">原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"SHA1获取的几种方式\"><a href=\"#SHA1获取的几种方式\" class=\"headerlink\" title=\"SHA1获取的几种方式\"></a>SHA1获取的几种方式</h3><ul>\n<li>1、通过Eclipse编译器获取SHA1</li>\n</ul>\n<p>使用 adt 22 以上版本，可以在 eclipse 中直接查看。</p>\n<p>Windows：依次在 eclipse 中打开 Window -&gt; Preferances -&gt; Android -&gt; Build。</p>\n<p>Mac：依次在 eclipse 中打开 Eclipse/ADT-&gt;Preferances -&gt; Android -&gt; Build。</p>\n<p>在弹出的 Build 对话框中 “SHA1 fingerprint” 中的值即为 Android 签名证书的 Sha1 值</p>\n<span id=\"more\"></span>\n<ul>\n<li>2、通过Android Studio编译器获取SHA1</li>\n</ul>\n<p>第一步、打开Android Studio的Terminal工具</p>\n<p>第二步、输入命令：keytool -v -list -keystore keystore文件路径</p>\n<p>第三步、输入Keystore密码</p>\n<ul>\n<li>3、使用 keytool（jdk自带工具）获取SHA1</li>\n</ul>\n<p>第一步、运行进入控制台<br>第二步、在弹出的控制台窗口中输入 cd .android 定位到 .android 文件夹<br>第三步、继续在控制台输入命令<br>debug.keystore：命令为：keytool -list -v -keystore debug.keystore</p>\n<p>自定义的 keystore：命令为：keytool -list -v -keystore apk的keystore</p>\n<p>提示输入密钥库密码，编译器提供的debug keystore默认密码是 android，自定义签名文件的密码请自行填写。输入密钥后回车（如果没设置密码，可直接回车），此时可在控制台显示的信息中获取 SHA1 值</p>\n<ul>\n<li><p>4、代码中提取<br>publicstatic String sHA1(Context context) {<br>    try {<br>        PackageInfo info = context.getPackageManager().getPackageInfo(<br>            context.getPackageName(), PackageManager.GET_SIGNATURES);<br>        byte[] cert = info.signatures[0].toByteArray();<br>        MessageDigest md = MessageDigest.getInstance(“SHA1”);<br>        byte[] publicKey = md.digest(cert);<br>        StringBuffer hexString = new StringBuffer();<br>        for (int i = 0; i &lt; publicKey.length; i++) {<br>            String appendString = Integer.toHexString(0xFF &amp; publicKey[i])<br>                .toUpperCase(Locale.US);<br>            if (appendString.length() == 1)<br>                hexString.append(“0”);<br>            hexString.append(appendString);<br>        }<br>        return hexString.toString();<br>    } catch (NameNotFoundException e) {<br>        e.printStackTrace();<br>    } catch (NoSuchAlgorithmException e) {<br>        e.printStackTrace();<br>    }<br>    return null;<br>}</p>\n</li>\n<li><p>5、apk中读取：<br>第一步、将apk改为zip后缀文件，并解压；<br>第二步、进入META-INF路径，执行keytool -printcert -file META-INF/CERT.RSA</p>\n</li>\n</ul>\n","categories":["Android"],"tags":["Android"]},{"title":"如何防止重新启动","url":"/2019/10/14/%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8/","content":"<p>我的问题描述：</p>\n<blockquote>\n<p>app需要登陆才能进入主页，每次退到后台或返回之后都会重新进入LoginActivity，我需要的效果是登陆后，每次都去跳MainActivity。</p>\n</blockquote>\n<span id=\"more\"></span>\n<p>说做就做，方法有很多种，我这记录的主要是利用回退栈 *moveTaskToBack(false)*来实现：</p>\n<ul>\n<li><p>LoginActivity的onCreate()方法中添加：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (!isTaskRoot()) &#123;</span><br><span class=\"line\">     finish();</span><br><span class=\"line\">     return;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>  <em>注意添加再布局设置之前</em></p>\n</li>\n<li><p>再MainActivity中重写<code>onKeyDown</code>   和<code>onBackPressed</code>方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\"> public boolean onKeyDown(int keyCode, KeyEvent event) &#123;</span><br><span class=\"line\">     if (keyCode &#x3D;&#x3D; KeyEvent.KEYCODE_BACK) &#123;</span><br><span class=\"line\">         moveTaskToBack(false);</span><br><span class=\"line\">         return true;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return super.onKeyDown(keyCode, event);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> @Override</span><br><span class=\"line\"> public void onBackPressed() &#123;</span><br><span class=\"line\">     moveTaskToBack(false);</span><br><span class=\"line\">     super.onBackPressed();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"moveTaskToBack-boolean-isToTask-这个方法的使用自己的理解就是不让Activity被系统主动回收。\"><a href=\"#moveTaskToBack-boolean-isToTask-这个方法的使用自己的理解就是不让Activity被系统主动回收。\" class=\"headerlink\" title=\"moveTaskToBack(boolean  isToTask)这个方法的使用自己的理解就是不让Activity被系统主动回收。\"></a>moveTaskToBack(boolean  isToTask)这个方法的使用自己的理解就是不让Activity被系统主动回收。</h3>","categories":["Android"],"tags":["Android"]},{"title":"在Ubuntu上安装多个版本的Java JDK","url":"/2023/09/08/%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E7%9A%84Java-JDK/","content":"<p>在Ubuntu上安装多个版本的Java JDK（Java Development Kit）是可行的，并且可以使用<code>update-alternatives</code>来管理不同版本之间的切换。以下是一个示例，演示如何在Ubuntu上安装和管理多个Java JDK版本。</p>\n<ol>\n<li><p><strong>检查系统上已安装的Java版本：</strong></p>\n<p>在终端中运行以下命令，以查看系统上已安装的Java版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">update-java-alternatives -l</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>这将列出已安装的Java版本。</p>\n</li>\n<li><p><strong>安装新的Java JDK版本：</strong></p>\n<p>可以使用<code>apt</code>或手动下载并安装Java JDK。以下是使用<code>apt</code>来安装OpenJDK 8和OpenJDK 11的示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装OpenJDK 8</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install openjdk-8-jdk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装OpenJDK 11</span></span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install openjdk-11-jdk</span><br></pre></td></tr></table></figure>\n\n<p>您可以根据需要安装其他版本的Java JDK。</p>\n</li>\n<li><p><strong>使用<code>update-alternatives</code>选择默认版本：</strong></p>\n<p>使用<code>update-alternatives</code>命令选择默认的Java版本。例如，选择OpenJDK 11作为默认版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>\n\n<p>这将列出系统上已安装的Java版本，并要求您选择默认版本。按照提示进行选择。</p>\n</li>\n<li><p><strong>验证默认版本：</strong></p>\n<p>使用以下命令验证默认的Java版本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n\n<p>这将显示当前默认的Java版本。</p>\n</li>\n<li><p><strong>切换Java版本：</strong></p>\n<p>如果需要切换到其他已安装的Java版本，可以随时使用<code>update-alternatives</code>命令进行更改。例如，要切换回OpenJDK 8：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>\n\n<p>然后选择OpenJDK 8。</p>\n</li>\n</ol>\n<p>通过这些步骤，您可以在Ubuntu上安装和管理多个Java JDK版本，并随时切换到需要的版本。</p>\n","categories":["ubuntu"],"tags":["环境配置"]},{"title":"安卓的启动模式详解","url":"/2018/12/16/%E5%AE%89%E5%8D%93%E7%9A%84%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3/","content":"<h4 id=\"安卓开发者基本都知道Activity的四大启动模式，但是一到被问到之间区别的时候，再问深一点的时候，往往都会回答的不是很让面试官满意，鄙人就是，嘴皮子笨不懂得如何表达清楚。\"><a href=\"#安卓开发者基本都知道Activity的四大启动模式，但是一到被问到之间区别的时候，再问深一点的时候，往往都会回答的不是很让面试官满意，鄙人就是，嘴皮子笨不懂得如何表达清楚。\" class=\"headerlink\" title=\"安卓开发者基本都知道Activity的四大启动模式，但是一到被问到之间区别的时候，再问深一点的时候，往往都会回答的不是很让面试官满意，鄙人就是，嘴皮子笨不懂得如何表达清楚。\"></a>安卓开发者基本都知道Activity的四大启动模式，但是一到被问到之间区别的时候，再问深一点的时候，往往都会回答的不是很让面试官满意，鄙人就是，嘴皮子笨不懂得如何表达清楚。</h4><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a><strong>简介</strong></h2><h4 id=\"我们在创建一个Activity后，都知道要在清单文件中去注册，在程序员创建该Activity实例时，系统会按照先进先出的原则，创建一个任务栈将其实例放入其中，然后按back键时或finish时，系统就会将栈顶的Activity移除栈，我们可以在清单文件中指明该Activity的启动模式，系统默认的Activity的启动模式是standard模式。\"><a href=\"#我们在创建一个Activity后，都知道要在清单文件中去注册，在程序员创建该Activity实例时，系统会按照先进先出的原则，创建一个任务栈将其实例放入其中，然后按back键时或finish时，系统就会将栈顶的Activity移除栈，我们可以在清单文件中指明该Activity的启动模式，系统默认的Activity的启动模式是standard模式。\" class=\"headerlink\" title=\"我们在创建一个Activity后，都知道要在清单文件中去注册，在程序员创建该Activity实例时，系统会按照先进先出的原则，创建一个任务栈将其实例放入其中，然后按back键时或finish时，系统就会将栈顶的Activity移除栈，我们可以在清单文件中指明该Activity的启动模式，系统默认的Activity的启动模式是standard模式。\"></a>我们在创建一个Activity后，都知道要在清单文件中去注册，在程序员创建该Activity实例时，系统会按照先进先出的原则，创建一个任务栈将其实例放入其中，然后按back键时或finish时，系统就会将栈顶的Activity移除栈，我们可以在清单文件中指明该Activity的启动模式，系统默认的Activity的启动模式是standard模式。</h4><hr>\n<span id=\"more\"></span>\n<h3 id=\"Activity的启动模式：\"><a href=\"#Activity的启动模式：\" class=\"headerlink\" title=\"Activity的启动模式：\"></a>Activity的启动模式：</h3><h4 id=\"standard、singleTask、singleTop、singleInstance\"><a href=\"#standard、singleTask、singleTop、singleInstance\" class=\"headerlink\" title=\"standard、singleTask、singleTop、singleInstance\"></a><strong><em>standard、singleTask、singleTop、singleInstance</em></strong></h4><h4 id=\"1-standard-标准模式\"><a href=\"#1-standard-标准模式\" class=\"headerlink\" title=\"1. standard(标准模式)\"></a>1. standard(标准模式)</h4><p><strong><em>不管这个Activity的实例是否存在于任务栈中或者和启动它的Activity是否在相同的任务栈中，每次启动Activity都会创建一个新的实例。谁启动了它，它就属于启动它的Activity的任务栈中，</em></strong></p>\n<h3 id=\"无论核实启动哪个Activity，都会重新创建页面实例并收入栈尾\"><a href=\"#无论核实启动哪个Activity，都会重新创建页面实例并收入栈尾\" class=\"headerlink\" title=\"无论核实启动哪个Activity，都会重新创建页面实例并收入栈尾\"></a><strong><em>无论核实启动哪个Activity，都会重新创建页面实例并收入栈尾</em></strong></h3><h4 id=\"2-singleTask-栈内复用模式\"><a href=\"#2-singleTask-栈内复用模式\" class=\"headerlink\" title=\"2. singleTask(栈内复用模式)\"></a>2. singleTask(栈内复用模式)</h4><p><strong><em>在这个模式下，如果栈内存在该Activity的实例，不管是否存在于栈顶都不会再创建实例，而是会将该实例前的Activity清出栈顶（cleanTop），并且会回调onNewIntent方法。其实在这个过程中，首先是会进行任务栈的匹配，这个任务栈就是通过taskAffinity属性指定，如果不存在这个任务栈，就会创建一个任务栈，并将该Activity放入栈中。流程图比较清晰，如下所见：</em></strong><br><img data-src=\"https://user-gold-cdn.xitu.io/2017/5/17/490fd5b297a2a07d60d1ffdad58e6cc3\" alt=\"image\"></p>\n<h3 id=\"启动activity时，判断栈中存在activity的实例，就重新利用，并清除位于该实例上面的所有实例，否则情况和standard一样\"><a href=\"#启动activity时，判断栈中存在activity的实例，就重新利用，并清除位于该实例上面的所有实例，否则情况和standard一样\" class=\"headerlink\" title=\"启动activity时，判断栈中存在activity的实例，就重新利用，并清除位于该实例上面的所有实例，否则情况和standard一样\"></a><strong><em>启动activity时，判断栈中存在activity的实例，就重新利用，并清除位于该实例上面的所有实例，否则情况和standard一样</em></strong></h3><h4 id=\"3-singleTop-栈顶复用模式\"><a href=\"#3-singleTop-栈顶复用模式\" class=\"headerlink\" title=\"3. singleTop(栈顶复用模式)\"></a>3. singleTop(栈顶复用模式)</h4><p><strong><em>这个模式下，如果Activity的实例已经存在在栈顶，启动它就不会再创建新的实例，而是会调用onNewIntent，通过此方法的参数我们可以去除当前请求的信息。随后会调用onResume方法，不再调用onCreate、onStart方法，因为它没有变化。如果没有存在的话，就会如同standard模式一样。这种模式可以用来防止多次打开同一个Activity。</em></strong></p>\n<h3 id=\"启动activity时，判断栈顶正好时该activity的实例，就重新使用，否则就会创建新的实例放入栈顶，否则的情况和standard类似\"><a href=\"#启动activity时，判断栈顶正好时该activity的实例，就重新使用，否则就会创建新的实例放入栈顶，否则的情况和standard类似\" class=\"headerlink\" title=\"启动activity时，判断栈顶正好时该activity的实例，就重新使用，否则就会创建新的实例放入栈顶，否则的情况和standard类似\"></a><strong><em>启动activity时，判断栈顶正好时该activity的实例，就重新使用，否则就会创建新的实例放入栈顶，否则的情况和standard类似</em></strong></h3><h4 id=\"4、singleInstance（全局唯一模式）\"><a href=\"#4、singleInstance（全局唯一模式）\" class=\"headerlink\" title=\"4、singleInstance（全局唯一模式）\"></a>4、singleInstance（全局唯一模式）</h4><p><strong><em>该模式具备singleTask模式的所有特性外，与它的区别就是，这种模式下的Activity会单独占用一个Task栈，具有全局唯一性，即整个系统中就这么一个实例，由于栈内复用的特性，后续的请求均不会创建新的Activity实例，除非这个特殊的任务栈被销毁了。以singleInstance模式启动的Activity在整个系统中是单例的，如果在启动这样的Activiyt时，已经存在了一个实例，那么会把它所在的任务调度到前台，重用这个实例。</em></strong></p>\n<h3 id=\"启动activity时，将该Activity的实例放入一个新的栈中，原栈中的实例保持不变\"><a href=\"#启动activity时，将该Activity的实例放入一个新的栈中，原栈中的实例保持不变\" class=\"headerlink\" title=\"启动activity时，将该Activity的实例放入一个新的栈中，原栈中的实例保持不变\"></a><strong><em>启动activity时，将该Activity的实例放入一个新的栈中，原栈中的实例保持不变</em></strong></h3><h4 id=\"ps：-adb-shell-dumpsys-activity-查看adb运行日志\"><a href=\"#ps：-adb-shell-dumpsys-activity-查看adb运行日志\" class=\"headerlink\" title=\"ps：[adb shell dumpsys activity],查看adb运行日志\"></a>ps：[adb shell dumpsys activity],查看adb运行日志</h4>","categories":["Android"],"tags":["Android"]},{"title":"实现本地资源包统一管理nexus","url":"/2022/09/16/%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E8%B5%84%E6%BA%90%E5%8C%85%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86nexus/","content":"<p>通过终端命令 cd /Users/xxx/Downloads/nexus-3.14.0-04-mac/nexus-3.14.0-04/bin进入bin目录下，执行<br>./nexus start<br>./nexus status</p>\n<p>上传示例：</p>\n<p>apply plugin: ‘maven’</p>\n<p>//打包main目录下代码和资源的task<br>task androidSourcesJar(type: Jar) {<br>    classifier = ‘sources’<br>    from android.sourceSets.main.java.srcDirs<br>}<br>//配置需要上传到maven仓库的文件<br>artifacts {<br>    archives androidSourcesJar<br>}<br>//上传到Maven仓库的task<br>uploadArchives {<br>    repositories {<br>        mavenDeployer {<br>            //指定maven仓库url<br>            repository(url: “<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDgxL25leHVzL2NvbnRlbnQvcmVwb3NpdG9yaWVzL3JlbGVhc2VzLyI=\">http://127.0.0.1:8081/nexus/content/repositories/releases/&quot;<i class=\"fa fa-external-link-alt\"></i></span>) {<br>                //nexus登录默认用户名和密码<br>                authentication(userName: “admin”, password: “admin123”)<br>            }<br>            pom.groupId = “com.example.as.custom”// 唯一标识（通常为模块包名，也可以任意）<br>            pom.artifactId = “CustomWidget” // 项目名称（通常为类库模块名称，也可以任意）<br>            pom.version = “1.1.0” // 版本号<br>        }<br>    }<br>}</p>\n<p>3.使用：<br>和使用本地仓库依赖一样，我们告诉gradle依赖包仓库的位置，在项目根目录下build.gradle中添加：</p>\n<p>allprojects {<br>    repositories {<br>        google()<br>        jcenter()<br>        maven { url ‘<span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTo4MDgxL25leHVzL2NvbnRlbnQvcmVwb3NpdG9yaWVzL3JlbGVhc2VzLyc=\">http://127.0.0.1:8081/nexus/content/repositories/releases/&#39;<i class=\"fa fa-external-link-alt\"></i></span> }<br>    }<br>}</p>\n<p>然后在app模块build.gradle中添加依赖编译运行成功：</p>\n","categories":["Android"],"tags":["Android"]},{"title":"将项目迁移至androidx","url":"/2019/10/14/%E5%B0%86%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E8%87%B3androidx/","content":"<h2 id=\"自己的工具：\"><a href=\"#自己的工具：\" class=\"headerlink\" title=\"自己的工具：\"></a>自己的工具：</h2><ul>\n<li>Android studio3.4.1</li>\n<li>MacBook</li>\n</ul>\n<h2 id=\"迁移步骤：\"><a href=\"#迁移步骤：\" class=\"headerlink\" title=\"迁移步骤：\"></a>迁移步骤：</h2><ul>\n<li>在gradle.properties添加如下内容：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">  &#x2F;**</span><br><span class=\"line\">*android.useAndroidX&#x3D;true 表示当前项目启用 androidx</span><br><span class=\"line\">*android.enableJetifier&#x3D;true 表示将依赖包也迁移到androidx 。如果取值为false,表示不迁移依赖包</span><br><span class=\"line\">*到androidx，但在使用依赖包中的内容时可能会出现问题</span><br><span class=\"line\">*&#x2F;</span><br><span class=\"line\">android.useAndroidX&#x3D;true   </span><br><span class=\"line\">android.enableJetifier&#x3D;true </span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li>在AndroidStudio 3.2或更高（因为一个个去改太麻烦，这个版本有一键迁移的功能 Refactor -&gt; Migrate to AndroidX  在执行该操作时会提醒我们是否将当前项目打包备份。如果你提前已经做好了备份，可以忽略；如果没有备份，则先备份。）<br><img data-src=\"https://img-blog.csdnimg.cn/20190711092020175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNzcxMjU4,size_16,color_FFFFFF,t_70\" alt=\"示意图\"></li>\n</ul>\n<p><em>gradle版本至少为3.2.0以上，以及compileSdkVersion为28以上。（否则点击Migrate to Androidx会出现如下错误）</em></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2019071109224159.png\"></p>\n<p>然后手动检查项目的并修改，先 build会报很多的错，慢慢改。</p>\n<h3 id=\"没有或不能适配AndroidX的插件包，建议能删掉的就删掉\"><a href=\"#没有或不能适配AndroidX的插件包，建议能删掉的就删掉\" class=\"headerlink\" title=\"没有或不能适配AndroidX的插件包，建议能删掉的就删掉\"></a><em>没有或不能适配AndroidX的插件包，建议能删掉的就删掉</em></h3>","categories":["Android"],"tags":["Android"]},{"title":"实现公共字段的自动填充逻辑","url":"/2023/08/01/%E5%AE%9E%E7%8E%B0%E5%85%AC%E5%85%B1%E5%AD%97%E6%AE%B5%E7%9A%84%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E9%80%BB%E8%BE%91/","content":"<h3 id=\"需要实现的效果\"><a href=\"#需要实现的效果\" class=\"headerlink\" title=\"需要实现的效果\"></a>需要实现的效果</h3><p>公共字段自动填充</p>\n<ul>\n<li>问题分析</li>\n<li>实现思路</li>\n<li>代码开发</li>\n<li>功能测试</li>\n</ul>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>多张业务表中的公共字段：</p>\n<p><strong>问题：代码冗余、不便于后期维护</strong></p>\n<span id=\"more\"></span>\n\n<h3 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h3><ul>\n<li>自定义注解 AutoFill，用于标识需要进行公共字段自动填充的方法</li>\n<li>自定义切面类 AutoFillAspect，统一拦截加入了 AutoFill 注解的方法，通过反射为公共字段赋值</li>\n<li>在 Mapper 的方法上加入 AutoFill 注解</li>\n</ul>\n<p>技术点：<strong>枚举、注解、AOP、反射</strong></p>\n<h3 id=\"代码开发\"><a href=\"#代码开发\" class=\"headerlink\" title=\"代码开发\"></a>代码开发</h3><ul>\n<li><p>自定义注解 AutoFill</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义注解，用于标识需要进行公共字段的自动填充</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.METHOD)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AutoFill &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 数据操作类型 UPDATE、INSERT</span></span><br><span class=\"line\">    <span class=\"function\">OperationType <span class=\"title\">value</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>自定义切面 AutoFillAspect</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义切面，实现公共字段的自动填充逻辑</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutoFillAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 切入点</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..))&amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">autoFillPointCut</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 前置通知，在通知中进行公共字段的赋值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">autoFill</span><span class=\"params\">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;开始进行公共字段的自动填充。。。。。。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完善自定义切面 AutoFillAspect 的 autoFill 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">log.info(<span class=\"string\">&quot;开始进行公共字段的自动填充。。。。。。&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取到当前被拦截到的方法上的数据库操作类型</span></span><br><span class=\"line\">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();<span class=\"comment\">//方法对象获取</span></span><br><span class=\"line\">        AutoFill autoFill = signature.getMethod().getAnnotation(AutoFill.class);//获取方法上的注解对象</span><br><span class=\"line\">        OperationType operationType = autoFill.value();<span class=\"comment\">//获得数据库的操作类型</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取到当前被拦截方法的参数---实体对象</span></span><br><span class=\"line\">        Object[] args = joinPoint.getArgs();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (args == <span class=\"keyword\">null</span> || args.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Object entity = args[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 准备赋值的数据</span></span><br><span class=\"line\">        LocalDateTime now = LocalDateTime.now();</span><br><span class=\"line\">        Long currentId = BaseContext.getCurrentId();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (operationType == OperationType.INSERT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//为四个公共字段赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Method setCreateTime = entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class);</span><br><span class=\"line\">                Method setCreateUser = entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class=\"line\">                Method setUpdateTime = entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class=\"line\">                Method setUpdateUser = entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//通过反射为对象属性赋值</span></span><br><span class=\"line\">                setCreateTime.invoke(entity, now);</span><br><span class=\"line\">                setCreateUser.invoke(entity, currentId);</span><br><span class=\"line\">                setUpdateTime.invoke(entity, now);</span><br><span class=\"line\">                setUpdateUser.invoke(entity, currentId);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (operationType == OperationType.UPDATE) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//为二个公共字段赋值</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Method setUpdateTime = entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class=\"line\">                Method setUpdateUser = entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//通过反射为对象属性赋值</span></span><br><span class=\"line\">                setUpdateTime.invoke(entity, now);</span><br><span class=\"line\">                setUpdateUser.invoke(entity, currentId);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在Mapper接口的方法上加入 AutoFill 注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 插入数据</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> category</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Insert(&quot;insert into category(type, name, sort, status, create_time, update_time, create_user, update_user)&quot; +</span></span><br><span class=\"line\"><span class=\"meta\">            &quot; VALUES&quot; +</span></span><br><span class=\"line\"><span class=\"meta\">            &quot; (#&#123;type&#125;, #&#123;name&#125;, #&#123;sort&#125;, #&#123;status&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;, #&#123;createUser&#125;, #&#123;updateUser&#125;)&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@AutoFill(OperationType.INSERT)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Category category)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据id修改分类</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> category</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@AutoFill(OperationType.UPDATE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(Category category)</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将业务层为公共字段赋值的代码注释掉</p>\n</li>\n</ul>\n<h3 id=\"功能测试\"><a href=\"#功能测试\" class=\"headerlink\" title=\"功能测试\"></a>功能测试</h3><p>通过观察控制台输出的SQL来确定公共字段填充是否完成</p>\n","categories":["Java"],"tags":["Spring Boot、AOP、注解"]},{"title":"环境整理（pro、sit、uat、test、pre、dev、fat ）","url":"/2024/06/04/%E7%8E%AF%E5%A2%83%E6%95%B4%E7%90%86%EF%BC%88pro%E3%80%81sit%E3%80%81uat%E3%80%81test%E3%80%81pre%E3%80%81dev%E3%80%81fat-%EF%BC%89/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzE1ODIxNDg3L2FydGljbGUvZGV0YWlscy8xMjk0ODU3NTA=\">原文链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>pro</strong>（Production environment）：生产环境，面向外部用户的环境，正式环境，连接上互联网即可访问。</p>\n<p><strong>sit</strong> (System Integration Test ): 系统集成测试，开发人员自己测试流程是否走通。</p>\n<p><strong>uat</strong> (User Acceptance Test environment): 用户验收测试环境，用于生产环境下的软件测试者测试使用。</p>\n<p><strong>test</strong>: 测试环境，外部用户无法访问，专门给测试人员使用的，版本相对稳定。</p>\n<p><strong>pre</strong> ：灰度环境，外部用户可以访问，但是服务器配置相对低，其它和生产一样，外部用户可以访问，版本发布初期，正式版本发布前。</p>\n<p><strong>dev</strong>（Development environment） ： 开发环境，外部用户无法访问，开发人员使用，版本变动很大。</p>\n<p><strong>fat</strong> (Feature Acceptance Test environment) : 功能验收测试环境，用于软件测试者测试使用</p>\n","categories":["Android"],"tags":["术语"]},{"title":"界面为ScrollView时打开界面会自动滚动到底部之解决方法","url":"/2019/09/02/%E7%95%8C%E9%9D%A2%E4%B8%BAScrollView%E6%97%B6%E6%89%93%E5%BC%80%E7%95%8C%E9%9D%A2%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8%E5%88%B0%E5%BA%95%E9%83%A8%E4%B9%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","content":"<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQ0NDkwOTYvYXJ0aWNsZS9kZXRhaWxzLzcyODg1OTQ3\">https://blog.csdn.net/u014449096/article/details/72885947<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><strong>开发中遇到了这样的一个问题，界面最外层是ScrollView，然后里面有嵌套了一个ListView还有其他可以获取焦点的View，然后每次打开界面都会自动滚动到最底部，经过一番折腾，发现了一个简单的方法,<br>获取ScrollView里面一个上层任意view，然后调用如下方法：</strong><br> <span id=\"more\"></span><br><code>view.setFocusable(true);  view.setFocusableInTouchMode(true);  view.requestFocus();</code></p>\n<p>**或者将scrollview包裹的内容设置上以下两个属性 **<br><code>android:focusable=”true” android:focusableInTouchMode=”true”</code></p>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;ScrollView</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">    android:scrollbars&#x3D;&quot;none&quot;</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;LinearLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;wrap_content&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">        android:focusable&#x3D;&quot;true&quot;</span><br><span class=\"line\">        android:focusableInTouchMode&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">&lt;&#x2F;ScrollView</span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["Android","冲突"]},{"title":"线程与线程池开发核心技术","url":"/2022/09/16/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/","content":"<h2 id=\"线程与线程池开发核心技术\"><a href=\"#线程与线程池开发核心技术\" class=\"headerlink\" title=\"线程与线程池开发核心技术\"></a>线程与线程池开发核心技术</h2><p>[TOC]</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcHAueWlueGlhbmcuY29tL3NoYXJkL3M1MC9ubC8yMjEwOTE5Mi8zYWU0ZGI5YS1kZjA2LTQ1N2YtOTY2Zi1kYTJiZDE5YmRlZWQv\">印象笔记链接<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"线程与进程\"><a href=\"#线程与进程\" class=\"headerlink\" title=\"线程与进程\"></a>线程与进程</h3><ul>\n<li>一个进程至少一个线程 </li>\n<li>进程可以包含多个线程 </li>\n<li>进程在执行过程中拥有独立的内存空间，而线程运行在进程内</li>\n</ul>\n<span id=\"more\"></span>\n<h3 id=\"线程的几种创建方式\"><a href=\"#线程的几种创建方式\" class=\"headerlink\" title=\"线程的几种创建方式\"></a>线程的几种创建方式</h3><ul>\n<li><code>new Thread</code>：可复写<code>Thread#run</code>方法。也可传递<code>Runnable</code>对象，<ul>\n<li>更加灵活。 </li>\n<li>缺点：缺乏统一管理，可能无限制新建线程，相互之间竞争，及可能占用过多系统资源导致死机或<code>oom</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传递Runnable对象 </span></span><br><span class=\"line\"><span class=\"number\">1.</span><span class=\"function\">new <span class=\"title\">Thread</span><span class=\"params\">(new Runnable()</span></span>&#123;</span><br><span class=\"line\">    .....</span><br><span class=\"line\">&#125;).start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//复写Thread#run方法</span></span><br><span class=\"line\"><span class=\"number\">2.</span>class MyThread extends Thread&#123; </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123; </span><br><span class=\"line\">                .... </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> MyThread().start()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>AysncTask,轻量级的异步任务工具类,提供任务执行的进度回调给UI线程<ul>\n<li>场景：需要知晓任务执行的进度,多个任务串行执行 </li>\n<li>缺点：生命周期和宿主的生命周期不同步,有可能发生内存泄漏,默认情况所有任务串行执行</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">   <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;MyAsyncTask&quot;</span>; </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"meta\">@Override</span> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> String <span class=\"title\">doInBackground</span><span class=\"params\">(String... params)</span> </span>&#123; </span><br><span class=\"line\">       <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">           publishProgress(i * <span class=\"number\">10</span>); </span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> params[<span class=\"number\">0</span>];</span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"meta\">@Override</span> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(String result)</span> </span>&#123;</span><br><span class=\"line\">           Log.e(TAG, <span class=\"string\">&quot;result: &quot;</span> + result); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... values)</span> </span>&#123;</span><br><span class=\"line\">           Log.e(TAG, <span class=\"string\">&quot;onProgressUpdate: &quot;</span> + values[<span class=\"number\">0</span>].intValue()); </span><br><span class=\"line\">   &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// #1 子类复写方法 </span></span><br><span class=\"line\">AsyncTask asyncTask = <span class=\"keyword\">new</span> MyAsyncTask(); </span><br><span class=\"line\"><span class=\"comment\">//AsyncTask所有任务默认串行执行 </span></span><br><span class=\"line\">asyncTask.execute(<span class=\"string\">&quot;execute MyAsyncTask&quot;</span>); </span><br><span class=\"line\">or </span><br><span class=\"line\">asyncTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,<span class=\"string\">&quot;execute MyAsyncTask&quot;</span>) <span class=\"comment\">// #2 使用#execute方法，同样串行执行 </span></span><br><span class=\"line\">AsyncTask.execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">       <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           ...... </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\"> <span class=\"comment\">// #3 使用内置THREAD_POOL_EXECUTOR线程池 并发执行 </span></span><br><span class=\"line\"> AsyncTask.THREAD_POOL_EXECUTOR.execute(<span class=\"keyword\">new</span> Runnable() &#123; </span><br><span class=\"line\">           <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">           &#125; </span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>HandlerThread,适用于主线程需要和工作线程通信,适用于持续性任务,比如轮训的场景，所有任务串行执行 </li>\n<li>缺点:不会像普通线程一样主动销毁资源，会一直运行着，所以可能会造成内存泄漏</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">HandlerThread thread = <span class=\"keyword\">new</span> HandlerThread(<span class=\"string\">&quot;concurrent-thread&quot;</span>); </span><br><span class=\"line\">thread.start(); </span><br><span class=\"line\">ThreadHandler handler = <span class=\"keyword\">new</span> ThreadHandler(thread.getLooper()) &#123; </span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Message msg)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MSG_WHAT_FLAG_1: </span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">         &#125; </span><br><span class=\"line\">     &#125;; </span><br><span class=\"line\">handler.sendEmptyMessage(MSG_WHAT_FLAG_1); </span><br><span class=\"line\">hread.quitSafely();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义成静态,防止内存泄漏 </span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123; </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadHandler</span><span class=\"params\">(Looper looper)</span></span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">super</span>(looper)</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>IntentService,适用于我们的任务需要跨页面读取任务执行的进度，结果。比如后台上传图片，批量操作数据库等。任务执行完成功后，就会自我结束，所以不需要手动stopservice,这是他跟service的区分 </li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyIntentService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntentService</span></span>&#123; </span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Intent intent)</span> </span>&#123; <span class=\"keyword\">int</span> command = intent.getInt(<span class=\"string\">&quot;command&quot;</span>) ...... &#125; &#125; context.startService(<span class=\"keyword\">new</span> Intent())</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>✨ThreadPoolExecutor:适用快速处理大量耗时较短的任务场景 <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Executors.newCachedThreadPool();<span class=\"comment\">//线程可复用线程池</span></span><br><span class=\"line\">Executors.newFixedThreadPool();<span class=\"comment\">//固定线程数量的线程池 </span></span><br><span class=\"line\">Executors.newScheduledThreadPool();<span class=\"comment\">//可指定定时任务的线程池 </span></span><br><span class=\"line\">Executors.newSingleThreadExecutor();<span class=\"comment\">//线程数量为1的线程池</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":["Android"],"tags":["Android","线程"]},{"title":"自定义Toat及其弹出时间控制","url":"/2020/07/21/%E8%87%AA%E5%AE%9A%E4%B9%89Toat%E5%8F%8A%E5%85%B6%E5%BC%B9%E5%87%BA%E6%97%B6%E9%97%B4%E6%8E%A7%E5%88%B6/","content":"<p>效果就是实现Toast布局自定义，弹出的事件进行控制</p>\n<h3 id=\"一、先自定义布局\"><a href=\"#一、先自定义布局\" class=\"headerlink\" title=\"一、先自定义布局\"></a>一、先自定义布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Toast toast &#x3D; Toast.makeText(mContext, str, Toast.   LENGTH_SHORT);</span><br><span class=\"line\">View view &#x3D; LayoutInflater.from(mContext).inflate(R.layout.item_toast, null);</span><br><span class=\"line\">TextView textView &#x3D; view.findViewById(R.id.str_toast);</span><br><span class=\"line\">      textView.setText(str);</span><br><span class=\"line\">      toast.setView(view);</span><br><span class=\"line\">      toast.setGravity(Gravity.CENTER, 0, 0);</span><br><span class=\"line\">Utils.showTimeToast(toast,500);</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、自定义弹出时间\"><a href=\"#二、自定义弹出时间\" class=\"headerlink\" title=\"二、自定义弹出时间\"></a>二、自定义弹出时间</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">    * Toast自定义时间</span><br><span class=\"line\">    * Toast对象时间需要为Toast.LENGH_LONG</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">   public static void showTimeToast(final Toast toast, final int time) &#123;</span><br><span class=\"line\">       final Timer timer &#x3D; new Timer();</span><br><span class=\"line\">       timer.schedule(new TimerTask() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void run() &#123;</span><br><span class=\"line\">               toast.show();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;, 0, 3000);</span><br><span class=\"line\">       new Timer().schedule(new TimerTask() &#123;</span><br><span class=\"line\">           @Override</span><br><span class=\"line\">           public void run() &#123;</span><br><span class=\"line\">               toast.cancel();</span><br><span class=\"line\">               timer.cancel();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;, time);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>就是那么简单，利用Timer和schedule实现事件监听，控制toast的弹出时间。</p>\n","categories":["Android"],"tags":["Android"]},{"title":"环信easeUI的集成","url":"/2018/12/19/%E7%8E%AF%E4%BF%A1easeUI%E7%9A%84%E9%9B%86%E6%88%90/","content":"<p>关于环信easeUI的集成<br>环信的集成，网上有许多的demo，看的每个人有点眼花缭乱，对于官方的文档的吐槽也有许多，确实在集成第三方的那些玩意时，不管怎样我们必须先得看看她们的官方介绍。前段时我遇到的项目需要集成环信的聊天功能，一个会话列表和聊天界面，网上搜了很多，由于版本不一样后来还是选择结合官方的demo和开发文档写了个demo。<br>我们建议先看一下环信的官方文档，地址：<br>点击打开链接</p>\n<span id=\"more\"></span>\n<p>至于基础的集成和导入SDK我在这就不造次啦！环信官方上的文档介绍的很好，看不懂的可以看上面的视频介绍；<br>下面我直接说说我的步骤，后面也会贴上源码的地址，望大家不嫌弃，喜欢就给个 start</p>\n<p>一、首先是初始化环信easeui：</p>\n<p>  /**<br>     * 初始化环信SDK<br>     */<br>    private void initEasemob() {</p>\n<pre><code>    if (EaseUI.getInstance().init(mContext, initOptions())) &#123;\n\n        // 设置开启debug模式\n        EMClient.getInstance().setDebugMode(true);\n\n        // 设置初始化已经完成\n        isInit = true;\n    &#125;\n&#125;</code></pre>\n<p>关于sdk的一些配置初始化，请看demo源码</p>\n<p>二、登陆和注册的：</p>\n<p>登陆：</p>\n<p> /**<br>     * 登录方法<br>     */<br>    private void signIn() {<br>        final String username = mUsernameEdit.getText().toString().trim();<br>        final String password = mPasswordEdit.getText().toString().trim();<br>        if (TextUtils.isEmpty(username) || TextUtils.isEmpty(password)) {<br>            Toast.makeText(LoginRegisterActivity.this, “用户名和密码不能为空”, Toast.LENGTH_LONG).show();<br>            return;<br>        }<br>        EMClient.getInstance().login(username, password, new EMCallBack() {<br>            /**<br>             * 登陆成功的回调<br>             */<br>            @Override<br>            public void onSuccess() {<br>                mDialog.dismiss();<br>                Message msg=new Message();<br>                msg.what=2;<br>                mHandler.sendMessage(msg);<br>                // 加载所有会话到内存<br>                EMClient.getInstance().chatManager().loadAllConversations();<br>                // 登录成功跳转界面<br>                Intent intent = new Intent(LoginRegisterActivity.this, MainActivity.class);<br>                intent.putExtra(“userName”,username);<br>                startActivity(intent);<br>                finish();<br>            }</p>\n<pre><code>        /**\n         * 登陆错误的回调\n         * @param i\n         * @param s\n         */\n        @Override\n        public void onError(final int i, final String s) &#123;\n            runOnUiThread(new Runnable() &#123;\n                @Override\n                public void run() &#123;\n                    mDialog.dismiss();\n                    Log.d(&quot;lzan13&quot;, &quot;登录失败 Error code:&quot; + i + &quot;, message:&quot; + s);\n                    /**\n                     * 关于错误码可以参考官方api详细说明\n                     * http://www.easemob.com/apidoc/android/chat3.0/classcom_1_1hyphenate_1_1_e_m_error.html\n                     */\n                    switch (i) &#123;\n                    // 网络异常 2\n                    case EMError.NETWORK_ERROR:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;网络错误 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 无效的用户名 101\n                    case EMError.INVALID_USER_NAME:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;无效的用户名 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 无效的密码 102\n                    case EMError.INVALID_PASSWORD:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;无效的密码 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 用户认证失败，用户名或密码错误 202\n                    case EMError.USER_AUTHENTICATION_FAILED:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;用户认证失败，用户名或密码错误 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 用户不存在 204\n                    case EMError.USER_NOT_FOUND:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;用户不存在 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 无法访问到服务器 300\n                    case EMError.SERVER_NOT_REACHABLE:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;无法访问到服务器 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 等待服务器响应超时 301\n                    case EMError.SERVER_TIMEOUT:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;等待服务器响应超时 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 服务器繁忙 302\n                    case EMError.SERVER_BUSY:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;服务器繁忙 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    // 未知 Server 异常 303 一般断网会出现这个错误\n                    case EMError.SERVER_UNKNOWN_ERROR:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;未知的服务器异常 code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    default:\n                        Toast.makeText(LoginRegisterActivity.this, &quot;ml_sign_in_failed code: &quot; + i + &quot;, message:&quot; + s, Toast.LENGTH_LONG).show();\n                        break;\n                    &#125;\n                &#125;\n            &#125;);\n        &#125;\n\n        @Override\n        public void onProgress(int i, String s) &#123;\n            mDialog.show(LoginRegisterActivity.this,&quot;登录&quot;, &quot;正在登录中&quot;);\n        &#125;\n    &#125;);\n&#125;</code></pre>\n<p>注册：</p>\n<p>private void signUp() {<br>    // 注册是耗时过程，所以要显示一个dialog来提示下用户<br>    mDialog.setMessage(“注册中，请稍后…”);<br>    mDialog.show();<br>    new Thread(new Runnable() {<br>        @Override<br>        public void run() {<br>            try {<br>                String username = mUsernameEdit.getText().toString().trim();<br>                String password = mPasswordEdit.getText().toString().trim();<br>                EMClient.getInstance().createAccount(username, password);<br>                runOnUiThread(new Runnable() {<br>                    @Override<br>                    public void run() {<br>                        if (!LoginRegisterActivity.this.isFinishing()) {<br>                            mDialog.dismiss();<br>                        }<br>                        Toast.makeText(LoginRegisterActivity.this, “注册成功”, Toast.LENGTH_LONG).show();<br>                    }<br>                });<br>            } catch (final HyphenateException e) {<br>                e.printStackTrace();<br>                runOnUiThread(new Runnable() {<br>                    @Override<br>                    public void run() {<br>                        if (!LoginRegisterActivity.this.isFinishing()) {<br>                            mDialog.dismiss();<br>                        }<br>                        /**<br>                         * 关于错误码可以参考官方api详细说明<br>                         * <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lYXNlbW9iLmNvbS9hcGlkb2MvYW5kcm9pZC9jaGF0My4wL2NsYXNzY29tXzFfMWh5cGhlbmF0ZV8xXzFfZV9tX2Vycm9yLmh0bWw=\">http://www.easemob.com/apidoc/android/chat3.0/classcom_1_1hyphenate_1_1_e_m_error.html<i class=\"fa fa-external-link-alt\"></i></span><br>                         */<br>                        int errorCode = e.getErrorCode();<br>                        String message = e.getMessage();<br>                        Log.d(“lzan13”, String.format(“sign up - errorCode:%d, errorMsg:%s”, errorCode, e.getMessage()));<br>                        switch (errorCode) {<br>                        // 网络错误<br>                        case EMError.NETWORK_ERROR:<br>                            Toast.makeText(LoginRegisterActivity.this, “网络错误 code: “ + errorCode + “, message:” + message, Toast.LENGTH_LONG).show();<br>                            break;<br>                        // 用户已存在<br>                        case EMError.USER_ALREADY_EXIST:<br>                            Toast.makeText(LoginRegisterActivity.this, “用户已存在 code: “ + errorCode + “, message:” + message, Toast.LENGTH_LONG).show();<br>                            break;<br>                        // 参数不合法，一般情况是username 使用了uuid导致，不能使用uuid注册<br>                        case EMError.USER_ILLEGAL_ARGUMENT:<br>                            Toast.makeText(LoginRegisterActivity.this, “参数不合法，一般情况是username 使用了uuid导致，不能使用uuid注册 code: “ + errorCode + “, message:” + message, Toast.LENGTH_LONG).show();<br>                            break;<br>                        // 服务器未知错误<br>                        case EMError.SERVER_UNKNOWN_ERROR:<br>                            Toast.makeText(LoginRegisterActivity.this, “服务器未知错误 code: “ + errorCode + “, message:” + message, Toast.LENGTH_LONG).show();<br>                            break;<br>                        case EMError.USER_REG_FAILED:<br>                            Toast.makeText(LoginRegisterActivity.this, “账户注册失败 code: “ + errorCode + “, message:” + message, Toast.LENGTH_LONG).show();<br>                            break;<br>                        default:<br>                            Toast.makeText(LoginRegisterActivity.this, “ml_sign_up_failed code: “ + errorCode + “, message:” + message, Toast.LENGTH_LONG).show();<br>                            break;<br>                        }<br>                    }<br>                });<br>            } catch (Exception e) {<br>                e.printStackTrace();<br>            }<br>        }<br>    }).start();<br>}</p>\n<p>三、ChatActivity聊天界面。 我用的原生</p>\n<p>   // 这里直接使用EaseUI封装好的聊天界面<br>        chatFragment = new ChatFragment();<br>        // 将参数传递给聊天界面<br>        chatFragment.setArguments(getIntent().getExtras());<br>        getSupportFragmentManager().beginTransaction().add(R.id.layout_chat, chatFragment).commit();</p>\n<p>四、会话列表</p>\n<p>   //直接用环信的会话列表<br>        conversationListFragment = new EaseConversationListFragment();<br>        conversationListFragment.setArguments(getIntent().getExtras());<br>        conversationListFragment.setConversationListItemClickListener(<br>                new EaseConversationListFragment.EaseConversationListItemClickListener() {<br>                    @Override<br>                    public void onListItemClicked(EMConversation conversation) {<br>                        startActivity(new Intent(ConversationListActivity.this, ChatActivity.class)<br>                                .putExtra(EaseConstant.EXTRA_USER_ID, conversation.conversationId()));<br>                    }</p>\n<pre><code>            &#125;);\n    getSupportFragmentManager().beginTransaction().add(R.id.ec_layout_list, conversationListFragment).commit();</code></pre>\n<p>第一次写博客 ，还望兄弟们没嫌弃，我在源码中的注释很详细<br>Demo源码链接</p>\n","categories":["Android"],"tags":["Android","第三方集成"]},{"title":"自定义控件实现（一）","url":"/2020/08/05/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<p><strong>被别人问题一愣一愣，骄傲的自己准备好好复习哈！</strong><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC82NTcyZWJlZDBkOTk=\">几乎完全使用这位大佬的<i class=\"fa fa-external-link-alt\"></i></span></p>\n<hr>\n<h3 id=\"什么是自定义控件？\"><a href=\"#什么是自定义控件？\" class=\"headerlink\" title=\"什么是自定义控件？\"></a>什么是自定义控件？</h3><p>Android中所有控件和布局的基本类都是View，自定控件就是继承View或者View的派生类，然后重写类中的内部方法。<br>通常自定义控件分为三种：<br>1、自定义View：继承View<br>2、基于现有的组件：继承View的派生类<br>3、组合的方式：自定义控件中包含了其他组件<br>下图体现了各种控件的继承关系：<br><img data-src=\"https://github.com/MarkCHYL/BLOG/blob/master/marksource/images/ax2z2-cyxgm.jpg?raw=true\"></p>\n<h3 id=\"来实践一下组合自定义控件\"><a href=\"#来实践一下组合自定义控件\" class=\"headerlink\" title=\"来实践一下组合自定义控件\"></a>来实践一下组合自定义控件</h3><p>需要实现的效果如图：<br><img data-src=\"https://github.com/MarkCHYL/BLOG/blob/master/marksource/images/avr1u-cdm3a.jpg?raw=true\"></p>\n<p><a href=\"../../public/2020/08/06/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89/index.html\">自定义控件实现（二）</a></p>\n","categories":["Android"],"tags":["Android","自定义控件"]},{"title":"安装Go语言的集成开发环境（IDE）","url":"/2023/06/29/%E5%AE%89%E8%A3%85Go%E8%AF%AD%E8%A8%80%E7%9A%84%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88IDE%EF%BC%89/","content":"<p>要安装Go语言的集成开发环境（IDE），您可以考虑安装Visual Studio Code并使用Go插件来进行Go语言开发。以下是安装和配置步骤：</p>\n<ol>\n<li><p>安装 Visual Studio Code：打开终端，运行以下命令以添加 Visual Studio Code 的官方存储库，并安装它：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install code</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span></li>\n<li><p>打开 Visual Studio Code：在终端中运行以下命令来打开 Visual Studio Code：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">code</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装 Go 插件：在 Visual Studio Code 中，点击左侧的扩展图标（四个方块组成的正方形），在搜索框中输入 “Go” 并找到 “Go” 插件。点击 “安装” 按钮安装该插件。</p>\n</li>\n<li><p>配置 Go 环境：为了在 Visual Studio Code 中正确地进行 Go 语言开发，您需要配置 Go 环境变量。打开终端，运行以下命令来编辑 <code>~/.bashrc</code> 文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">nano ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下行，根据您的 Go 安装路径进行调整：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export GOPATH&#x3D;$HOME&#x2F;go</span><br><span class=\"line\">export PATH&#x3D;$PATH:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin:$GOPATH&#x2F;bin</span><br></pre></td></tr></table></figure>\n\n<p>保存文件并关闭编辑器。然后运行以下命令使更改生效：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>验证安装：重新启动 Visual Studio Code。在左侧的侧边栏中，点击扩展图标，找到 “Go” 插件并点击设置图标（齿轮图标）。在 “Go: Gopath” 选项中，选择您的 GOPATH 目录（默认为 <code>$HOME/go</code>）。</p>\n<p>现在，您已经成功安装了 Visual Studio Code 和 Go 插件，并且可以在 Visual Studio Code 中进行 Go 语言开发。</p>\n</li>\n</ol>\n<p>请注意，Visual Studio Code是一个通用的代码编辑器，可以支持多种编程语言和框架。通过安装适当的插件，您可以扩展其功能以支持其他编程语言和工具。</p>\n","categories":["Linux"],"tags":["环境配置","go"]},{"title":"实战：基于ARouter实现登陆拦截&全局降级策略","url":"/2022/09/16/%E5%AE%9E%E6%88%98%EF%BC%9A%E5%9F%BA%E4%BA%8EARouter%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%8B%A6%E6%88%AA-%E5%85%A8%E5%B1%80%E9%99%8D%E7%BA%A7%E7%AD%96%E7%95%A5/","content":"<h2 id=\"实战：基于ARouter实现登陆拦截-amp-全局降级策略\"><a href=\"#实战：基于ARouter实现登陆拦截-amp-全局降级策略\" class=\"headerlink\" title=\"实战：基于ARouter实现登陆拦截&amp;全局降级策略\"></a>实战：基于ARouter实现登陆拦截&amp;全局降级策略</h2><ul>\n<li>需求分析</li>\n<li>成果展示</li>\n<li>疑难点分析</li>\n<li>Coding实现<h3 id=\"需求分析\"><a href=\"#需求分析\" class=\"headerlink\" title=\"需求分析\"></a>需求分析</h3></li>\n</ul>\n<hr>\n<ul>\n<li>利用ARouter拦截页面跳转，实现全局页面降级<span id=\"more\"></span>\n<h3 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h3>1、引入Arouter组件到项目中<pre><code></code></pre>\n</li>\n</ul>\n<p>android {<br>    defaultConfig {<br>        …<br>        javaCompileOptions {<br>            annotationProcessorOptions {<br>                arguments = [AROUTER_MODULE_NAME: project.getName()]<br>            }<br>        }<br>    }<br>}</p>\n<p>dependencies {<br>    // 替换成最新版本, 需要注意的是api<br>    // 要与compiler匹配使用，均使用最新版可以保证兼容<br>    compile ‘com.alibaba:arouter-api:x.x.x’<br>    annotationProcessor ‘com.alibaba:arouter-compiler:x.x.x’<br>    …<br>}<br>// 旧版本gradle插件(&lt; 2.2)，可以使用apt插件，配置方法见文末’其他#4’// Kotlin配置参考文末’其他#5’</p>\n<p>```</p>\n<h3 id=\"一、功能介绍\"><a href=\"#一、功能介绍\" class=\"headerlink\" title=\"一、功能介绍\"></a>一、功能介绍</h3><ol>\n<li>支持直接解析标准URL进行跳转，并自动注入参数到目标页面中</li>\n<li>支持多模块工程使用</li>\n<li>支持添加多个拦截器，自定义拦截顺序</li>\n<li>支持依赖注入，可单独作为依赖注入框架使用</li>\n<li>支持InstantRun</li>\n<li>支持MultiDex(Google方案)</li>\n<li>映射关系按组分类、多级管理，按需初始化</li>\n<li>支持用户指定全局降级与局部降级策略页面、拦截器、服务等组件均自动注册到框架</li>\n<li>支持多种方式配置转场动画</li>\n<li>支持获取Fragment</li>\n<li>完全支持Kotlin以及混编(配置见文末 其他#5)</li>\n<li>支持第三方 App 加固(使用 arouter-register 实现自动注册)</li>\n<li>支持生成路由文档</li>\n<li>提供 IDE 插件便捷的关联路径和目标类支持增量编译(开启文档生成后无法增量编译)</li>\n<li>支持动态注册路由信息</li>\n</ol>\n<h3 id=\"二、典型应用\"><a href=\"#二、典型应用\" class=\"headerlink\" title=\"二、典型应用\"></a>二、典型应用</h3><ol>\n<li>从外部URL映射到内部页面，以及参数传递与解析</li>\n<li>跨模块页面跳转，模块间解耦拦</li>\n<li>截跳转过程，处理登陆、埋点等逻辑</li>\n<li>跨模块API调用，通过控制反转来做组件解耦</li>\n</ol>\n","categories":["Android"],"tags":["Android","实战"]},{"title":"安卓页面跳转，多次点击会重复页面","url":"/2021/06/04/%E5%AE%89%E5%8D%93%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%EF%BC%8C%E5%A4%9A%E6%AC%A1%E7%82%B9%E5%87%BB%E4%BC%9A%E9%87%8D%E5%A4%8D%E9%A1%B5%E9%9D%A2/","content":"<p>场景描述：产品故意整事，狂点一个页面跳转按钮，然而那个页面的展示时需要初始化一个第三方的SDK，导致一个启动模式为 <code> android:launchMode=&quot;singleTop&quot;</code>的页面Activity重复新建了多次。</p>\n<h3 id=\"1、解决思路查看源码：startActivity-intent\"><a href=\"#1、解决思路查看源码：startActivity-intent\" class=\"headerlink\" title=\"1、解决思路查看源码：startActivity(intent);\"></a>1、解决思路查看源码：<code>startActivity(intent);</code></h3><span id=\"more\"></span>\n<p>发现是调用了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">   public void startActivity(Intent intent, @Nullable Bundle options) &#123;</span><br><span class=\"line\">       if (options !&#x3D; null) &#123;</span><br><span class=\"line\">           startActivityForResult(intent, -1, options);</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           &#x2F;&#x2F; Note we want to go through this call for compatibility with</span><br><span class=\"line\">           &#x2F;&#x2F; applications that may have overridden the method.</span><br><span class=\"line\">           startActivityForResult(intent, -1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说我这边只要重写 <code>startActivityForResult()</code>方法就好</p>\n<h3 id=\"2、重写-startActivityForResult\"><a href=\"#2、重写-startActivityForResult\" class=\"headerlink\" title=\"2、重写 startActivityForResult()\"></a>2、重写 <code>startActivityForResult()</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">    * 每次启动activity都会调用此方法</span><br><span class=\"line\">    *&#x2F;</span><br><span class=\"line\">   @SuppressLint(&quot;RestrictedApi&quot;)</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">   public void startActivityForResult(Intent intent, int requestCode, @Nullable Bundle options) &#123;</span><br><span class=\"line\">       if (!isFastClick()) &#123;</span><br><span class=\"line\">           super.startActivityForResult(intent, requestCode, options);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>可能注意到了<code>if (!isFastClick()) &#123;&#125;</code>,就是在这做判断</p>\n<h3 id=\"3、判断是否快速点击-isFastClick\"><a href=\"#3、判断是否快速点击-isFastClick\" class=\"headerlink\" title=\"3、判断是否快速点击 isFastClick()\"></a>3、判断是否快速点击 <code>isFastClick()</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">   * 检查是否重复跳转，不需要则重写方法并返回true</span><br><span class=\"line\">   *&#x2F;</span><br><span class=\"line\">  &#x2F;&#x2F; 两次点击间隔不能少于1000ms</span><br><span class=\"line\">  private static final int FAST_CLICK_DELAY_TIME &#x3D; 1000;</span><br><span class=\"line\">  private static long lastClickTime;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static boolean isFastClick() &#123;</span><br><span class=\"line\">      boolean flag &#x3D; true;</span><br><span class=\"line\">      long currentClickTime &#x3D; System.currentTimeMillis();</span><br><span class=\"line\">      if ((currentClickTime - lastClickTime) &gt;&#x3D; FAST_CLICK_DELAY_TIME ) &#123;</span><br><span class=\"line\">          flag &#x3D; false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      lastClickTime &#x3D; currentClickTime;</span><br><span class=\"line\">      return flag;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":["bug"]},{"title":"自定义控件实现（二）","url":"/2020/08/06/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89/","content":"","categories":["Android"],"tags":["Android","自定义控件"]},{"title":"自定义日历控件","url":"/2018/12/19/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%8E%86%E6%8E%A7%E4%BB%B6/","content":"<h3 id=\"这里主要记录下控件自定义的步骤\"><a href=\"#这里主要记录下控件自定义的步骤\" class=\"headerlink\" title=\"这里主要记录下控件自定义的步骤\"></a>这里主要记录下控件自定义的步骤</h3><p><img data-src=\"../assests/img/MarkCalendar.jpg\"></p>\n<span id=\"more\"></span>\n<h3 id=\"一、自定义控价大致分类：\"><a href=\"#一、自定义控价大致分类：\" class=\"headerlink\" title=\"一、自定义控价大致分类：\"></a>一、自定义控价大致分类：</h3><p>·集成系统控件<br>·组合系统控件<br>·自定义绘制控件</p>\n<h3 id=\"二、添加Attribute\"><a href=\"#二、添加Attribute\" class=\"headerlink\" title=\"二、添加Attribute\"></a>二、添加Attribute</h3><p>在res/value下新建attrs.xml文件，自定义需要声明的属性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;declare-styleable name&#x3D;&quot;MarkCalendar&quot;&gt;</span><br><span class=\"line\">       &lt;attr name&#x3D;&quot;dateFormat&quot; format&#x3D;&quot;string&quot;&#x2F;&gt;</span><br><span class=\"line\">   &lt;&#x2F;declare-styleable&gt;</span><br></pre></td></tr></table></figure>\n<p>然后在自定义控件中，初始化的时候进行声明：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;声明自定义属性</span><br><span class=\"line\">TypedArray ta &#x3D; getContext().obtainStyledAttributes(attrs, R.styleable.MarkCalendar);</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            String format &#x3D; ta.getString(R.styleable.MarkCalendar_dateFormat);</span><br><span class=\"line\">            disPlayFormat &#x3D; format;</span><br><span class=\"line\">            if (disPlayFormat &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                disPlayFormat &#x3D; &quot;MMM yyyy&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            ta.recycle();</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>记住声明完后一定要回收  ta.recycle()。</p>\n<h3 id=\"三、添加事件\"><a href=\"#三、添加事件\" class=\"headerlink\" title=\"三、添加事件\"></a>三、添加事件</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;**</span><br><span class=\"line\">  * 添加点击事件</span><br><span class=\"line\">  *&#x2F;</span><br><span class=\"line\"> public interface MarkClendarListener&#123;</span><br><span class=\"line\">     void onItemLongPress(Date day);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>然后初始化调用： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">public MarkClendarListener markClendarListener;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gvDays.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public boolean onItemLongClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</span><br><span class=\"line\">                if (markClendarListener &#x3D;&#x3D; null) &#123;</span><br><span class=\"line\">                    return false;</span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\">                    markClendarListener.onItemLongPress((Date) parent.getItemAtPosition(position));</span><br><span class=\"line\">                    return true;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>最后activity中调用：<br>实现MarkClendarListener接口，并实现其方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"> MarkCalendar markcalendar &#x3D; findViewById(R.id.markcalendar);</span><br><span class=\"line\">    markcalendar.markClendarListener &#x3D; this;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onItemLongPress(Date day) &#123;</span><br><span class=\"line\">    DateFormat df &#x3D; SimpleDateFormat.getDateInstance();</span><br><span class=\"line\">    Toast.makeText(this,df.format(day),Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Demo链接\"><a href=\"#Demo链接\" class=\"headerlink\" title=\"\bDemo\b链接\"></a>\b<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL01hcmtDSFlML01hcmtDdXN0b21DYWxlbmRhcg==\">Demo\b链接<i class=\"fa fa-external-link-alt\"></i></span></h3>","categories":["Android"],"tags":["Android","自定义控件"]},{"title":"网络状态自定义组件---自定义控件","url":"/2024/07/11/%E7%BD%91%E7%BB%9C%E7%8A%B6%E6%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/","content":"<p>特点：独立性 + 可移植性<br>所有的逻辑都在这个控件中，直接在布局中添加就可以<br>技术点：协程CoroutineScope + 生命感知LifecycleOwner</p>\n<p>直接贴代码</p>\n<span id=\"more\"></span>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.res.ColorStateList</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.FrameLayout</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.widget.AppCompatTextView</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.core.content.ContextCompat</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.Lifecycle</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.LifecycleObserver</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.LifecycleOwner</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.lifecycle.OnLifecycleEvent</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yunda.android.framework.ui.YDLibApplication</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yunda.transportapp.base.BuildConfig</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.yunda.transportapp.base.R</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.CoroutineScope</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.Dispatchers</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.Job</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.SupervisorJob</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.delay</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.isActive</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.launch</span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.coroutines.withContext</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkStatusView</span> <span class=\"meta\">@JvmOverloads</span> <span class=\"keyword\">constructor</span></span>(</span><br><span class=\"line\">    context: Context, attrs: AttributeSet? = <span class=\"literal\">null</span>, defStyleAttr: <span class=\"built_in\">Int</span> = <span class=\"number\">0</span></span><br><span class=\"line\">) : FrameLayout(context, attrs, defStyleAttr), LifecycleObserver &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> statusTextView: AppCompatTextView</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> coroutineScope = CoroutineScope(Dispatchers.IO + SupervisorJob())</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">var</span> monitoringJob: Job? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">enum</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NetworkStatus</span> </span>&#123;</span><br><span class=\"line\">        NO_NETWORK, BAD_NETWORK, WEAK_NETWORK, AVERAGE_NETWORK, GOOD_NETWORK</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> view = LayoutInflater.from(context).inflate(R.layout.network_status_view, <span class=\"keyword\">this</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        statusTextView = view.findViewById(R.id.statusTextView)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (context <span class=\"keyword\">is</span> LifecycleOwner) &#123;</span><br><span class=\"line\">            (context <span class=\"keyword\">as</span> LifecycleOwner).lifecycle.addObserver(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateStatus</span><span class=\"params\">(newStatus: <span class=\"type\">NetworkStatus</span>)</span></span> &#123;</span><br><span class=\"line\">        withContext(Dispatchers.Main)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">when</span> (newStatus) &#123;</span><br><span class=\"line\">                NetworkStatus.NO_NETWORK -&gt; &#123;</span><br><span class=\"line\">                    updateNetworkUI(</span><br><span class=\"line\">                        <span class=\"string\">&quot;当前无法链接网络，请检查网络设置是否正常。&quot;</span>, <span class=\"string\">&quot;#EC4444&quot;</span>,</span><br><span class=\"line\">                        R.drawable.icon_net_fail</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                NetworkStatus.BAD_NETWORK -&gt; &#123;</span><br><span class=\"line\">                    updateNetworkUI(</span><br><span class=\"line\">                        <span class=\"string\">&quot;当前网络状态极差，请检查网络设置是否正常。&quot;</span>, <span class=\"string\">&quot;#EC4444&quot;</span>,</span><br><span class=\"line\">                        R.drawable.icon_net_fail</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                NetworkStatus.WEAK_NETWORK -&gt; &#123;</span><br><span class=\"line\">                    updateNetworkUI(</span><br><span class=\"line\">                        <span class=\"string\">&quot;当前网络状态较差，请小心驾驶。&quot;</span>, <span class=\"string\">&quot;#F68B28&quot;</span>,</span><br><span class=\"line\">                        R.drawable.icon_net_moderate</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                NetworkStatus.AVERAGE_NETWORK -&gt; &#123;</span><br><span class=\"line\">                    updateNetworkUI(</span><br><span class=\"line\">                        <span class=\"string\">&quot;当前网络状态良好，请小心驾驶。&quot;</span>, <span class=\"string\">&quot;#14C97D&quot;</span>,</span><br><span class=\"line\">                        R.drawable.icon_net_good</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                NetworkStatus.GOOD_NETWORK -&gt; &#123;</span><br><span class=\"line\">                    updateNetworkUI(</span><br><span class=\"line\">                        <span class=\"string\">&quot;当前网络状态极好，请小心驾驶。&quot;</span>, <span class=\"string\">&quot;#3976F3&quot;</span>,</span><br><span class=\"line\">                        R.drawable.icon_net_ok</span><br><span class=\"line\">                    )</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">updateNetworkUI</span><span class=\"params\">(descStr: <span class=\"type\">String</span>, colorBg: <span class=\"type\">String</span>, iconResId: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            with(statusTextView) &#123;</span><br><span class=\"line\">                text = descStr</span><br><span class=\"line\">                setCompoundDrawablesWithIntrinsicBounds(</span><br><span class=\"line\">                    ContextCompat.getDrawable(YDLibApplication.INSTANCE, iconResId),</span><br><span class=\"line\">                    <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    <span class=\"literal\">null</span>,</span><br><span class=\"line\">                    <span class=\"literal\">null</span></span><br><span class=\"line\">                )</span><br><span class=\"line\">                backgroundTintList = ColorStateList.valueOf(Color.parseColor(colorBg))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">            e.printStackTrace()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">suspend</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">checkNetworkSpeed</span><span class=\"params\">()</span></span>: NetworkStatus &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> withContext(Dispatchers.IO) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> process = Runtime.getRuntime().exec(<span class=\"string\">&quot;ping -c 1 www.baidu.com&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> reader = BufferedReader(InputStreamReader(process.inputStream))</span><br><span class=\"line\">                <span class=\"keyword\">val</span> output = reader.readLines()</span><br><span class=\"line\">                reader.close()</span><br><span class=\"line\">                <span class=\"keyword\">val</span> timeLine = output.find &#123; it.contains(<span class=\"string\">&quot;time=&quot;</span>) &#125;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> timeValue =</span><br><span class=\"line\">                    timeLine?.substringAfter(<span class=\"string\">&quot;time=&quot;</span>)?.substringBefore(<span class=\"string\">&quot; ms&quot;</span>)?.toDoubleOrNull()</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class=\"line\">                    println(<span class=\"string\">&quot;Ping time: <span class=\"variable\">$timeValue</span> ms&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">when</span> &#123;</span><br><span class=\"line\">                    timeValue == <span class=\"literal\">null</span> -&gt; NetworkStatus.NO_NETWORK</span><br><span class=\"line\">                    timeValue &gt;= <span class=\"number\">0</span> &amp;&amp; timeValue &lt; <span class=\"number\">100</span> -&gt; NetworkStatus.GOOD_NETWORK</span><br><span class=\"line\">                    timeValue &gt;= <span class=\"number\">100</span> &amp;&amp; timeValue &lt; <span class=\"number\">200</span> -&gt; NetworkStatus.AVERAGE_NETWORK</span><br><span class=\"line\">                    timeValue &gt;= <span class=\"number\">200</span> &amp;&amp; timeValue &lt; <span class=\"number\">600</span> -&gt; NetworkStatus.WEAK_NETWORK</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> -&gt; NetworkStatus.BAD_NETWORK</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                e.printStackTrace()</span><br><span class=\"line\">                NetworkStatus.NO_NETWORK</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">startMonitoring</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        monitoringJob = coroutineScope.launch &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (isActive) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> status = checkNetworkSpeed()</span><br><span class=\"line\">                updateStatus(status)</span><br><span class=\"line\">                delay(<span class=\"number\">5000</span>) <span class=\"comment\">// 每5秒检查一次网络状态</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">stopMonitoring</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        monitoringJob?.cancel()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["Android"],"tags":["自定义View"]},{"title":"防止页面重绘制，实现AutomaticKeepAliveClientMixin","url":"/2019/07/10/%E9%98%B2%E6%AD%A2%E9%A1%B5%E9%9D%A2%E9%87%8D%E7%BB%98%E5%88%B6%EF%BC%8C%E5%AE%9E%E7%8E%B0AutomaticKeepAliveClientMixin/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zNDMyMDE1OS9hcnRpY2xlL2RldGFpbHMvODc1NjYxMTY=\">原文<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY29sYWJ1Zy5jb20vMzE2MjgzNS5odG1s\">https://www.colabug.com/3162835.html<i class=\"fa fa-external-link-alt\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTMwMTE2ODYvZmx1dHRlci1hdXRvbWF0aWNrZWVwYWxpdmVjbGllbnRtaXhpbi1pcy1ub3Qtd29ya2luZy13aXRoLWJvdHRvbW5hdmlnYXRpb25iYXI2MjgzNS5odG1s\">https://stackoverflow.com/questions/53011686/flutter-automatickeepaliveclientmixin-is-not-working-with-bottomnavigationbar62835.html<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><em>Flutter切换tab后保留tab状态 概述 Flutter中为了节约内存不会保存widget的状态,widget都是临时变量。当我们使用TabBar,TabBarView是我们就会发现,切换tab，initState又会被调用一次。<br>怎么为了让tab一直保存在内存中，不被销毁？<br>添加AutomaticKeepAliveClientMixin，并设置为true,这样就能一直保持当前不被initState了。</em><br> <span id=\"more\"></span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">class TicketListViewState extends State&lt;TicketListView&gt;</span><br><span class=\"line\">    with AutomaticKeepAliveClientMixin &#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  void initState() &#123;</span><br><span class=\"line\">    super.initState();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    super.build(context);</span><br><span class=\"line\">    return new SmartRefresher(</span><br><span class=\"line\">        enablePullDown: true,</span><br><span class=\"line\">        enablePullUp: true,</span><br><span class=\"line\">        onRefresh: _onRefresh,</span><br><span class=\"line\">        controller: refreshController,</span><br><span class=\"line\">        child: ListView.builder(</span><br><span class=\"line\">          itemCount: _result.length,</span><br><span class=\"line\">          itemBuilder: (context, index) &#123;</span><br><span class=\"line\">            return getItem(_result[index]);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;不会被销毁,占内存中</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  bool get wantKeepAlive &#x3D;&gt; true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>如果不起作用:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@override</span><br><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">  super.build(context);&#x2F;&#x2F;必须添加</span><br><span class=\"line\"> .....</span><br><span class=\"line\">      ));</span><br></pre></td></tr></table></figure>\n<p>官方解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;&#x2F; A mixin with convenience methods for clients of [AutomaticKeepAlive]. Used</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; with [State] subclasses.</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; Subclasses must implement [wantKeepAlive], and their [build] methods must</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; call &#96;super.build&#96; (the return value will always return null, and should be</span><br><span class=\"line\">&#x2F;&#x2F;&#x2F; ignored).</span><br></pre></td></tr></table></figure>","categories":["Flutter"],"tags":["Flutter","Flutter问题"]},{"title":"阿里、腾讯、百度、华为、京东、搜狗和滴滴最新面试题汇集","url":"/2020/09/03/%E9%98%BF%E9%87%8C%E3%80%81%E8%85%BE%E8%AE%AF%E3%80%81%E7%99%BE%E5%BA%A6%E3%80%81%E5%8D%8E%E4%B8%BA%E3%80%81%E4%BA%AC%E4%B8%9C%E3%80%81%E6%90%9C%E7%8B%97%E5%92%8C%E6%BB%B4%E6%BB%B4%E6%9C%80%E6%96%B0%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E9%9B%86/","content":"<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSU4zMEdjMW8yM2ZKOHdZRXBwOEFNUQ==\">原文链接  程序员小乐<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>以下是（2016、2017 、阿里、腾讯、百度、华为、京东、搜狗和滴滴面试题汇集）</p>\n<h2 id=\"Android基础\"><a href=\"#Android基础\" class=\"headerlink\" title=\"Android基础\"></a>Android基础</h2><h3 id=\"1、什么是ANR-如何避免它？\"><a href=\"#1、什么是ANR-如何避免它？\" class=\"headerlink\" title=\"1、什么是ANR 如何避免它？\"></a>1、什么是ANR 如何避免它？</h3><p>ANR 就是一个无响应的对话框,主要原因就是在主线程做了耗时操作。</p>\n<blockquote>\n<p>全称为Application Not Responding。在Android 中，如果你的应用程序有一段时间没有响应，系统会向用户显示一个对话框，这个对话框称作应用程序无响应对话框。<br>不同的组件发生ANR 的时间不一样，</p>\n</blockquote>\n<ul>\n<li>主线程（Activity）是5 秒;</li>\n<li>BroadCastReceiver 是10 秒;</li>\n<li>Service：20 秒（均为前台）,Service 在20 秒内无法处理完成。</li>\n</ul>\n<p><strong>解决方案：</strong></p>\n<ul>\n<li>将所有耗时操作，比如访问网络，Socket 通信，查询大量SQL 语句，复杂逻辑计算等都放在子线程中去，然后通过handler.sendMessage、runonUITread、AsyncTask 等方式更新UI，以确保用户界面操作的流畅度.</li>\n<li>如果耗时操作需要让用户等待，那么可以在界面上显示进度条。</li>\n<li>避免在activity里面做耗时操作，oncreate &amp; onresume</li>\n<li>避免在onReceiver里面做过多操作</li>\n<li>避免在Intent Receiver里启动一个Activity，因为它会创建一个新的画面，并从当前用户正在运行的程序上抢夺焦点。</li>\n</ul>\n<h3 id=\"2、View的绘制流程；自定义View如何考虑机型适配；自定义View的事件\"><a href=\"#2、View的绘制流程；自定义View如何考虑机型适配；自定义View的事件\" class=\"headerlink\" title=\"2、View的绘制流程；自定义View如何考虑机型适配；自定义View的事件\"></a>2、View的绘制流程；自定义View如何考虑机型适配；自定义View的事件</h3><blockquote>\n<p>View的绘制流程：OnMeasure()——&gt;OnLayout()——&gt;OnDraw()<br>组合控件、继承原有的控件、继承原有的控件</p>\n</blockquote>\n<ul>\n<li>第一步：OnMeasure()：测量视图大小。从顶层父View到子View递归调用measure方法，measure方法又回调OnMeasure。</li>\n<li>第二步：OnLayout()：确定View位置，进行页面布局。从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。</li>\n<li>第三步：OnDraw()：绘制视图。ViewRoot创建一个Canvas对象，然后调用OnDraw()。六个步骤：绘制视图的背景、保存画布的图层(Layer)、绘制View的内容、绘制View子视图、还原图层(Layer)、绘制滚动条（如果没有就不用）;</li>\n</ul>\n<h3 id=\"3、分发机制；View和ViewGroup分别有哪些事件分发相关的回调方法；自定义View如何提供获取View属性的接口；\"><a href=\"#3、分发机制；View和ViewGroup分别有哪些事件分发相关的回调方法；自定义View如何提供获取View属性的接口；\" class=\"headerlink\" title=\"3、分发机制；View和ViewGroup分别有哪些事件分发相关的回调方法；自定义View如何提供获取View属性的接口；\"></a>3、分发机制；View和ViewGroup分别有哪些事件分发相关的回调方法；自定义View如何提供获取View属性的接口；</h3><blockquote>\n<p>基本会遵从 Activity =&gt; ViewGroup =&gt; View 的顺序进行事件分发，然后通过调用 onTouchEvent() 方法进行事件的处理。我们在项目中一般会对 MotionEvent.ACTION_DOWN，MotionEvent.ACTION_UP，MotionEvent.ACTION_MOVE，MotionEvent.ACTION_CANCEL 分情况进行操作。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>4、Art和Dalvik对比；虚拟机原理，如何自己设计一个虚拟机(内存管理，类加载，双亲委派)；JVM内存模型及类加载机制；内存对象的循环引用及避免；</p>\n<h3 id=\"4、ddms-和-traceView；\"><a href=\"#4、ddms-和-traceView；\" class=\"headerlink\" title=\"4、ddms 和 traceView；\"></a>4、ddms 和 traceView；</h3><ul>\n<li><p>1， ddms：是android开发环境中的dalvik虚拟机调试监控服务；<br>ddms能够提供，测试设备截屏，针对特定的进程查看正在运行的线程以及堆信息，Logcat，广播状态信息，模拟电话呼叫，接收sms，虚拟地理坐标等。</p>\n</li>\n<li><p>2，traceView是android平台配备的性能分析的工具；它可以通过图形化让我们了解要跟踪的程序的性能，并且能具体到方法。</p>\n</li>\n</ul>\n<p>区别：ddms是一个程序执行查看器，在里面可以看见线程和堆栈等信息，traceView是程序性能分析器。</p>\n<h3 id=\"5、内存回收机制与GC算法-各种算法的优缺点以及应用场景-；GC原理时机以及GC对象；内存泄露场景及解决方法；\"><a href=\"#5、内存回收机制与GC算法-各种算法的优缺点以及应用场景-；GC原理时机以及GC对象；内存泄露场景及解决方法；\" class=\"headerlink\" title=\"5、内存回收机制与GC算法(各种算法的优缺点以及应用场景)；GC原理时机以及GC对象；内存泄露场景及解决方法；\"></a>5、内存回收机制与GC算法(各种算法的优缺点以及应用场景)；GC原理时机以及GC对象；内存泄露场景及解决方法；</h3><p>gc是java的垃圾回收机制</p>\n<p>引用计数法（Reference Counting Collector）:使用计数器来区分存活对象和不再使用的对象。一般来说，堆中的每个对象对应一个引用计数器。当每一次创建一个对象并赋给一个变量时，引用计数器置为1。当对象被赋给任意变量时，引用计数器每次加1当对象出了作用域后(该对象丢弃不再使用)，引用计数器减1，一旦引用计数器为0，对象就满足了垃圾收集的条件。</p>\n<p>标记算法（Tracing Collector):使用了根集的概念，基于tracing算法的垃圾收集器从根集开始扫描，识别出哪些对象可达，哪些对象不可达，并用某种方式标记可达对象。</p>\n<p>整理算法（Compacting Collecotr）：该算法会将所有的对象移到堆的一端。能解决堆碎片的问题。</p>\n<p>复制算法：将内存分为两个区域（from space 和 to space）。所有的对象都分配到from space。清理时先将所有标为活动对象copy到to space，然后清除from space空间。然后互换from space和to apce的身份，每次清理都重复上述过程。<br>gc收集器：</p>\n<p>serial收集器：单线程，工作时必须暂停其他工作线程，多用于client机器上，使用复制算法。</p>\n<p>ParNew收集器：serial的多线程版本，server模式下jvm首选的新生代收集器。复制算法。</p>\n<p>Parallel Scavenge收集器：可控制吞吐量的收集器，吞吐量指有效运行时间。复制算法。</p>\n<p>Serial Old收集器：serial的老年代版本，使用整理算法。</p>\n<p>Parallel Old收集器：Parallel Scavenge收集器的老版本，多线程，标记整理。</p>\n<p>CMS收集器：整理算法。最短回收停顿时间，缺点是产生碎片。</p>\n<p>GI收集器：基本思想是化整为零，将堆分为多个Region，优先回收价值最大的Region。并行并发，分代收集，空间整合。整理算法。</p>\n<p>6、四大组件及生命周期；ContentProvider的权限管理(读写分离，权限控制-精确到表级，URL控制)；Activity的四种启动模式对比；Activity状态保存于恢复；</p>\n<h3 id=\"7、什么是AIDL-以及如何使用；\"><a href=\"#7、什么是AIDL-以及如何使用；\" class=\"headerlink\" title=\"7、什么是AIDL 以及如何使用；\"></a>7、什么是AIDL 以及如何使用；</h3><blockquote>\n<p>AIDL是Android Interface Definition Language的简写，即Android接口定义语言。<br>当一个应用想要访问另一个应用的数据或调用其方法，就要用到Android系统提供的IPC机制。而AIDL就是Android实现IPC机制的方式之一。<br>AIDL是使用bind机制来工作。<br>AIDL:android interface definition language的缩写。<br>AIDL是用来实现进程间通信的，可以帮我们实现发布以及调用远程服务。<br>使用：<br>1）服务端：创建一个Service用来监听客户端的连接请求，然后创建一个AIDL文件，将服务端暴露给客户端的接口在这个文件中声明，最后在Service中实现这个AIDL接口。<br>2）客户端：首先绑定服务端的Service，绑定成功后将服务端返回的Binder对象转成AIDL接口所属的类型，接着就可以调用AIDL中的方法。</p>\n</blockquote>\n<h3 id=\"8、请解释下在单线程模型中Message、Handler、Message-Queue、Looper之间的关系；\"><a href=\"#8、请解释下在单线程模型中Message、Handler、Message-Queue、Looper之间的关系；\" class=\"headerlink\" title=\"8、请解释下在单线程模型中Message、Handler、Message Queue、Looper之间的关系；\"></a>8、请解释下在单线程模型中Message、Handler、Message Queue、Looper之间的关系；</h3><blockquote>\n<p>简单的说，Handler 获取当前线程中的 Looper 对象，Looper 用来从存放 Message 的MessageQueue 中取出 Message，再交由 Handler 进行 Message 的分发和处理。</p>\n</blockquote>\n<p>9、Fragment生命周期；Fragment状态保存startActivityForResult是哪个类的方法，在什么情况下使用，如果在Adapter中使用应该如何解耦；</p>\n<p>10、AsyncTask原理及不足；intentService原理；</p>\n<h3 id=\"11、Activity-怎么和Service-绑定，怎么在Activity-中启动自己对应的Service；\"><a href=\"#11、Activity-怎么和Service-绑定，怎么在Activity-中启动自己对应的Service；\" class=\"headerlink\" title=\"11、Activity 怎么和Service 绑定，怎么在Activity 中启动自己对应的Service；\"></a>11、Activity 怎么和Service 绑定，怎么在Activity 中启动自己对应的Service；</h3><blockquote>\n<p>Activity 通过 bindService(Intent service, ServiceConnection conn, int flags)跟 Service 进行绑定，当绑定成功的时候 Service 会将代理对象通过回调的形式传给 conn，这样我们就拿到了 Service 提供的服务代理对象。<br>在 Activity 中可以通过 startService 和 bindService 方法启动 Service。</p>\n</blockquote>\n<blockquote>\n<p>一般情况下如果想获取 Service 的服务对象那么肯定需要通过bindService（）方法，比如音乐播放器，第三方支付等。如果仅仅只是为了开启一个后台任务那么可以使用 startService（）方法。</p>\n</blockquote>\n<h3 id=\"12、请描述一下Service-的生命周期；\"><a href=\"#12、请描述一下Service-的生命周期；\" class=\"headerlink\" title=\"12、请描述一下Service 的生命周期；\"></a>12、请描述一下Service 的生命周期；</h3><blockquote>\n<p>启动Service时可调用startService和bindService()方法来启动，用这两种方法启动的Service的生命周期是不同的。</p>\n</blockquote>\n<p>启动服务的生命周期 onCreate-&gt;onStartCommand()-&gt;onDestroy()<br>绑定服务的生命周期 onCreate()-&gt;onBind()-&gt;onUnBind()-&gt;onDestroy()<br>途径一：<br>调用Context.startService()启动Service，调用Context.stopService()或Service.stopSelf()或Service.stopSelfResult()关闭Service的调用。<br>生命周期顺序为：onCreate()-&gt;onStart()-&gt;onDestroy()</p>\n<p>途径二：<br>调用Context.bindService()进行初始化绑定，使用Context.unbindService()取消绑定，由于Service和Context是绑定关系，当Context退出或被销毁时，Service也会相应退出。<br>生命周期顺序为：onCreate-&gt;onBind(只一次，不可多次绑定)-&gt;onUnbind-&gt;onDestroy()</p>\n<p>BroadcastReceiver只能通过startService启动Service，因为广播本身生命周期很短，bind的话没有意义,通过bindService创建的服务（但仍然通过bindService得到了服务对象），就可能unbindService后还在运行，否则应该是结束掉了。</p>\n<p>13、AstncTask+HttpClient与AsyncHttpClient有什么区别；</p>\n<h3 id=\"14、如何保证一个后台服务不被杀死；比较省电的方式是什么；\"><a href=\"#14、如何保证一个后台服务不被杀死；比较省电的方式是什么；\" class=\"headerlink\" title=\"14、如何保证一个后台服务不被杀死；比较省电的方式是什么；\"></a>14、如何保证一个后台服务不被杀死；比较省电的方式是什么；</h3><p>Android中通过Service实现后台任务。</p>\n<ul>\n<li><p>方法一：<br>通过将Service绑定到Notification，成为一个前提服务，可以提高存活率<br>在Service中创建一个Notification，再调用Service.startForeground(int id,Notification notification)方法运行在前台即可。这个方式使用360等如阿健管家可以杀死。</p>\n</li>\n<li><p>方法二：<br>通过定时警报来不断启动Service，这样就算Service被杀死，也能再启动。同时也可以监听网络切换，开锁屏等广播启动Service。<br>参考：<br>Intent intent = new Intent（mContext，MyService.class）；<br>PendingIntent sender = PendingIntent.getService(mContext,0,intent,0);<br>AlarmManager alarm = (AlarmManager)getSystemService(ALARM_SERVICE);<br>alarm.setRepeating(AlarmManager.RTC_WAKEUP,System.currentTimeMillis(),5*10000,sender);<br>这种方式不断启动的逻辑处理起来很麻烦。</p>\n</li>\n<li><p>方法三：<br>通过jni调用c，在c语音中启动一个进程fork（）。 可以保证360等手机管家不会清理。但是带来了jni交互，稍微有点麻烦。</p>\n</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy52b2lkY24uY29tL2FydGljbGUvcC12YXF5d2tlYy1nby5odG1s\">android如何保证service不被杀死<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p>15、如何通过广播拦截和abort一条短信；广播是否可以请求网络；广播引起anr的时间限制；</p>\n<p>16、进程间通信，AIDL；</p>\n<h3 id=\"17、事件分发中的onTouch-和onTouchEvent-有什么区别，又该如何使用？\"><a href=\"#17、事件分发中的onTouch-和onTouchEvent-有什么区别，又该如何使用？\" class=\"headerlink\" title=\"17、事件分发中的onTouch 和onTouchEvent 有什么区别，又该如何使用？\"></a>17、事件分发中的onTouch 和onTouchEvent 有什么区别，又该如何使用？</h3><p><strong>区别：</strong></p>\n<blockquote>\n<p>onTouch方法优先级比onTouchEvent高，会先触发。假如onTouch方法返回false，会接着触发onTouchEvent，反之onTouchEvent方法不会被调用。内置诸如click事件的实现等等都基于onTouchEvent，假如onTouch返回true，这些事件将不会被触发。</p>\n</blockquote>\n<p><strong>使用：</strong></p>\n<ul>\n<li>1、onTouch()方法：<blockquote>\n<p>onTouch方式是View的OnTouchListener接口中定义的方法。当一个View绑定了OnTouchListener后，当有Touch事件触发时，就会调用onTouch方法。</p>\n</blockquote>\n</li>\n<li>2、onTouchEvent()方法：<blockquote>\n<p>onTouchEvent方法时重载的Activity的方法 重写了Acitivity的onTouchEvent方法后，当屏幕有Touch事件时，此方法就会被调用。</p>\n</blockquote>\n</li>\n</ul>\n<p>18、说说ContentProvider、ContentResolver、ContentObserver 之间的关系；</p>\n<h3 id=\"19、请介绍下ContentProvider-是如何实现数据共享的；\"><a href=\"#19、请介绍下ContentProvider-是如何实现数据共享的；\" class=\"headerlink\" title=\"19、请介绍下ContentProvider 是如何实现数据共享的；\"></a>19、请介绍下ContentProvider 是如何实现数据共享的；</h3><p>Android提供了ContentProvider，一个程序可以通过实现一个ContentProvider的抽象接口将自己的数据完全暴露出去，而且ContentProvicer是以类似数据库中表的方式将数据暴露。也就是说ContentProvider就像一个“数据库”。那么外界获取其提供的数据，也就应该与从数据库中获取数据的操作基本一样，只不过是采用URI来表示外界需要访问的“数据库”。外部访问通过ContentResolver去访问并操作这些被暴露的数据。</p>\n<h3 id=\"20、Handler机制及底层实现；\"><a href=\"#20、Handler机制及底层实现；\" class=\"headerlink\" title=\"20、Handler机制及底层实现；\"></a>20、Handler机制及底层实现；</h3><p>Handler包括四个角色：</p>\n<ul>\n<li>Handler：负责发送消息处理消息。</li>\n<li>Message：消息实体对象，handler通过sendMessage将实体放到消息队列中。</li>\n<li>MessageQueQue:存放消息的队列。</li>\n<li>Looper：消息轮询器，不停的从消息队列中取出消息交给handler处理。</li>\n</ul>\n<p>在主线程创建Handler，在需要发送消息的地方创建一个Message，通过handler发送。这个消息存到MessageQueQue中，然后Looper会将这个消息取出交给handler处理。</p>\n<h3 id=\"21、Binder机制及底层实现；\"><a href=\"#21、Binder机制及底层实现；\" class=\"headerlink\" title=\"21、Binder机制及底层实现；\"></a>21、Binder机制及底层实现；</h3><p>Binder包含四个角色：</p>\n<ul>\n<li>Server 服务器</li>\n<li>Client 客户终端 ，获得实名Binder的引用。Server向ServiceManger注册了Binder实体及名字后，Client就可以通过名字获得该Binder的引用。例如我们申请获得名字叫张三的Binder的引用，ServiceManager收到这个连接请求，从请求数据包里获得Binder的名字。再找到该名字对应的条目，从条目中取出Binder的引用。将该引用作为回复发送给发起请求的Client。</li>\n<li>ServiceManager 域名服务器（DNS），负责将字符形式的Binder名字转化成Client中对该Binder的应用，使得Client能通过Binder名字获得Server中Binder实体的引用。</li>\n<li>Binder驱动 可以理解为路由器。Binder驱动负责进程之间Binder通信的建立，Binder在进程间的传递。Binder使用Client-Server通信方式，安全性好，简单高效。再加上其面向对象的设计思想，独特的接收缓存管理和线程池管理方式，成为Android进程间通信的中流砥柱。</li>\n</ul>\n<h3 id=\"22、ListView-中图片错位的问题是如何产生的；\"><a href=\"#22、ListView-中图片错位的问题是如何产生的；\" class=\"headerlink\" title=\"22、ListView 中图片错位的问题是如何产生的；\"></a>22、ListView 中图片错位的问题是如何产生的；</h3><p>错位原理： 如果我们只是简单的显示数据，没有convertView的复用和异步操作，就不会产生图片错位。重用convertView但没有异步操作也不会有错位现象。</p>\n<p>例如我们的listView中刚好显示7个item，当向下滑动时，显示出item8，而item8是重用的item1，如果此时异步网络请求item8的图片，比item1的图片慢，那么item8就会显示item1的图片。当item8下载完成，此时用户向上滑显示item1时，又复用的item8的image。这样就导致的图片错位。</p>\n<p>解决方法： 对imageview设置tag，并预设一张图片。</p>\n<h3 id=\"23、在manifest-和代码中如何注册和使用BroadcastReceiver；\"><a href=\"#23、在manifest-和代码中如何注册和使用BroadcastReceiver；\" class=\"headerlink\" title=\"23、在manifest 和代码中如何注册和使用BroadcastReceiver；\"></a>23、在manifest 和代码中如何注册和使用BroadcastReceiver；</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;receiver android:name&#x3D;&quot;包名.自己扩展的广播接收者名&quot;&gt;</span><br><span class=\"line\">   &lt;intent-filter&gt;</span><br><span class=\"line\">      &lt;action android:name&#x3D;&quot;android.provider.Telephony.SMS_RECEIVED&quot;&#x2F;&gt;</span><br><span class=\"line\">   &lt;&#x2F;intent-filter&gt;</span><br><span class=\"line\">&lt;&#x2F;receiver&gt;</span><br></pre></td></tr></table></figure>\n\n<p>24、说说Activity、Intent、Service 是什么关系；</p>\n<h3 id=\"25、ApplicationContext和ActivityContext的区别；\"><a href=\"#25、ApplicationContext和ActivityContext的区别；\" class=\"headerlink\" title=\"25、ApplicationContext和ActivityContext的区别；\"></a>25、ApplicationContext和ActivityContext的区别；</h3><blockquote>\n<p>这是两种不同的context，也是最常见的两种.第一种中context的生命周期与Application的生命周期相关的，context随着Application的销毁而销毁，伴随application的一生，与activity的生命周期无关.第二种中的context跟Activity的生命周期是相关的，但是对一个Application来说，Activity可以销毁几次，那么属于Activity的context就会销毁多次.至于用哪种context，得看应用场景，个人感觉用Activity的context好一点，不过也有的时候必须使用Application的context.application context</p>\n</blockquote>\n<p>26、一张Bitmap所占内存以及内存占用的计算；</p>\n<h3 id=\"27、Serializable-和Parcelable-的区别；\"><a href=\"#27、Serializable-和Parcelable-的区别；\" class=\"headerlink\" title=\"27、Serializable 和Parcelable 的区别；\"></a>27、Serializable 和Parcelable 的区别；</h3><blockquote>\n<p>在Android上应该尽量采用Parcelable，它效率更高。<br>Parcelabe代码比Serializable多一些。<br>Parcelabe比Serializable速度高十倍以上。<br>Serializable只需要对某个类以及它的属性实现Serializable接口即可，无需实现方法。缺点是使用的反射，序列化的过程较慢，这种机制会在序列化的时候创建许多的临时对象。容易触发GC。<br>Parcable方法实现的原理是将一根完整的对象进行分解，而分解后的每一部分都是Intent所支持的数据类型，这样也就实现传递对象的功能。</p>\n</blockquote>\n<p>28、请描述一下BroadcastReceiver；</p>\n<p>29、请描述一下Android 的事件分发机制；</p>\n<p>30、请介绍一下NDK；</p>\n<p>31、什么是NDK库，如何在jni中注册native函数，有几种注册方式；</p>\n<p>32、AsyncTask 如何使用；</p>\n<p>33、对于应用更新这块是如何做的？(灰度，强制更新，分区域更新)；</p>\n<p>34、混合开发，RN，weex，H5，小程序(做Android的了解一些前端js等还是很有好处的)；</p>\n<h3 id=\"35、什么情况下会导致内存泄露；\"><a href=\"#35、什么情况下会导致内存泄露；\" class=\"headerlink\" title=\"35、什么情况下会导致内存泄露；\"></a>35、什么情况下会导致内存泄露；</h3><p>根本原因：长生命周期的对象持有短生命周期的对象。短周期对象就无法及时释放。</p>\n<ul>\n<li>静态集合类引起内存泄露</li>\n<li>remove 方法无法删除set集  Objects.hash(firstName, lastName);</li>\n<li>observer 我们在使用监听器的时候，往往是addxxxlistener，但是当我们不需要的时候，忘记removexxxlistener，就容易内存leak。广播没有unregisterrecevier</li>\n<li>各种数据链接没有关闭，数据库contentprovider，io，sokect等。cursor</li>\n<li>内部类</li>\n<li>单例<br>单例 是一个全局的静态对象，当持有某个复制的类A是，A无法被释放，内存leak。</li>\n</ul>\n<h3 id=\"36、如何对Android-应用进行性能分析以及优化；\"><a href=\"#36、如何对Android-应用进行性能分析以及优化；\" class=\"headerlink\" title=\"36、如何对Android 应用进行性能分析以及优化；\"></a>36、如何对Android 应用进行性能分析以及优化；</h3><blockquote>\n<p>android 性能主要之响应速度 和UI刷新速度。</p>\n</blockquote>\n<ul>\n<li><p>首先从函数的耗时来说，有一个工具TraceView 这是androidsdk自带的工作，用于测量函数耗时的。</p>\n</li>\n<li><p>UI布局的分析，可以有2块，一块就是Hierarchy Viewer 可以看到View的布局层次，以及每个View刷新加载的时间。这样可以很快定位到那块layout &amp; View 耗时最长。</p>\n</li>\n<li><p>还有就是通过自定义View来减少view的层次。</p>\n</li>\n</ul>\n<p>37、说一款你认为当前比较火的应用并设计(直播APP)；</p>\n<h3 id=\"38、OOM的避免异常及解决方法；\"><a href=\"#38、OOM的避免异常及解决方法；\" class=\"headerlink\" title=\"38、OOM的避免异常及解决方法；\"></a>38、OOM的避免异常及解决方法；</h3><p>当前占用的内存加上app申请的内存资源超过了Dvlvik虚拟机的最大内存限制导致抛出Out of memory异常。</p>\n<h3 id=\"39、屏幕适配的处理技巧都有哪些；\"><a href=\"#39、屏幕适配的处理技巧都有哪些；\" class=\"headerlink\" title=\"39、屏幕适配的处理技巧都有哪些；\"></a>39、屏幕适配的处理技巧都有哪些；</h3><p>屏幕适配的方式：xxxdpi， wrap_content,match_parent. 获取屏幕大小，做处理。</p>\n<ul>\n<li><p>dp来适配屏幕，sp来确定字体大小</p>\n</li>\n<li><p>drawable-xxdpi, values-1280*1920等 这些就是资源的适配。</p>\n</li>\n<li><p>wrap_content,match_parent, 这些是view的自适应</p>\n</li>\n<li><p>weight，这是权重的适配。</p>\n</li>\n</ul>\n<p>40、两个Activity 之间跳转时必然会执行的是哪几个方法？</p>\n<p>40、Okhttp原理</p>\n<p>41、Rxjava用法和原理</p>\n<p>42，热更新技术有哪些，知道的原理！</p>\n<p>43、Activity启动流程</p>\n<p>44、Android内存管理</p>\n<p>45、Android权限管理</p>\n<p>46、将一下7.0的新特性</p>\n<p>47、说下你你们项目的架构</p>\n<p>48、组件化的有点和具体实施方案</p>\n<p>49、内存泄露检测方法</p>\n<p>50、Http协议，SSL握手机制。</p>\n<h2 id=\"Java基础\"><a href=\"#Java基础\" class=\"headerlink\" title=\"Java基础\"></a>Java基础</h2><p>1、集合类以及集合框架；HashMap与HashTable实现原理，线程安全性，hash冲突及处理算法；ConcurrentHashMap；</p>\n<p>2、进程和线程的区别；</p>\n<p>3、Java的并发、多线程、线程模型；</p>\n<p>4、什么是线程池，如何使用?<br>答：线程池就是事先将多个线程对象放到一个容器中，当使用的时候就不用new 线程而是直接去池中拿线程即可，节省了开辟子线程的时间，提高的代码执行效率。</p>\n<p>5、数据一致性如何保证；Synchronized关键字，类锁，方法锁，重入锁；</p>\n<p>6、Java中实现多态的机制是什么；</p>\n<p>7、如何将一个Java对象序列化到文件里；</p>\n<p>8、说说你对Java反射的理解；<br>答：Java 中的反射首先是能够获取到Java 中要反射类的字节码， 获取字节码有三种方法，</p>\n<ul>\n<li>(1).Class.forName(className)</li>\n<li>(2).类名.class</li>\n<li>(3).this.getClass()。</li>\n</ul>\n<p>然后将字节码中的方法，变量，构造函数等映射成相应的Method、Filed、Constructor 等类，这些类提供了丰富的方法可以被我们所使用。</p>\n<p>9、同步的方法；多进程开发以及多进程应用场景；</p>\n<p>10、在Java中wait和seelp方法的不同；<br>答：最大的不同是在等待时wait 会释放锁，而sleep 一直持有锁。wait 通常被用于线程间交互，sleep 通常被用于暂停执行。</p>\n<p>11、synchronized 和volatile 关键字的作用；<br>答：</p>\n<ul>\n<li>1）保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量的值，这新值对其他线程来说是立即可见的。</li>\n<li>2）禁止进行指令重排序。</li>\n</ul>\n<p>12、volatile 本质是在告诉jvm 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</p>\n<ul>\n<li>(1).volatile 仅能使用在变量级别；synchronized 则可以使用在变量、方法、和类级别的</li>\n<li>(2).volatile 仅能实现变量的修改可见性，并不能保证原子性；synchronized 则可以保证变量的修改可见性和原子性</li>\n<li>(3).volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。</li>\n<li>(4).volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化</li>\n</ul>\n<p>13、服务器只提供数据接收接口，在多线程或多进程条件下，如何保证数据的有序到达；</p>\n<p>14、ThreadLocal原理，实现及如何保证Local属性；</p>\n<p>15、String StringBuilder StringBuffer对比；</p>\n<p>16、你所知道的设计模式有哪些；<br>答：<br>Java 中一般认为有23 种设计模式，我们不需要所有的都会，但是其中常用的几种设计模式应该去掌握。下面列出了所有的设计模式。需要掌握的设计模式我单独列出来了，当然能掌握的越多越好。<br>总体来说设计模式分为三大类：<br>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。<br>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。<br>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>\n<p>17、Java如何调用c、c++语言；</p>\n<p>18、接口与回调；回调的原理；写一个回调demo；</p>\n<p>19、泛型原理，举例说明；解析与分派；</p>\n<p>20、抽象类与接口的区别；应用场景；抽象类是否可以没有方法和属性；</p>\n<p>21、静态属性和静态方法是否可以被继承？是否可以被重写？以及原因？</p>\n<p>22、修改对象A的equals方法的签名，那么使用HashMap存放这个对象实例的时候，会调用哪个equals方法；</p>\n<p>23、说说你对泛型的了解；</p>\n<p>24、Java的异常体系；</p>\n<p>25、如何控制某个方法允许并发访问线程的个数；</p>\n<p>26、动态代理的区别，什么场景使用；</p>\n<p>27、Dex加载过程和优化方式；</p>\n<p>28、Jvm和Gc机制；</p>\n<p>29、常用的设计模式。</p>\n<h2 id=\"数据结构与算法\"><a href=\"#数据结构与算法\" class=\"headerlink\" title=\"数据结构与算法\"></a>数据结构与算法</h2><p>1、堆和栈在内存中的区别是什么(数据结构方面以及实际实现方面)；</p>\n<p>2、最快的排序算法是哪个？给阿里2万多名员工按年龄排序应该选择哪个算法？堆和树的区别；写出快排代码；链表逆序代码；</p>\n<p>3、求1000以内的水仙花数以及40亿以内的水仙花数；</p>\n<p>4、子串包含问题(KMP 算法)写代码实现；</p>\n<p>5、万亿级别的两个URL文件A和B，如何求出A和B的差集C,(Bit映射-&gt;hash分组-&gt;多文件读写效率-&gt;磁盘寻址以及应用层面对寻址的优化)</p>\n<p>6蚁群算法与蒙特卡洛算法；</p>\n<p>7、写出你所知道的排序算法及时空复杂度，稳定性；</p>\n<p>8、百度POI中如何试下查找最近的商家功能(坐标镜像+R树)。</p>\n<p>9、遍历二叉树</p>\n<p>10、自己集合实现一个队列</p>\n<p>11、自己实现线程安全类</p>\n<p>12、快速排序和冒泡的排序，怎么转换一下。</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>1、死锁的四个必要条件；</p>\n<p>2、常见编码方式；utf-8编码中的中文占几个字节；int型几个字节；</p>\n<p>3、实现一个Json解析器(可以通过正则提高速度)；</p>\n<p>4、MVC MVP MVVM; 常见的设计模式；写出观察者模式的代码；</p>\n<p>5、TCP的3次握手和四次挥手；TCP与UDP的区别；</p>\n<p>6、HTTP协议；HTTP1.0与2.0的区别；HTTP报文结构；</p>\n<p>7、HTTP与HTTPS的区别以及如何实现安全性；</p>\n<p>8、都使用过哪些框架、平台；</p>\n<p>9、都使用过哪些自定义控件；</p>\n<p>10、介绍你做过的哪些项目；</p>\n<h2 id=\"非技术问题汇总\"><a href=\"#非技术问题汇总\" class=\"headerlink\" title=\"非技术问题汇总\"></a>非技术问题汇总</h2><p>1、研究比较深入的领域有哪些；<br>2、对业内信息的关注渠道有哪些；<br>3、最近都读哪些书；<br>4、自己最擅长的技术点，最感兴趣的技术领域和技术点；<br>5、项目中用了哪些开源库，如何避免因为引入开源库而导致的安全性和稳定性问题；<br>6、实习过程中做了什么，有什么产出；<br>7、5枚硬币，2正3反如何划分为两堆然后通过翻转让两堆中正面向上的硬8币和反面向上的硬币个数相同；<br>8、时针走一圈，时针分针重合几次；<br>9、N * N的方格纸,里面有多少个正方形；<br>10、现在下载速度很慢,试从网络协议的角度分析原因,并优化(网络的5层都可以涉及)。</p>\n<h2 id=\"HR问题汇总\"><a href=\"#HR问题汇总\" class=\"headerlink\" title=\"HR问题汇总\"></a>HR问题汇总</h2><p>1、您在前一家公司的离职原因是什么？<br>2、讲一件你印象最深的一件事情；<br>3、介绍一个你影响最深的项目；<br>4、介绍你最热爱最擅长的专业领域；<br>5、公司实习最大的收获是什么；<br>6、与上级意见不一致时，你将怎么办；<br>7、自己的优点和缺点是什么？并举例说明？<br>8、你的学习方法是什么样的？实习过程中如何学习？实习项目中遇到的最9、大困难是什么以及如何解决的；<br>10、说一件最能证明你能力的事情；<br>11、针对你你申请的这个职位，你认为你还欠缺什么；<br>12、如果通过这次面试我们单位录用了你，但工作一段时间却发现你根本13、不适合这个职位，你怎么办；<br>14、项目中遇到最大的困难是什么？如何解决的；<br>15、你的职业规划以及个人目标；未来发展路线及求职定位；<br>16、如果你在这次面试中没有被录用，你怎么打算；<br>17、评价下自己，评价下自己的技术水平，个人代码量如何；<br>18、通过哪些渠道了解的招聘信息，其他同学都投了哪些公司；<br>19、业余都有哪些爱好；<br>20、你做过的哪件事最令自己感到骄傲；<br>21、假如你晚上要去送一个出国的同学去机场，可单位临时有事非你办不可，你怎么办；<br>22、就你申请的这个职位，你认为你还欠缺什么；<br>23、当前的offer状况；如果BATH都给了offer该如何选；<br>24、你对一份工作更看重哪些方面？平台，技术，氛围，城市，money；<br>25、理想薪资范围；杭州岗和北京岗选哪个；<br>26、理想中的工作环境是什么；<br>27、谈谈你对跳槽的看法；<br>28、说说你对行业、技术发展趋势的看法；<br>29、实习过程中周围同事/同学有哪些值得学习的地方；<br>30、家人对你的工作期望及自己的工作期望；<br>31、如果你的工作出现失误，给本公司造成经济损失，你认为该怎么办；<br>32、若上司在公开会议上误会你了，该如何解决；<br>32、是否可以实习，可以实习多久；<br>33、在五年的时间内，你的职业规划；<br>34、你看中公司的什么？或者公司的那些方面最吸引你。</p>\n","categories":["面试"],"tags":["面试"]}]